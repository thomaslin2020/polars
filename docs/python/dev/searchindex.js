Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL Interface", "Testing"], "terms": {"python": [0, 41, 42, 64, 108, 118, 119, 140, 141, 143, 157, 206, 212, 238, 239, 258, 288, 302, 317, 394, 540, 542, 544, 642, 731, 732, 734, 735, 776, 777, 779, 789, 795, 889, 913, 990, 1002, 1003, 1004, 1010, 1141, 1215, 1272, 1292], "api": [0, 108, 138, 157, 212, 288, 302, 544, 753, 789, 889, 1141, 1292], "refer": [0, 40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 165, 302, 305, 386, 425, 428, 542, 592, 640, 656, 657, 673, 674, 675, 679, 789, 815, 901, 1025, 1028, 1161, 1229, 1230, 1246, 1247, 1248, 1252, 1292, 1296], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 135, 136, 137, 141, 142, 145, 146, 155, 300, 301, 305, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 785, 789, 801, 810, 811, 814, 816, 820, 821, 825, 828, 836, 837, 838, 839, 841, 842, 846, 847, 851, 854, 864, 871, 872, 873, 878, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 981, 982, 1021, 1063, 1141, 1159, 1219, 1237, 1238, 1261, 1269, 1270, 1280, 1292, 1300, 1301], "lazyfram": [0, 1, 65, 66, 68, 70, 81, 82, 83, 84, 85, 87, 88, 89, 132, 133, 134, 135, 136, 137, 138, 141, 142, 148, 210, 226, 227, 302, 453, 532, 789, 801, 900, 906, 1300, 1301], "seri": [0, 1, 2, 16, 30, 51, 72, 73, 82, 83, 84, 85, 89, 90, 91, 107, 109, 112, 114, 141, 143, 144, 148, 169, 178, 181, 184, 186, 189, 194, 197, 198, 199, 201, 203, 205, 213, 214, 215, 216, 220, 221, 232, 233, 234, 236, 240, 252, 253, 257, 260, 263, 264, 281, 302, 316, 317, 328, 351, 355, 362, 363, 365, 421, 450, 453, 456, 460, 461, 469, 473, 476, 477, 480, 482, 483, 484, 496, 503, 505, 530, 532, 538, 540, 542, 544, 592, 593, 594, 595, 596, 597, 601, 602, 603, 609, 617, 620, 673, 674, 675, 679, 683, 690, 691, 699, 708, 710, 714, 722, 723, 726, 727, 731, 732, 734, 735, 740, 742, 746, 747, 750, 751, 752, 753, 762, 764, 765, 768, 771, 776, 777, 780, 789, 801, 824, 828, 855, 882, 901, 905, 1284, 1286, 1288, 1291, 1293, 1296, 1297, 1298, 1299, 1301], "express": [0, 13, 58, 59, 60, 61, 87, 88, 145, 148, 150, 160, 174, 176, 178, 188, 191, 212, 223, 227, 237, 242, 243, 246, 250, 265, 275, 276, 278, 280, 288, 302, 310, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 332, 333, 334, 335, 336, 339, 350, 355, 356, 357, 358, 359, 366, 369, 370, 371, 372, 383, 384, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 447, 449, 450, 452, 453, 457, 459, 460, 462, 463, 464, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 486, 489, 490, 494, 495, 497, 498, 499, 502, 503, 509, 511, 531, 532, 538, 539, 541, 542, 543, 544, 548, 549, 550, 551, 552, 553, 555, 556, 558, 560, 562, 564, 565, 567, 569, 571, 572, 575, 576, 578, 580, 581, 585, 586, 587, 588, 589, 591, 595, 596, 597, 599, 600, 615, 616, 617, 619, 621, 623, 624, 626, 628, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 656, 657, 662, 663, 664, 665, 677, 686, 687, 690, 692, 693, 696, 697, 699, 700, 702, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 760, 762, 764, 765, 766, 767, 768, 769, 771, 773, 775, 776, 777, 779, 780, 785, 788, 801, 805, 810, 811, 819, 820, 821, 824, 827, 830, 851, 857, 858, 861, 862, 863, 865, 870, 876, 877, 878, 880, 881, 889, 901, 905, 906, 930, 965, 980, 989, 990, 1007, 1051, 1067, 1099, 1100, 1103, 1141, 1165, 1185, 1191, 1192, 1205, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1219, 1229, 1230, 1292], "selector": [0, 40, 161, 168, 170, 174, 218, 225, 227, 259, 267, 269, 302, 447, 453, 789, 801, 807, 816, 817, 820, 846, 871, 901], "function": [0, 40, 41, 49, 51, 72, 81, 82, 83, 84, 85, 88, 90, 91, 108, 112, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 141, 142, 143, 144, 146, 153, 155, 157, 158, 165, 173, 181, 212, 218, 226, 227, 231, 261, 262, 266, 269, 270, 282, 288, 302, 313, 317, 351, 383, 384, 386, 422, 444, 445, 446, 467, 532, 540, 541, 542, 544, 555, 565, 566, 581, 585, 589, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 625, 694, 704, 708, 709, 719, 721, 722, 723, 726, 727, 728, 729, 739, 740, 742, 744, 745, 748, 751, 752, 753, 756, 758, 761, 762, 764, 766, 767, 770, 774, 778, 780, 785, 789, 801, 811, 815, 821, 841, 842, 846, 850, 853, 873, 880, 883, 889, 901, 905, 913, 946, 960, 980, 981, 1022, 1044, 1045, 1046, 1047, 1063, 1133, 1141, 1159, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1187, 1194, 1199, 1272, 1274, 1292, 1301], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 50, 58, 59, 60, 61, 63, 64, 65, 72, 73, 74, 81, 82, 84, 87, 88, 89, 91, 96, 97, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 141, 142, 143, 144, 146, 147, 148, 150, 157, 163, 174, 175, 187, 188, 189, 190, 191, 192, 193, 206, 207, 208, 210, 212, 225, 226, 230, 236, 237, 238, 239, 248, 256, 261, 262, 266, 275, 279, 300, 302, 313, 314, 315, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 336, 339, 341, 342, 343, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 361, 362, 366, 369, 370, 371, 372, 384, 385, 391, 392, 393, 396, 397, 398, 400, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 422, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 449, 460, 462, 463, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 489, 490, 494, 495, 497, 503, 509, 511, 519, 531, 533, 539, 544, 575, 576, 580, 581, 589, 591, 592, 595, 596, 597, 599, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 623, 624, 625, 631, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 662, 663, 664, 665, 673, 674, 675, 677, 679, 682, 692, 693, 694, 696, 697, 700, 703, 708, 710, 719, 730, 731, 732, 733, 734, 735, 736, 746, 747, 749, 750, 751, 752, 753, 762, 765, 775, 776, 777, 780, 785, 789, 801, 808, 809, 810, 811, 820, 821, 827, 828, 829, 830, 831, 832, 850, 855, 876, 901, 910, 911, 923, 925, 926, 927, 928, 929, 931, 933, 934, 945, 947, 949, 950, 951, 955, 956, 958, 964, 965, 968, 981, 982, 987, 988, 989, 992, 993, 994, 996, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1049, 1050, 1063, 1069, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1093, 1094, 1095, 1096, 1098, 1104, 1110, 1112, 1120, 1132, 1134, 1141, 1153, 1159, 1161, 1165, 1166, 1168, 1169, 1181, 1183, 1194, 1199, 1204, 1205, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1235, 1236, 1237, 1238, 1246, 1247, 1248, 1250, 1252, 1255, 1272, 1273, 1274, 1275, 1277, 1282, 1291, 1292, 1300], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 107, 109, 110, 111, 112, 113, 115, 118, 119, 120, 122, 123, 127, 128, 129, 132, 133, 134, 136, 140, 141, 142, 143, 144, 147, 148, 158, 174, 181, 187, 189, 190, 192, 193, 194, 207, 208, 212, 236, 256, 261, 264, 267, 278, 302, 313, 315, 319, 320, 321, 322, 323, 324, 327, 332, 333, 334, 336, 339, 350, 351, 355, 356, 357, 358, 359, 361, 362, 363, 366, 369, 370, 371, 372, 384, 385, 391, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 449, 460, 463, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 490, 494, 495, 497, 503, 509, 511, 531, 532, 542, 544, 589, 591, 595, 596, 597, 599, 600, 601, 623, 624, 631, 634, 635, 636, 637, 639, 640, 641, 642, 646, 647, 648, 662, 663, 664, 665, 673, 677, 692, 693, 694, 700, 708, 710, 719, 730, 731, 732, 733, 734, 735, 736, 738, 739, 746, 747, 748, 749, 750, 751, 752, 753, 762, 765, 775, 776, 777, 780, 785, 789, 801, 810, 811, 819, 820, 821, 828, 829, 831, 832, 836, 851, 855, 863, 871, 880, 901, 910, 911, 923, 925, 926, 927, 928, 929, 931, 933, 934, 945, 946, 947, 949, 950, 951, 955, 956, 958, 965, 981, 982, 987, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1049, 1061, 1069, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1093, 1094, 1095, 1096, 1098, 1104, 1110, 1112, 1132, 1133, 1153, 1159, 1165, 1166, 1168, 1169, 1194, 1204, 1205, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1235, 1236, 1237, 1238, 1246, 1250, 1272, 1273, 1275, 1283, 1292, 1300], "input": [0, 81, 87, 110, 112, 118, 119, 160, 168, 188, 191, 212, 216, 225, 231, 242, 243, 246, 250, 253, 265, 275, 276, 280, 302, 310, 366, 447, 459, 471, 536, 542, 543, 544, 553, 581, 596, 628, 662, 669, 670, 671, 672, 703, 705, 707, 708, 710, 713, 715, 716, 717, 725, 729, 736, 738, 739, 746, 747, 748, 750, 751, 752, 753, 755, 757, 760, 768, 771, 773, 779, 789, 801, 805, 816, 827, 830, 853, 857, 858, 859, 861, 865, 870, 876, 877, 881, 901, 905, 965, 1067, 1137, 1138, 1141, 1165, 1191, 1235, 1292], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 123, 158, 167, 189, 190, 192, 193, 206, 212, 216, 219, 225, 227, 236, 238, 242, 253, 271, 275, 302, 313, 315, 317, 339, 384, 509, 532, 540, 541, 542, 544, 552, 555, 565, 589, 601, 606, 608, 610, 612, 631, 648, 700, 704, 705, 706, 707, 708, 717, 718, 731, 732, 751, 752, 753, 789, 801, 814, 819, 828, 829, 831, 832, 841, 842, 846, 847, 855, 857, 859, 876, 883, 889, 901, 910, 911, 913, 934, 981, 1110, 1141, 1159, 1204, 1221, 1280, 1292], "config": [0, 81, 167, 242, 275, 302, 633, 658, 732, 735, 736, 801, 810, 814, 857, 876, 901, 1206, 1231], "extend": [0, 110, 273, 302, 450, 789, 801, 905, 912, 1051, 1292], "plugin": [0, 789, 801], "sql": [0, 38, 65, 69, 120, 121, 208, 246, 302, 346, 524, 618, 749, 769, 789, 801, 861, 901, 941, 1125, 1191, 1292], "interfac": [0, 801], "except": [0, 141, 195, 209, 211, 254, 302, 738, 801, 837, 901, 906, 1062, 1092, 1263, 1273, 1282, 1292], "test": [0, 6, 120, 121, 123, 129, 801, 833, 840, 901], "metadata": [0, 134, 189, 190, 192, 193, 236, 302, 801, 828, 829, 831, 832, 855, 901], "These": [1, 40, 116, 120, 121, 155, 266, 302, 436, 788, 789, 905, 1022, 1036], "allow": [1, 13, 39, 40, 58, 59, 60, 61, 72, 91, 96, 108, 120, 132, 135, 136, 137, 138, 148, 150, 157, 206, 209, 210, 237, 238, 240, 261, 262, 267, 279, 302, 418, 425, 428, 519, 542, 544, 594, 615, 673, 674, 675, 789, 836, 837, 841, 842, 846, 871, 878, 901, 905, 906, 1018, 1025, 1028, 1043, 1120, 1141, 1163, 1183, 1186, 1246, 1247, 1248, 1273, 1274, 1292, 1301], "you": [1, 15, 19, 40, 45, 61, 70, 81, 88, 89, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 123, 124, 127, 128, 130, 132, 136, 138, 155, 175, 189, 190, 192, 193, 205, 206, 212, 223, 227, 236, 237, 238, 239, 258, 266, 288, 302, 305, 414, 415, 418, 421, 422, 425, 428, 436, 447, 453, 471, 502, 532, 542, 544, 594, 601, 604, 605, 606, 607, 608, 610, 611, 612, 633, 647, 656, 657, 658, 722, 731, 736, 740, 753, 762, 765, 780, 789, 811, 817, 828, 829, 831, 832, 833, 840, 855, 863, 889, 901, 905, 906, 1014, 1015, 1021, 1022, 1025, 1028, 1036, 1050, 1067, 1103, 1141, 1163, 1206, 1220, 1229, 1230, 1231, 1248, 1282, 1292, 1296, 1301], "regist": [1, 65, 67, 68, 69, 70, 82, 83, 84, 85, 149, 151, 789, 905, 1300], "custom": [1, 32, 39, 40, 82, 83, 84, 85, 149, 150, 151, 158, 167, 212, 282, 288, 302, 317, 351, 425, 428, 532, 540, 542, 544, 602, 603, 708, 751, 752, 753, 789, 814, 841, 842, 883, 889, 901, 913, 946, 1025, 1028, 1133, 1141, 1170, 1171, 1292, 1301], "dedic": [1, 108, 206, 238, 302], "namespac": [1, 120, 301, 302, 788, 801, 900, 1292, 1301], "underli": [1, 47, 48, 50, 72, 74, 91, 94, 100, 107, 109, 110, 111, 113, 120, 121, 123, 127, 128, 130, 136, 145, 148, 150, 174, 175, 206, 207, 238, 256, 261, 302, 356, 392, 393, 394, 398, 402, 404, 405, 406, 408, 409, 411, 413, 416, 419, 420, 421, 423, 437, 438, 439, 440, 594, 613, 632, 636, 643, 789, 820, 901, 906, 950, 959, 988, 989, 990, 994, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1013, 1016, 1019, 1020, 1021, 1023, 1037, 1038, 1039, 1040, 1050, 1163, 1181, 1194, 1205, 1209, 1216, 1268, 1273, 1292], "polar": [1, 302, 305, 788, 789, 795, 801, 901, 905, 906, 1292, 1296, 1300], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 99, 145, 146, 239, 302, 776, 785, 789, 795, 801, 901, 1272, 1273, 1292, 1300], "without": [1, 41, 49, 51, 58, 59, 60, 61, 86, 87, 88, 114, 122, 125, 131, 133, 134, 138, 261, 269, 270, 302, 317, 383, 384, 422, 467, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 633, 658, 719, 766, 767, 768, 789, 810, 811, 873, 901, 957, 960, 980, 981, 1022, 1063, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1206, 1231, 1272, 1273, 1292], "requir": [1, 39, 40, 45, 61, 81, 112, 120, 121, 141, 142, 143, 144, 160, 165, 237, 262, 265, 302, 352, 444, 445, 446, 533, 544, 620, 673, 674, 675, 697, 765, 789, 805, 865, 870, 901, 947, 1045, 1046, 1047, 1134, 1193, 1246, 1247, 1248, 1273, 1274, 1277, 1292, 1296], "subclass": [1, 302], "mixin": 1, "expr": [1, 81, 82, 83, 84, 85, 174, 176, 208, 209, 223, 227, 237, 242, 243, 275, 276, 302, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 789, 790, 791, 794, 795, 796, 797, 798, 820, 822, 836, 837, 852, 857, 858, 859, 862, 876, 877, 901, 905, 980, 989, 990, 1007, 1018, 1036, 1052, 1057, 1099, 1103, 1109, 1126, 1130, 1192, 1205, 1211, 1216, 1239, 1264, 1292], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 61, 70, 72, 81, 88, 89, 90, 91, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 148, 155, 157, 160, 165, 167, 170, 173, 176, 180, 181, 187, 188, 189, 190, 191, 192, 193, 206, 208, 209, 210, 212, 218, 219, 225, 227, 236, 237, 238, 239, 242, 243, 244, 246, 250, 257, 261, 262, 265, 270, 271, 275, 276, 279, 280, 302, 313, 315, 330, 346, 351, 366, 374, 376, 377, 422, 436, 441, 443, 444, 445, 446, 471, 473, 476, 477, 480, 482, 483, 484, 487, 492, 524, 532, 542, 543, 576, 581, 589, 592, 595, 596, 597, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 622, 625, 627, 628, 642, 644, 646, 653, 654, 655, 656, 657, 662, 677, 682, 688, 704, 705, 707, 713, 715, 716, 717, 718, 721, 725, 729, 731, 732, 734, 735, 755, 757, 760, 768, 771, 773, 776, 777, 779, 781, 782, 784, 788, 789, 790, 791, 794, 795, 796, 797, 798, 801, 805, 810, 811, 814, 817, 821, 822, 827, 828, 829, 830, 831, 832, 833, 836, 837, 840, 842, 846, 847, 851, 853, 855, 857, 858, 860, 861, 865, 870, 873, 876, 877, 878, 881, 901, 905, 906, 910, 911, 925, 941, 946, 957, 965, 974, 975, 1022, 1036, 1042, 1044, 1045, 1046, 1047, 1055, 1060, 1067, 1071, 1075, 1076, 1080, 1081, 1082, 1083, 1090, 1093, 1125, 1133, 1159, 1161, 1165, 1166, 1177, 1191, 1196, 1199, 1215, 1217, 1226, 1227, 1228, 1229, 1230, 1235, 1248, 1250, 1255, 1262, 1273, 1274, 1282, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299, 1301], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 67, 81, 87, 99, 107, 112, 118, 119, 122, 123, 124, 126, 129, 130, 132, 135, 136, 145, 146, 150, 155, 159, 161, 167, 170, 177, 195, 201, 203, 205, 206, 207, 208, 210, 211, 216, 218, 222, 223, 227, 230, 237, 238, 239, 243, 249, 253, 254, 259, 261, 267, 269, 270, 271, 276, 278, 302, 314, 316, 339, 354, 372, 383, 389, 390, 391, 447, 452, 458, 465, 468, 470, 473, 477, 483, 484, 486, 490, 501, 502, 509, 528, 532, 541, 542, 561, 564, 565, 567, 568, 569, 570, 571, 572, 579, 587, 592, 596, 598, 603, 620, 626, 628, 634, 635, 641, 642, 646, 651, 657, 661, 667, 668, 669, 670, 687, 705, 722, 723, 724, 725, 728, 729, 731, 738, 740, 745, 746, 749, 757, 764, 771, 772, 773, 779, 789, 795, 801, 804, 807, 810, 811, 814, 817, 819, 821, 823, 836, 841, 842, 846, 851, 858, 863, 864, 871, 873, 877, 878, 880, 901, 906, 934, 980, 982, 985, 986, 987, 1062, 1069, 1087, 1092, 1102, 1103, 1110, 1129, 1133, 1161, 1165, 1171, 1200, 1207, 1208, 1214, 1215, 1219, 1224, 1234, 1240, 1241, 1242, 1243, 1263, 1292, 1300, 1301], "support": [1, 39, 40, 45, 89, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 137, 145, 150, 155, 206, 207, 208, 209, 213, 215, 220, 238, 239, 249, 250, 252, 258, 262, 302, 525, 581, 596, 626, 628, 656, 657, 658, 662, 785, 789, 795, 836, 837, 864, 865, 901, 906, 1126, 1165, 1200, 1229, 1230, 1231, 1235, 1274, 1292, 1300], "target": [1, 38, 39, 40, 86, 123, 302, 640, 673, 674, 675, 906, 1213, 1246, 1247, 1248], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 41, 43, 45, 47, 48, 49, 50, 51, 58, 59, 60, 61, 65, 66, 70, 72, 74, 81, 87, 88, 89, 91, 107, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 155, 157, 158, 159, 160, 163, 165, 167, 170, 171, 173, 175, 179, 180, 181, 182, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 225, 228, 229, 230, 233, 234, 236, 237, 238, 239, 240, 242, 243, 246, 247, 249, 251, 252, 255, 256, 258, 261, 262, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 282, 283, 288, 301, 302, 313, 316, 317, 318, 327, 339, 345, 346, 347, 352, 360, 362, 363, 366, 378, 379, 380, 381, 382, 383, 384, 391, 392, 405, 414, 415, 418, 421, 422, 425, 428, 436, 439, 443, 449, 459, 465, 467, 469, 470, 471, 474, 476, 478, 481, 486, 498, 502, 503, 509, 512, 519, 520, 521, 522, 523, 524, 526, 530, 532, 533, 537, 538, 540, 541, 542, 543, 544, 548, 549, 550, 551, 552, 553, 555, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 581, 587, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 626, 627, 628, 631, 633, 634, 640, 644, 645, 649, 650, 651, 652, 653, 654, 655, 658, 660, 661, 667, 668, 669, 670, 671, 672, 676, 682, 684, 687, 690, 691, 695, 697, 698, 699, 700, 704, 708, 709, 716, 719, 721, 722, 726, 728, 729, 739, 740, 742, 744, 745, 748, 749, 751, 753, 756, 758, 761, 762, 766, 767, 768, 770, 774, 778, 779, 780, 785, 789, 801, 804, 805, 806, 809, 810, 811, 814, 817, 819, 821, 827, 828, 829, 830, 831, 832, 834, 836, 837, 841, 842, 846, 847, 851, 853, 855, 857, 858, 859, 861, 862, 863, 864, 865, 869, 870, 871, 873, 876, 877, 878, 879, 880, 883, 884, 889, 900, 901, 905, 906, 912, 913, 922, 934, 940, 941, 942, 947, 954, 956, 958, 959, 960, 965, 968, 976, 977, 978, 979, 980, 981, 987, 988, 990, 1001, 1014, 1015, 1018, 1021, 1022, 1025, 1028, 1036, 1039, 1041, 1044, 1049, 1050, 1058, 1059, 1061, 1063, 1068, 1072, 1074, 1075, 1077, 1078, 1084, 1086, 1088, 1089, 1099, 1103, 1104, 1110, 1113, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1131, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1154, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1200, 1201, 1203, 1204, 1206, 1207, 1213, 1217, 1218, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1233, 1234, 1240, 1241, 1242, 1243, 1248, 1249, 1255, 1256, 1258, 1261, 1262, 1264, 1265, 1268, 1270, 1272, 1273, 1274, 1276, 1277, 1279, 1280, 1281, 1282, 1292, 1296, 1300, 1301], "featur": [1, 45, 49, 51, 86, 302], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 58, 59, 60, 61, 65, 70, 72, 74, 81, 86, 87, 88, 89, 91, 93, 95, 96, 98, 103, 105, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 159, 160, 163, 167, 170, 172, 173, 175, 178, 182, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 215, 218, 219, 223, 225, 226, 227, 234, 236, 237, 238, 239, 240, 243, 246, 249, 250, 251, 252, 254, 256, 261, 262, 265, 266, 267, 269, 270, 271, 272, 276, 278, 279, 288, 301, 302, 310, 313, 315, 316, 317, 318, 328, 331, 338, 339, 346, 351, 383, 384, 389, 390, 391, 394, 404, 418, 422, 425, 436, 444, 445, 446, 449, 453, 465, 467, 469, 471, 487, 493, 501, 502, 505, 507, 509, 519, 524, 525, 527, 530, 532, 534, 537, 542, 544, 548, 551, 552, 553, 555, 563, 581, 589, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 656, 657, 658, 661, 662, 665, 667, 668, 669, 670, 673, 674, 675, 677, 679, 682, 700, 701, 704, 705, 706, 707, 709, 714, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 731, 732, 734, 735, 740, 744, 745, 746, 747, 749, 750, 753, 756, 758, 761, 762, 765, 766, 767, 768, 770, 774, 776, 777, 778, 779, 780, 785, 789, 804, 805, 809, 810, 811, 814, 817, 819, 821, 824, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 841, 842, 846, 847, 851, 855, 858, 859, 861, 863, 864, 865, 866, 870, 871, 873, 874, 877, 880, 883, 889, 901, 905, 906, 910, 911, 912, 913, 926, 933, 934, 941, 946, 957, 960, 965, 968, 980, 981, 982, 985, 986, 987, 990, 1000, 1018, 1022, 1025, 1036, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1054, 1060, 1061, 1062, 1063, 1067, 1068, 1070, 1077, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1094, 1102, 1103, 1106, 1108, 1110, 1120, 1125, 1126, 1131, 1133, 1141, 1159, 1161, 1163, 1165, 1166, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1186, 1187, 1189, 1191, 1195, 1196, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1238, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1250, 1252, 1255, 1263, 1268, 1273, 1274, 1280, 1281, 1282, 1292, 1300, 1301], "primarili": 1, "intend": [1, 141, 142, 143, 144, 682, 958, 1255], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 39, 40, 45, 48, 58, 61, 65, 66, 67, 68, 70, 72, 73, 81, 86, 87, 88, 89, 90, 91, 108, 110, 111, 113, 115, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 158, 159, 161, 167, 168, 170, 176, 177, 178, 181, 188, 189, 190, 191, 192, 193, 201, 203, 205, 206, 207, 209, 212, 213, 215, 218, 220, 222, 223, 225, 226, 227, 236, 237, 238, 239, 240, 242, 243, 247, 250, 251, 252, 258, 259, 260, 261, 262, 266, 267, 269, 270, 271, 272, 275, 276, 277, 278, 280, 288, 302, 305, 311, 313, 315, 317, 318, 327, 328, 351, 356, 357, 363, 367, 368, 383, 389, 390, 397, 399, 403, 407, 410, 412, 417, 421, 422, 424, 425, 428, 436, 439, 441, 444, 445, 446, 447, 452, 453, 467, 470, 471, 487, 502, 519, 527, 532, 534, 542, 543, 544, 547, 564, 567, 569, 571, 572, 581, 589, 592, 594, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 617, 619, 620, 625, 627, 628, 630, 632, 633, 636, 637, 638, 640, 641, 643, 647, 648, 656, 657, 658, 662, 664, 666, 669, 670, 671, 672, 673, 674, 675, 679, 682, 701, 702, 704, 705, 706, 707, 709, 713, 717, 718, 719, 720, 721, 722, 724, 725, 728, 729, 731, 732, 733, 734, 735, 736, 740, 742, 746, 747, 749, 750, 753, 754, 755, 757, 759, 760, 762, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 785, 788, 789, 800, 801, 804, 807, 810, 811, 814, 816, 817, 821, 822, 823, 824, 827, 828, 829, 831, 832, 833, 837, 839, 840, 846, 855, 857, 858, 862, 865, 866, 871, 873, 874, 876, 877, 879, 880, 881, 889, 901, 906, 910, 911, 913, 946, 950, 951, 958, 960, 966, 967, 980, 981, 982, 985, 986, 993, 995, 999, 1006, 1009, 1012, 1017, 1021, 1022, 1024, 1025, 1028, 1036, 1039, 1042, 1045, 1046, 1047, 1052, 1053, 1057, 1060, 1063, 1066, 1067, 1068, 1074, 1077, 1084, 1086, 1088, 1090, 1103, 1120, 1133, 1140, 1141, 1159, 1161, 1163, 1166, 1168, 1169, 1171, 1183, 1184, 1187, 1189, 1192, 1193, 1199, 1203, 1205, 1206, 1209, 1210, 1213, 1214, 1216, 1220, 1221, 1229, 1230, 1231, 1235, 1237, 1246, 1247, 1248, 1252, 1255, 1264, 1269, 1271, 1272, 1273, 1274, 1281, 1282, 1292, 1296, 1300, 1301], "librari": [1, 100, 120, 123, 542, 789, 905, 1301], "author": 1, "domain": [1, 641, 1214], "specif": [1, 35, 39, 40, 107, 109, 111, 113, 118, 121, 122, 123, 127, 128, 129, 133, 147, 148, 161, 206, 302, 425, 428, 673, 674, 675, 679, 807, 901, 906, 1025, 1028, 1246, 1247, 1248, 1252, 1292, 1301], "capabl": [1, 40, 302], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 72, 81, 82, 83, 84, 85, 110, 112, 118, 119, 120, 121, 122, 123, 132, 133, 134, 141, 142, 149, 151, 160, 161, 167, 170, 175, 176, 188, 189, 190, 191, 192, 193, 199, 209, 236, 261, 265, 267, 271, 302, 313, 351, 418, 422, 425, 436, 450, 471, 473, 477, 480, 482, 483, 484, 532, 542, 544, 553, 555, 601, 604, 605, 606, 607, 608, 610, 611, 612, 655, 677, 731, 732, 734, 735, 736, 776, 777, 779, 789, 805, 807, 814, 817, 819, 828, 829, 831, 832, 837, 855, 859, 870, 871, 901, 946, 1018, 1022, 1025, 1036, 1050, 1051, 1067, 1071, 1076, 1080, 1081, 1082, 1083, 1133, 1187, 1228, 1250, 1273, 1292, 1301], "mai": [1, 39, 41, 49, 51, 58, 59, 60, 61, 87, 88, 89, 107, 109, 110, 111, 113, 118, 119, 120, 122, 124, 127, 128, 132, 133, 134, 135, 136, 138, 141, 143, 167, 173, 175, 189, 209, 212, 236, 247, 262, 269, 270, 271, 302, 317, 383, 384, 391, 392, 405, 418, 422, 425, 428, 436, 447, 467, 505, 530, 532, 542, 544, 552, 589, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 644, 645, 647, 722, 723, 726, 727, 731, 732, 734, 735, 740, 764, 766, 767, 776, 777, 789, 810, 811, 814, 821, 828, 837, 841, 842, 855, 862, 873, 879, 880, 883, 889, 901, 959, 960, 980, 981, 982, 987, 988, 1001, 1018, 1022, 1025, 1028, 1036, 1044, 1050, 1063, 1106, 1141, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1192, 1217, 1218, 1220, 1248, 1273, 1274, 1292, 1301], "exist": [1, 38, 39, 40, 81, 122, 133, 148, 266, 270, 275, 276, 302, 312, 355, 358, 359, 394, 421, 543, 789, 853, 873, 876, 877, 901, 906, 990, 1021, 1140, 1292], "belong": [1, 189, 302, 828, 901], "core": [1, 302, 1301], "cannot": [1, 97, 118, 119, 123, 124, 126, 129, 130, 152, 212, 239, 240, 278, 288, 302, 356, 447, 519, 544, 615, 636, 664, 685, 753, 789, 863, 880, 889, 901, 950, 1120, 1141, 1183, 1209, 1237, 1273, 1292], "overrid": [1, 40, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 127, 128, 129, 145, 146, 150, 152, 302, 543, 789, 901, 1140, 1292], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 86, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 149, 150, 151, 155, 160, 161, 164, 167, 168, 169, 170, 171, 173, 174, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 192, 193, 195, 197, 201, 203, 204, 206, 208, 209, 213, 215, 217, 218, 219, 220, 222, 223, 225, 227, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 244, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 310, 311, 312, 334, 339, 351, 355, 356, 357, 358, 359, 362, 373, 384, 386, 388, 395, 418, 421, 422, 425, 428, 436, 447, 449, 453, 455, 459, 460, 463, 469, 471, 496, 497, 507, 508, 509, 525, 529, 532, 541, 544, 552, 554, 555, 556, 558, 565, 566, 567, 568, 569, 570, 571, 572, 578, 581, 585, 587, 589, 595, 596, 598, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 620, 627, 628, 683, 684, 685, 687, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 785, 789, 796, 805, 807, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 824, 827, 828, 829, 831, 832, 834, 836, 837, 846, 847, 851, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 870, 871, 872, 873, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 905, 906, 909, 929, 934, 946, 951, 955, 956, 981, 982, 991, 1018, 1021, 1022, 1025, 1028, 1036, 1049, 1053, 1097, 1098, 1099, 1110, 1133, 1150, 1151, 1159, 1164, 1165, 1187, 1188, 1256, 1258, 1259, 1269, 1270, 1271, 1280, 1292, 1297, 1300, 1301], "dt": [1, 81, 123, 129, 236, 302, 601, 736, 789, 798, 855, 901, 906, 1299], "attempt": 1, "do": [1, 40, 58, 59, 60, 61, 81, 87, 88, 109, 110, 113, 118, 132, 141, 142, 143, 144, 167, 175, 189, 190, 192, 193, 205, 209, 227, 236, 256, 266, 269, 302, 383, 502, 542, 581, 601, 668, 669, 670, 762, 765, 780, 789, 810, 811, 814, 819, 828, 829, 831, 832, 837, 841, 842, 851, 855, 863, 901, 906, 980, 1050, 1103, 1241, 1242, 1243, 1282, 1292], "so": [1, 120, 121, 132, 152, 187, 189, 190, 192, 193, 227, 236, 302, 328, 338, 471, 507, 532, 544, 601, 656, 657, 658, 668, 669, 670, 789, 828, 829, 831, 832, 855, 901, 933, 1108, 1229, 1230, 1231, 1241, 1242, 1243], "rais": [1, 20, 21, 25, 39, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 123, 129, 132, 141, 143, 157, 227, 237, 302, 356, 421, 422, 436, 505, 530, 552, 589, 632, 636, 643, 655, 673, 674, 675, 677, 679, 733, 750, 789, 950, 1021, 1022, 1036, 1106, 1131, 1159, 1205, 1209, 1216, 1228, 1246, 1247, 1248, 1250, 1252, 1273, 1282, 1292], "an": [1, 35, 37, 38, 39, 40, 49, 50, 58, 59, 60, 82, 84, 85, 91, 94, 96, 97, 100, 102, 107, 109, 110, 113, 118, 119, 120, 121, 122, 123, 125, 129, 130, 132, 134, 135, 146, 148, 150, 161, 162, 163, 173, 176, 181, 189, 190, 192, 193, 205, 206, 207, 209, 212, 223, 227, 233, 234, 236, 237, 256, 266, 269, 270, 275, 278, 288, 302, 312, 335, 338, 350, 356, 361, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 394, 395, 418, 421, 425, 439, 452, 453, 459, 460, 463, 486, 498, 499, 502, 505, 507, 530, 531, 532, 541, 542, 544, 553, 555, 564, 565, 588, 589, 597, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 632, 636, 641, 643, 644, 673, 674, 675, 677, 679, 690, 696, 704, 710, 714, 731, 732, 734, 735, 737, 739, 742, 746, 747, 748, 749, 750, 762, 764, 765, 768, 771, 776, 777, 779, 780, 785, 789, 807, 808, 809, 811, 814, 819, 821, 824, 828, 829, 831, 832, 837, 842, 851, 855, 863, 873, 876, 878, 880, 889, 901, 905, 906, 930, 933, 945, 950, 955, 964, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 990, 1025, 1039, 1044, 1077, 1089, 1099, 1100, 1103, 1106, 1108, 1131, 1132, 1141, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1184, 1187, 1205, 1209, 1214, 1216, 1217, 1246, 1247, 1248, 1250, 1252, 1273, 1282, 1292, 1300], "attributeerror": 1, "howev": [1, 110, 120, 173, 212, 261, 302, 1044, 1292], "can": [1, 19, 32, 40, 45, 47, 48, 50, 70, 72, 73, 81, 87, 88, 90, 91, 110, 118, 119, 120, 123, 124, 129, 130, 132, 135, 137, 138, 146, 147, 148, 150, 152, 155, 160, 162, 170, 171, 181, 188, 189, 190, 191, 192, 193, 201, 203, 205, 212, 223, 227, 236, 238, 239, 242, 250, 261, 265, 266, 269, 275, 278, 288, 302, 305, 313, 317, 351, 374, 377, 383, 414, 415, 418, 421, 422, 425, 428, 436, 450, 453, 471, 486, 502, 532, 542, 544, 552, 555, 561, 564, 565, 567, 569, 571, 572, 581, 587, 589, 594, 601, 604, 605, 606, 607, 608, 610, 611, 612, 617, 620, 622, 625, 628, 633, 646, 656, 657, 658, 668, 669, 670, 673, 687, 713, 740, 742, 746, 747, 753, 779, 785, 788, 789, 800, 805, 810, 811, 817, 819, 821, 828, 829, 831, 832, 855, 857, 859, 865, 870, 876, 879, 880, 901, 906, 913, 946, 980, 981, 1014, 1015, 1018, 1021, 1022, 1025, 1028, 1036, 1051, 1067, 1103, 1133, 1141, 1146, 1159, 1163, 1165, 1184, 1187, 1189, 1193, 1196, 1199, 1206, 1207, 1208, 1215, 1219, 1229, 1230, 1231, 1241, 1242, 1243, 1246, 1248, 1272, 1273, 1292, 1296, 1300], "other": [1, 25, 40, 41, 45, 70, 88, 118, 119, 120, 123, 132, 141, 142, 143, 144, 170, 172, 175, 178, 182, 208, 209, 218, 219, 237, 239, 242, 243, 270, 273, 275, 276, 300, 302, 310, 314, 316, 327, 328, 366, 388, 442, 443, 453, 457, 462, 464, 471, 476, 489, 496, 520, 521, 522, 523, 539, 548, 551, 560, 562, 575, 576, 580, 596, 628, 686, 694, 696, 703, 705, 707, 713, 715, 716, 717, 725, 729, 731, 736, 755, 757, 760, 768, 771, 773, 789, 801, 811, 817, 824, 836, 837, 846, 847, 857, 858, 873, 876, 877, 878, 901, 906, 912, 965, 984, 1043, 1050, 1075, 1097, 1121, 1122, 1123, 1124, 1165, 1186, 1275, 1283, 1291, 1292], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 65, 67, 72, 81, 86, 89, 91, 118, 119, 120, 122, 124, 126, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 150, 155, 158, 170, 175, 189, 192, 194, 206, 208, 209, 212, 213, 215, 220, 227, 236, 238, 239, 252, 258, 260, 261, 270, 271, 288, 302, 311, 313, 315, 317, 328, 365, 366, 418, 426, 447, 456, 465, 486, 542, 544, 564, 565, 566, 567, 568, 569, 570, 571, 572, 581, 587, 594, 604, 605, 606, 607, 608, 610, 611, 612, 633, 658, 687, 698, 731, 732, 753, 789, 810, 817, 828, 829, 831, 832, 833, 836, 837, 840, 855, 873, 889, 901, 905, 910, 911, 912, 962, 965, 981, 1018, 1050, 1056, 1061, 1077, 1141, 1159, 1163, 1206, 1231, 1268, 1271, 1292, 1300, 1301], "gener": [1, 86, 120, 121, 139, 145, 146, 147, 148, 150, 157, 165, 227, 240, 259, 261, 266, 302, 519, 615, 621, 710, 731, 734, 746, 747, 749, 765, 776, 777, 789, 901, 1120, 1183, 1195, 1269, 1292, 1301], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 305, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 785, 789, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1226, 1227, 1229, 1230, 1231, 1232, 1235, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1292, 1296, 1300, 1301], "register_expr_namespac": [1, 82, 84, 85], "greet": 1, "def": [1, 72, 82, 83, 84, 85, 120, 146, 147, 148, 150, 155, 226, 266, 302, 310, 585, 641, 670, 703, 752, 789, 811, 850, 901, 906, 1214, 1301], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 145, 1300], "self": [1, 66, 67, 68, 70, 82, 83, 84, 85, 87, 88, 162, 163, 175, 195, 197, 198, 199, 211, 213, 215, 217, 218, 220, 224, 225, 227, 229, 230, 232, 233, 234, 240, 248, 249, 251, 252, 254, 259, 266, 268, 271, 272, 273, 277, 278, 279, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 354, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 559, 560, 561, 562, 563, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 785, 789, 804, 805, 806, 807, 809, 810, 811, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 901, 912, 913, 955, 968, 1050, 1054, 1064, 1139, 1140, 1141, 1152, 1156, 1157, 1162, 1165, 1184, 1187, 1189, 1201, 1279, 1283, 1292], "_expr": [1, 83], "hello": [1, 25, 66, 69, 668, 669, 670, 1110, 1241, 1242, 1243], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 65, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 101, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 147, 152, 153, 158, 160, 162, 165, 166, 169, 171, 173, 174, 175, 176, 177, 180, 181, 183, 184, 187, 188, 189, 191, 192, 195, 197, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 221, 222, 223, 225, 226, 227, 231, 236, 237, 238, 239, 240, 253, 254, 255, 261, 262, 265, 266, 267, 271, 275, 276, 283, 285, 287, 288, 291, 296, 302, 313, 315, 319, 320, 321, 322, 323, 324, 327, 328, 332, 333, 334, 336, 338, 339, 350, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 384, 385, 391, 393, 396, 397, 398, 400, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 449, 460, 461, 463, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 490, 491, 494, 495, 497, 503, 505, 507, 508, 509, 511, 512, 519, 529, 530, 531, 538, 542, 543, 544, 553, 555, 556, 561, 585, 589, 591, 595, 596, 597, 599, 600, 615, 616, 622, 623, 624, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 652, 653, 654, 659, 660, 662, 663, 664, 665, 677, 682, 689, 691, 692, 693, 695, 696, 698, 699, 700, 703, 704, 708, 710, 711, 712, 713, 714, 719, 721, 730, 731, 732, 733, 734, 735, 736, 739, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 762, 765, 768, 771, 774, 775, 776, 777, 779, 780, 789, 805, 808, 810, 811, 813, 814, 818, 819, 821, 826, 828, 829, 831, 832, 833, 836, 839, 840, 842, 850, 851, 853, 855, 859, 863, 868, 869, 870, 871, 876, 877, 884, 886, 888, 892, 897, 901, 905, 910, 911, 912, 920, 921, 923, 924, 925, 926, 927, 928, 929, 931, 933, 934, 945, 947, 949, 950, 951, 954, 957, 960, 964, 981, 982, 987, 989, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1043, 1044, 1049, 1050, 1055, 1058, 1060, 1062, 1063, 1069, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1104, 1106, 1108, 1109, 1110, 1112, 1113, 1120, 1130, 1131, 1132, 1139, 1140, 1141, 1146, 1153, 1159, 1165, 1166, 1167, 1168, 1169, 1183, 1185, 1186, 1196, 1204, 1205, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1232, 1233, 1235, 1236, 1237, 1238, 1250, 1255, 1263, 1265, 1268, 1274, 1276, 1278, 1279, 1280, 1283, 1292, 1300, 1301], "lit": [1, 312, 355, 471, 486, 564, 643, 722, 726, 740, 762, 765, 780, 789, 1053, 1292], "alia": [1, 17, 80, 81, 83, 85, 189, 211, 227, 236, 268, 275, 278, 302, 310, 314, 355, 356, 357, 358, 359, 360, 373, 374, 375, 376, 377, 384, 387, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 409, 411, 413, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 433, 435, 436, 437, 438, 439, 442, 443, 455, 457, 462, 464, 469, 471, 475, 479, 486, 489, 491, 515, 527, 534, 539, 544, 548, 549, 550, 551, 553, 557, 560, 562, 564, 575, 576, 580, 582, 586, 589, 592, 594, 614, 616, 632, 633, 635, 636, 638, 640, 641, 643, 647, 648, 658, 659, 662, 663, 664, 665, 666, 671, 672, 683, 684, 685, 686, 694, 695, 696, 702, 703, 710, 711, 712, 715, 716, 717, 731, 734, 736, 737, 740, 741, 746, 749, 752, 753, 764, 771, 776, 779, 789, 828, 834, 840, 855, 872, 876, 880, 901, 981, 987, 988, 991, 994, 996, 997, 998, 1004, 1005, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1092, 1159, 1164, 1213, 1214, 1237, 1238, 1292], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 66, 69, 633, 658, 668, 669, 670, 680, 1110, 1206, 1231, 1241, 1242, 1243, 1253], "select": [1, 13, 38, 65, 66, 67, 81, 82, 83, 84, 117, 118, 119, 120, 121, 122, 124, 126, 130, 132, 138, 147, 159, 204, 205, 209, 212, 223, 226, 237, 243, 249, 263, 268, 271, 278, 302, 309, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 341, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 369, 370, 371, 372, 383, 385, 387, 388, 389, 390, 392, 394, 395, 405, 414, 415, 418, 421, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 444, 445, 446, 447, 448, 449, 450, 454, 456, 458, 461, 465, 467, 468, 469, 470, 472, 473, 477, 485, 486, 487, 488, 490, 502, 503, 532, 535, 536, 537, 538, 542, 544, 545, 546, 547, 559, 561, 563, 564, 566, 568, 570, 573, 574, 578, 579, 580, 583, 584, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 603, 609, 613, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 639, 640, 641, 642, 643, 673, 683, 685, 688, 692, 693, 695, 697, 698, 699, 700, 701, 704, 706, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 724, 735, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 754, 756, 758, 759, 761, 764, 765, 769, 770, 771, 772, 774, 778, 785, 789, 804, 812, 837, 850, 858, 859, 864, 872, 878, 880, 901, 906, 1021, 1057, 1103, 1184, 1187, 1200, 1219, 1246, 1264, 1292, 1300], "shapecolumn_0": [1, 212, 266, 302], "register_dataframe_namespac": [1, 83, 84, 85], "split": [1, 40, 82, 207, 302, 664, 665, 1237, 1238], "splitfram": [1, 82], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 66, 82, 83, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 132, 146, 148, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 305, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 785, 789, 828, 855, 859, 872, 873, 886, 889, 897, 901, 906, 1021, 1219, 1237, 1238, 1270, 1292, 1301], "_df": [1, 82], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 65, 69, 73, 81, 82, 84, 87, 88, 107, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 146, 147, 148, 150, 164, 168, 171, 173, 174, 178, 186, 188, 189, 197, 206, 222, 225, 237, 238, 239, 242, 250, 257, 258, 266, 267, 268, 269, 275, 280, 281, 302, 311, 339, 350, 351, 352, 384, 449, 455, 460, 468, 476, 540, 542, 544, 553, 554, 581, 589, 595, 597, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 627, 628, 641, 663, 683, 685, 690, 694, 713, 716, 732, 735, 737, 745, 747, 750, 753, 769, 771, 777, 789, 812, 818, 820, 824, 827, 828, 857, 865, 871, 872, 876, 878, 881, 882, 901, 906, 934, 945, 946, 947, 963, 981, 1044, 1049, 1054, 1057, 1059, 1063, 1064, 1075, 1159, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1185, 1206, 1214, 1231, 1236, 1264, 1272, 1275, 1292, 1301], "with_row_index": [1, 277, 302, 604, 605, 607, 610, 611, 612, 789, 879, 901, 1184, 1292], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 66, 67, 68, 69, 70, 73, 82, 83, 84, 85, 89, 95, 107, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 160, 161, 164, 168, 169, 170, 174, 178, 179, 180, 184, 185, 187, 188, 191, 204, 205, 206, 208, 209, 212, 214, 216, 218, 219, 221, 225, 227, 231, 237, 238, 239, 241, 242, 243, 250, 253, 257, 259, 261, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 287, 302, 312, 317, 351, 355, 356, 358, 359, 384, 425, 428, 447, 453, 471, 480, 482, 483, 484, 486, 532, 541, 544, 552, 554, 557, 581, 587, 589, 598, 628, 641, 642, 656, 657, 683, 685, 687, 704, 705, 706, 707, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 724, 725, 728, 729, 738, 739, 744, 745, 748, 754, 755, 756, 757, 758, 759, 760, 761, 763, 766, 767, 768, 770, 771, 772, 773, 774, 778, 779, 785, 789, 805, 807, 812, 816, 817, 820, 824, 827, 830, 836, 837, 846, 847, 853, 856, 857, 858, 859, 865, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 888, 901, 905, 906, 909, 946, 964, 981, 1025, 1028, 1055, 1133, 1159, 1164, 1213, 1214, 1215, 1229, 1230, 1256, 1259, 1269, 1270, 1274, 1292, 1300, 1301], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 67, 68, 82, 83, 84, 85, 116, 118, 119, 123, 132, 158, 162, 175, 183, 189, 195, 206, 207, 211, 212, 238, 239, 240, 246, 247, 251, 254, 255, 258, 260, 272, 285, 287, 296, 302, 318, 346, 351, 360, 383, 387, 392, 394, 401, 427, 439, 450, 453, 461, 466, 491, 500, 506, 508, 519, 520, 524, 527, 529, 532, 534, 582, 585, 595, 610, 612, 615, 618, 619, 625, 630, 647, 648, 656, 664, 665, 668, 669, 675, 689, 691, 695, 696, 701, 703, 718, 720, 731, 732, 733, 734, 735, 736, 742, 744, 762, 765, 766, 767, 770, 774, 778, 780, 789, 808, 810, 826, 828, 833, 840, 861, 862, 866, 868, 869, 874, 886, 888, 897, 901, 906, 941, 946, 954, 964, 980, 983, 988, 990, 997, 1027, 1039, 1050, 1051, 1058, 1062, 1092, 1101, 1107, 1109, 1120, 1121, 1125, 1130, 1133, 1155, 1178, 1180, 1183, 1191, 1192, 1199, 1203, 1220, 1221, 1229, 1230, 1237, 1238, 1248, 1263, 1265, 1271, 1276, 1281, 1292, 1300, 1301], "filter": [1, 82, 122, 132, 133, 138, 170, 201, 202, 203, 208, 227, 288, 302, 552, 554, 638, 666, 702, 740, 779, 789, 817, 821, 834, 836, 889, 901, 906, 1187, 1292], "col": [1, 17, 37, 40, 58, 81, 82, 83, 84, 111, 113, 132, 146, 148, 178, 188, 189, 202, 204, 210, 212, 223, 226, 227, 236, 237, 242, 250, 268, 269, 275, 280, 302, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369, 370, 371, 373, 374, 375, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 467, 469, 470, 471, 472, 475, 476, 479, 480, 482, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 566, 568, 570, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 709, 713, 714, 715, 716, 717, 719, 721, 724, 736, 739, 740, 741, 742, 743, 744, 745, 748, 754, 756, 758, 759, 761, 763, 764, 770, 772, 774, 778, 779, 789, 809, 824, 827, 828, 834, 839, 850, 855, 857, 865, 872, 876, 878, 881, 901, 906, 1018, 1021, 1103, 1166, 1184, 1187, 1219, 1246, 1292, 1301], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 39, 40, 45, 49, 61, 62, 65, 70, 81, 82, 83, 85, 89, 91, 108, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 140, 145, 146, 147, 148, 150, 153, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 171, 172, 176, 177, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 233, 234, 238, 239, 240, 241, 242, 247, 249, 250, 251, 252, 253, 255, 259, 260, 261, 262, 263, 266, 269, 271, 272, 275, 277, 278, 280, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 302, 309, 311, 312, 314, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 332, 333, 335, 338, 348, 351, 353, 361, 364, 365, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 396, 397, 399, 402, 403, 406, 407, 409, 410, 411, 412, 416, 417, 421, 422, 423, 424, 426, 431, 432, 434, 435, 436, 439, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 456, 457, 459, 461, 462, 464, 465, 467, 470, 473, 474, 477, 478, 480, 481, 482, 483, 484, 486, 487, 489, 494, 495, 498, 499, 502, 505, 506, 507, 512, 514, 515, 527, 530, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 553, 558, 559, 560, 562, 564, 573, 574, 575, 576, 577, 579, 580, 582, 585, 586, 587, 589, 590, 591, 592, 596, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 624, 625, 629, 630, 634, 635, 640, 641, 643, 645, 649, 650, 651, 652, 655, 660, 661, 667, 673, 675, 686, 687, 688, 690, 691, 692, 693, 694, 696, 701, 702, 704, 708, 710, 711, 712, 713, 714, 715, 716, 718, 720, 722, 726, 728, 729, 731, 733, 737, 740, 746, 747, 749, 751, 753, 756, 757, 758, 763, 764, 769, 775, 776, 777, 778, 779, 780, 785, 789, 804, 807, 808, 809, 813, 814, 816, 818, 822, 823, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 841, 842, 845, 849, 851, 852, 856, 857, 862, 863, 865, 866, 869, 874, 876, 878, 879, 880, 881, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 901, 906, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 927, 933, 943, 946, 948, 955, 958, 959, 961, 962, 964, 966, 967, 969, 970, 971, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 993, 995, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1016, 1017, 1021, 1022, 1023, 1024, 1031, 1032, 1034, 1035, 1036, 1039, 1042, 1045, 1046, 1047, 1052, 1056, 1058, 1061, 1063, 1066, 1068, 1071, 1072, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1086, 1088, 1089, 1090, 1095, 1096, 1099, 1100, 1103, 1106, 1107, 1108, 1113, 1115, 1128, 1131, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1155, 1159, 1160, 1161, 1165, 1169, 1170, 1171, 1173, 1174, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1192, 1196, 1197, 1198, 1199, 1202, 1203, 1207, 1208, 1213, 1214, 1216, 1218, 1219, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1246, 1248, 1264, 1265, 1266, 1267, 1269, 1272, 1273, 1274, 1275, 1279, 1281, 1282, 1292, 1301], "drop": [1, 110, 169, 170, 212, 267, 275, 302, 387, 389, 390, 500, 501, 589, 789, 817, 871, 876, 901, 983, 985, 986, 1101, 1102, 1159, 1292], "aaa": [1, 40, 302, 632, 643, 683, 685, 1205, 1216], "bbb": [1, 40, 302, 683, 685, 906], "ccc": [1, 40, 302, 683, 685], "ddd": [1, 40, 302, 683, 685], "eee": [1, 40, 302, 906], "fff": 1, "schema": [1, 19, 33, 36, 38, 39, 65, 82, 83, 84, 89, 102, 103, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 130, 131, 132, 136, 137, 146, 148, 158, 162, 163, 171, 173, 207, 212, 219, 223, 261, 302, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 397, 531, 532, 552, 566, 568, 570, 644, 645, 703, 771, 789, 808, 809, 818, 841, 842, 847, 859, 883, 889, 901, 906, 968, 1217, 1218, 1292], "txt": [1, 17, 132, 632, 643, 1216], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 65, 72, 73, 80, 90, 91, 110, 114, 118, 119, 120, 121, 132, 141, 142, 143, 144, 145, 146, 147, 150, 154, 160, 161, 171, 173, 181, 187, 188, 189, 191, 209, 225, 227, 236, 239, 241, 242, 243, 250, 260, 265, 266, 269, 271, 275, 276, 279, 280, 302, 310, 334, 339, 356, 357, 358, 363, 418, 422, 425, 428, 436, 447, 449, 455, 459, 471, 509, 555, 556, 581, 585, 596, 601, 604, 605, 606, 607, 608, 610, 611, 612, 628, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 684, 703, 705, 707, 713, 715, 716, 717, 725, 729, 731, 732, 734, 735, 741, 755, 757, 760, 768, 771, 773, 776, 777, 779, 789, 805, 807, 818, 819, 827, 828, 830, 837, 855, 856, 857, 858, 859, 865, 870, 876, 877, 881, 901, 906, 934, 950, 951, 952, 957, 958, 1018, 1022, 1025, 1028, 1036, 1049, 1067, 1088, 1110, 1165, 1204, 1205, 1206, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1258, 1271, 1292, 1301], "register_lazyframe_namespac": [1, 82, 83, 85], "dtypeoper": [1, 84], "ldf": [1, 84, 881, 882, 885, 887, 890, 891, 892, 893, 894, 895, 896], "_ldf": [1, 84], "upcast_integer_typ": [1, 84], "with_column": [1, 17, 84, 189, 226, 236, 269, 276, 302, 310, 312, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 344, 345, 346, 347, 351, 356, 357, 361, 366, 373, 374, 375, 376, 377, 384, 387, 391, 393, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 411, 413, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 437, 438, 440, 442, 443, 451, 452, 457, 462, 464, 465, 470, 471, 475, 476, 479, 480, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 539, 541, 544, 560, 562, 564, 565, 567, 569, 571, 572, 575, 576, 577, 581, 582, 585, 586, 587, 589, 592, 596, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 614, 618, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 676, 677, 678, 680, 681, 682, 684, 686, 687, 694, 696, 703, 705, 707, 715, 717, 722, 723, 725, 732, 737, 747, 752, 755, 757, 760, 769, 773, 777, 779, 785, 789, 828, 834, 850, 855, 877, 901, 906, 981, 1021, 1159, 1292], "tp": [1, 84], "cast": [1, 39, 83, 84, 107, 109, 110, 113, 141, 142, 143, 144, 181, 189, 190, 192, 193, 226, 236, 275, 302, 316, 376, 377, 392, 425, 428, 439, 580, 585, 594, 601, 644, 645, 646, 682, 688, 694, 717, 769, 789, 828, 829, 831, 832, 850, 855, 876, 901, 905, 906, 958, 960, 974, 975, 988, 1025, 1028, 1039, 1163, 1217, 1218, 1219, 1255, 1262, 1270, 1275, 1292], "int64": [1, 2, 39, 40, 43, 73, 83, 84, 89, 118, 171, 181, 189, 190, 192, 193, 210, 226, 236, 241, 256, 262, 302, 332, 333, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 376, 377, 429, 430, 431, 432, 433, 434, 435, 439, 447, 542, 544, 566, 568, 570, 585, 594, 601, 644, 677, 688, 694, 710, 738, 746, 747, 750, 765, 771, 789, 809, 818, 828, 829, 831, 832, 834, 839, 850, 855, 856, 859, 901, 927, 928, 930, 931, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 948, 974, 975, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041, 1043, 1141, 1163, 1186, 1250, 1262, 1273, 1274, 1275, 1292], "int8": [1, 73, 84, 181, 302, 350, 351, 376, 377, 398, 402, 411, 413, 420, 423, 437, 438, 531, 688, 762, 765, 780, 789, 945, 946, 974, 975, 983, 994, 998, 1011, 1013, 1020, 1023, 1037, 1038, 1132, 1167, 1262, 1279, 1292], "int16": [1, 84, 376, 377, 419, 688, 789, 906, 974, 975, 1019, 1262, 1271, 1292], "int32": [1, 84, 89, 107, 110, 123, 147, 148, 189, 190, 192, 193, 207, 236, 302, 337, 338, 340, 361, 393, 405, 406, 408, 409, 416, 440, 599, 601, 694, 765, 789, 828, 829, 831, 832, 855, 901, 906, 929, 932, 933, 935, 989, 1001, 1005, 1007, 1008, 1016, 1040, 1139, 1168, 1275, 1292], "b": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 73, 84, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 123, 157, 159, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 183, 185, 186, 187, 188, 189, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 210, 213, 215, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 237, 238, 239, 240, 241, 242, 246, 249, 250, 251, 252, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 302, 310, 312, 313, 315, 316, 327, 329, 334, 339, 354, 355, 356, 357, 358, 359, 361, 372, 384, 388, 425, 428, 447, 449, 451, 452, 453, 455, 458, 465, 468, 470, 471, 473, 477, 480, 482, 483, 484, 486, 490, 496, 502, 509, 520, 521, 522, 523, 541, 542, 544, 549, 561, 564, 565, 566, 567, 568, 569, 570, 578, 579, 581, 585, 587, 589, 592, 596, 598, 600, 620, 626, 628, 636, 639, 643, 644, 656, 657, 684, 687, 698, 702, 704, 705, 706, 707, 709, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 766, 767, 770, 771, 772, 773, 774, 778, 789, 804, 805, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 836, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 909, 912, 934, 949, 950, 951, 952, 953, 957, 959, 960, 981, 984, 1025, 1028, 1042, 1043, 1044, 1050, 1053, 1067, 1075, 1088, 1097, 1121, 1122, 1123, 1124, 1159, 1164, 1209, 1212, 1216, 1217, 1229, 1230, 1256, 1258, 1259, 1261, 1274, 1278, 1292, 1300], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 123, 132, 140, 150, 157, 159, 160, 161, 162, 163, 166, 170, 174, 175, 176, 177, 181, 183, 184, 186, 187, 188, 189, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 232, 236, 238, 239, 245, 246, 250, 253, 254, 256, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 280, 281, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 305, 309, 310, 311, 312, 314, 316, 329, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 353, 354, 360, 361, 364, 365, 366, 372, 373, 374, 375, 376, 377, 383, 385, 388, 394, 397, 398, 408, 419, 420, 421, 422, 423, 425, 428, 430, 433, 435, 436, 438, 442, 443, 448, 449, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 483, 484, 486, 489, 490, 491, 499, 500, 501, 502, 503, 505, 506, 508, 517, 519, 520, 521, 522, 523, 524, 525, 529, 531, 536, 539, 541, 542, 544, 560, 562, 564, 565, 567, 569, 571, 572, 575, 576, 577, 580, 581, 583, 584, 585, 586, 587, 590, 592, 596, 597, 598, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 622, 626, 627, 628, 629, 632, 635, 641, 643, 647, 648, 653, 654, 656, 657, 662, 663, 664, 665, 671, 672, 673, 677, 682, 683, 685, 686, 687, 689, 694, 695, 696, 702, 703, 705, 707, 709, 711, 712, 713, 714, 715, 717, 718, 720, 722, 723, 724, 725, 731, 732, 734, 735, 737, 739, 740, 744, 746, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 785, 789, 804, 805, 807, 808, 809, 810, 811, 813, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 855, 861, 863, 864, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 912, 915, 922, 929, 931, 932, 933, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 954, 962, 963, 965, 980, 982, 984, 993, 998, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1025, 1028, 1030, 1033, 1035, 1036, 1037, 1038, 1043, 1050, 1052, 1053, 1057, 1058, 1062, 1063, 1066, 1067, 1069, 1075, 1080, 1081, 1082, 1083, 1087, 1100, 1101, 1102, 1103, 1104, 1109, 1114, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1130, 1132, 1147, 1150, 1151, 1155, 1156, 1157, 1161, 1165, 1166, 1169, 1174, 1176, 1177, 1178, 1179, 1180, 1183, 1185, 1191, 1196, 1199, 1200, 1201, 1205, 1208, 1214, 1216, 1220, 1221, 1226, 1227, 1235, 1237, 1238, 1244, 1245, 1246, 1250, 1255, 1256, 1259, 1261, 1263, 1271, 1275, 1276, 1283, 1292, 1296, 1301], "c": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 82, 84, 89, 108, 110, 112, 114, 123, 132, 146, 157, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 178, 181, 185, 186, 187, 188, 189, 195, 197, 199, 207, 208, 210, 213, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 229, 231, 234, 235, 237, 240, 241, 242, 249, 250, 251, 252, 254, 256, 259, 260, 261, 262, 263, 265, 269, 270, 272, 273, 275, 280, 284, 285, 286, 289, 290, 292, 295, 296, 302, 310, 312, 313, 315, 317, 334, 354, 384, 453, 471, 486, 496, 509, 541, 544, 564, 565, 579, 581, 585, 589, 620, 664, 673, 698, 705, 707, 709, 713, 715, 717, 718, 719, 720, 722, 723, 725, 739, 740, 741, 744, 745, 748, 749, 752, 754, 755, 756, 757, 758, 759, 760, 761, 770, 772, 773, 774, 778, 785, 789, 805, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 824, 827, 828, 836, 839, 846, 849, 851, 853, 854, 856, 857, 863, 864, 865, 870, 873, 876, 878, 881, 885, 886, 887, 890, 891, 893, 896, 897, 901, 905, 906, 959, 981, 1067, 1088, 1097, 1159, 1237, 1246, 1259, 1278, 1292], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 68, 70, 81, 82, 84, 85, 89, 107, 110, 111, 112, 113, 114, 116, 118, 119, 132, 140, 141, 143, 148, 161, 162, 163, 167, 174, 175, 176, 177, 181, 183, 184, 186, 187, 188, 189, 195, 196, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 222, 223, 225, 227, 228, 229, 232, 236, 239, 245, 246, 250, 253, 254, 256, 257, 258, 259, 261, 264, 266, 269, 270, 271, 274, 275, 277, 278, 280, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 302, 305, 310, 311, 314, 330, 331, 336, 337, 338, 340, 342, 346, 351, 353, 360, 361, 365, 366, 383, 384, 385, 387, 388, 393, 394, 395, 396, 397, 402, 406, 408, 409, 411, 416, 421, 423, 425, 426, 428, 429, 435, 439, 443, 446, 447, 450, 452, 456, 457, 461, 462, 464, 466, 468, 470, 471, 475, 479, 480, 482, 483, 484, 486, 489, 491, 499, 502, 503, 505, 506, 508, 511, 514, 515, 519, 520, 521, 522, 523, 524, 528, 529, 534, 560, 562, 564, 576, 580, 581, 582, 583, 584, 585, 589, 590, 592, 596, 597, 598, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 616, 622, 628, 635, 643, 646, 647, 648, 677, 686, 689, 695, 696, 709, 714, 715, 716, 718, 720, 722, 723, 724, 725, 731, 736, 737, 738, 739, 740, 744, 746, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 770, 772, 773, 774, 778, 785, 789, 807, 808, 809, 810, 811, 814, 819, 820, 821, 822, 823, 825, 826, 827, 828, 833, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 855, 861, 863, 864, 865, 866, 867, 868, 873, 875, 876, 879, 880, 881, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 912, 915, 919, 922, 925, 926, 929, 931, 932, 933, 935, 937, 941, 946, 947, 948, 954, 963, 965, 972, 980, 981, 982, 983, 984, 989, 990, 991, 992, 993, 994, 1007, 1021, 1023, 1025, 1026, 1028, 1029, 1035, 1037, 1038, 1039, 1043, 1047, 1050, 1051, 1062, 1063, 1066, 1067, 1073, 1079, 1100, 1103, 1104, 1109, 1112, 1120, 1121, 1122, 1123, 1124, 1125, 1129, 1130, 1135, 1139, 1147, 1155, 1156, 1157, 1159, 1160, 1161, 1165, 1166, 1169, 1171, 1172, 1173, 1175, 1176, 1179, 1183, 1185, 1196, 1199, 1202, 1208, 1216, 1219, 1220, 1250, 1263, 1276, 1279, 1283, 1292, 1301], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 70, 72, 82, 84, 89, 90, 91, 107, 110, 111, 112, 113, 123, 140, 161, 164, 168, 169, 170, 171, 172, 174, 175, 178, 183, 184, 185, 186, 187, 189, 195, 197, 199, 200, 202, 204, 205, 206, 208, 212, 213, 214, 215, 216, 217, 218, 220, 221, 224, 227, 228, 229, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 246, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 266, 268, 269, 271, 272, 273, 275, 277, 278, 285, 295, 296, 302, 305, 310, 314, 336, 337, 338, 340, 346, 354, 361, 376, 377, 388, 394, 398, 413, 418, 419, 420, 431, 432, 434, 437, 438, 441, 443, 451, 452, 458, 461, 466, 468, 470, 491, 492, 493, 503, 506, 520, 521, 522, 523, 527, 544, 576, 580, 588, 591, 592, 593, 597, 599, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 628, 635, 639, 647, 648, 677, 686, 689, 703, 705, 707, 722, 723, 724, 737, 740, 746, 752, 753, 757, 772, 785, 789, 807, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 828, 833, 835, 836, 838, 840, 842, 846, 849, 851, 853, 855, 856, 857, 859, 861, 863, 864, 865, 868, 872, 875, 876, 879, 880, 886, 896, 897, 901, 906, 929, 931, 932, 933, 935, 941, 963, 969, 971, 974, 975, 984, 1018, 1038, 1043, 1063, 1093, 1094, 1104, 1107, 1121, 1122, 1123, 1124, 1128, 1147, 1158, 1161, 1166, 1168, 1174, 1176, 1178, 1180, 1185, 1208, 1212, 1220, 1250, 1262, 1292, 1300, 1301], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 82, 84, 89, 153, 161, 164, 165, 167, 168, 169, 171, 172, 174, 178, 183, 185, 189, 195, 197, 200, 208, 213, 215, 217, 219, 220, 224, 227, 229, 231, 234, 236, 237, 239, 240, 241, 242, 246, 249, 251, 252, 253, 254, 260, 261, 262, 263, 269, 271, 272, 273, 302, 310, 314, 337, 338, 340, 349, 377, 393, 394, 398, 408, 419, 421, 422, 436, 438, 448, 461, 466, 470, 491, 506, 520, 521, 522, 523, 580, 592, 597, 601, 611, 628, 643, 676, 689, 722, 723, 734, 740, 745, 752, 753, 772, 789, 807, 812, 814, 816, 818, 820, 824, 826, 828, 833, 835, 836, 840, 847, 849, 852, 853, 855, 856, 857, 861, 868, 901, 906, 919, 932, 933, 935, 944, 989, 990, 994, 1001, 1007, 1021, 1022, 1036, 1038, 1048, 1089, 1107, 1121, 1122, 1123, 1124, 1165, 1166, 1179, 1185, 1216, 1249, 1292, 1301], "float32": [1, 15, 37, 58, 84, 161, 181, 260, 261, 302, 750, 807, 901, 906, 1070, 1139, 1292], "lazi": [1, 65, 66, 67, 68, 70, 84, 89, 132, 148, 209, 226, 227, 302, 544, 742, 762, 765, 780, 789, 814, 836, 837, 878, 881, 882, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 901, 906, 1300, 1301], "i16": [1, 84, 398, 419, 438, 620, 789, 906, 1019, 1271, 1292, 1301], "i32": [1, 84, 107, 110, 114, 147, 148, 242, 302, 337, 338, 340, 361, 393, 402, 405, 406, 408, 409, 411, 416, 440, 599, 620, 779, 789, 857, 901, 932, 933, 935, 989, 1001, 1005, 1007, 1008, 1016, 1040, 1139, 1168, 1292, 1301], "f32": [1, 84, 161, 260, 302, 620, 789, 807, 901, 906, 1139, 1292], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 62, 65, 67, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 132, 160, 161, 162, 163, 164, 168, 170, 171, 174, 175, 177, 178, 183, 184, 186, 187, 188, 189, 195, 197, 199, 201, 203, 205, 208, 209, 212, 213, 218, 219, 220, 225, 226, 227, 228, 231, 232, 234, 235, 236, 240, 242, 246, 249, 250, 252, 254, 257, 263, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 280, 281, 284, 285, 286, 288, 289, 292, 295, 296, 302, 310, 312, 316, 327, 332, 333, 335, 336, 341, 343, 344, 345, 346, 347, 349, 352, 354, 360, 366, 374, 375, 376, 377, 384, 387, 388, 401, 427, 429, 430, 431, 432, 433, 434, 435, 447, 449, 450, 452, 453, 454, 455, 457, 458, 460, 461, 463, 466, 468, 469, 470, 471, 475, 476, 479, 480, 482, 483, 484, 486, 488, 491, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 538, 541, 542, 544, 560, 561, 562, 564, 565, 567, 569, 571, 572, 577, 581, 582, 585, 586, 587, 588, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 615, 617, 618, 620, 621, 622, 626, 627, 628, 656, 657, 677, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 699, 702, 710, 713, 715, 717, 722, 723, 724, 725, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 759, 760, 764, 768, 769, 772, 773, 774, 779, 785, 789, 805, 807, 808, 810, 811, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 833, 836, 837, 838, 840, 842, 843, 846, 847, 848, 850, 851, 853, 854, 855, 857, 859, 861, 864, 865, 867, 868, 870, 871, 872, 873, 876, 879, 880, 881, 882, 885, 886, 887, 889, 890, 893, 896, 897, 901, 906, 908, 909, 912, 931, 936, 938, 940, 941, 942, 944, 947, 954, 965, 968, 972, 973, 974, 975, 981, 997, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1050, 1051, 1053, 1054, 1057, 1058, 1062, 1064, 1075, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1114, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1133, 1134, 1141, 1146, 1159, 1164, 1165, 1166, 1168, 1172, 1175, 1179, 1183, 1184, 1187, 1191, 1195, 1196, 1200, 1201, 1250, 1256, 1261, 1263, 1270, 1276, 1277, 1283, 1292, 1300, 1301], "register_series_namespac": [1, 82, 83, 84], "math": [1, 15, 85, 385, 711, 712, 789, 969, 971, 1197, 1266, 1292], "mathshortcut": [1, 85], "": [1, 2, 16, 37, 39, 40, 45, 58, 65, 68, 73, 85, 107, 114, 118, 119, 120, 121, 123, 129, 133, 134, 137, 138, 150, 160, 161, 170, 173, 178, 183, 188, 189, 190, 191, 192, 193, 199, 205, 208, 209, 218, 225, 227, 232, 234, 236, 239, 242, 243, 250, 259, 265, 267, 268, 269, 270, 275, 276, 302, 339, 395, 401, 425, 428, 447, 453, 487, 509, 542, 544, 553, 561, 573, 574, 581, 582, 594, 600, 628, 632, 640, 641, 642, 643, 656, 657, 662, 663, 665, 673, 674, 675, 679, 680, 683, 685, 704, 705, 706, 707, 713, 718, 721, 724, 725, 728, 729, 738, 741, 742, 752, 753, 754, 755, 757, 759, 760, 768, 769, 771, 772, 773, 779, 785, 789, 805, 807, 817, 827, 828, 829, 830, 831, 832, 837, 846, 855, 857, 858, 865, 870, 871, 872, 873, 876, 877, 883, 889, 901, 906, 908, 909, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 994, 996, 997, 1000, 1002, 1003, 1007, 1008, 1010, 1014, 1015, 1019, 1022, 1023, 1025, 1028, 1036, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1117, 1118, 1119, 1120, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1189, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1220, 1221, 1226, 1227, 1229, 1230, 1231, 1232, 1235, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1292, 1296], "_": [1, 81, 85, 227, 259, 262, 302, 339, 509, 633, 641, 647, 648, 658, 663, 664, 959, 1206, 1214, 1220, 1221, 1231, 1237, 1269, 1292], "squar": [1, 85, 288, 487, 629, 789, 889, 1090, 1202, 1292], "cube": [1, 85, 364, 586, 789, 961, 1292], "s2": [1, 72, 90, 91, 143, 144, 181, 302, 946, 963, 984, 1043, 1075, 1089, 1097, 1133, 1147, 1283, 1292], "renam": [1, 110, 118, 119, 153, 158, 179, 182, 188, 190, 191, 192, 193, 198, 233, 242, 243, 255, 275, 276, 280, 282, 283, 302, 312, 317, 378, 379, 380, 381, 382, 459, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 557, 558, 564, 565, 566, 567, 569, 571, 572, 587, 602, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 685, 687, 690, 691, 708, 728, 729, 751, 768, 771, 789, 827, 829, 830, 831, 832, 841, 857, 858, 869, 876, 877, 881, 883, 884, 901, 909, 913, 976, 977, 978, 979, 981, 1072, 1078, 1099, 1113, 1131, 1140, 1159, 1170, 1186, 1188, 1207, 1216, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1259, 1264, 1265, 1270, 1292], "n2": [1, 351], "s3": [1, 39, 122, 133, 134, 137, 138, 302, 946, 1133, 1292], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 65, 70, 71, 78, 81, 82, 84, 85, 89, 140, 146, 148, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 178, 183, 185, 187, 195, 197, 205, 208, 209, 212, 213, 215, 217, 220, 229, 231, 234, 237, 239, 240, 241, 242, 246, 249, 251, 252, 254, 260, 261, 262, 263, 269, 272, 273, 275, 302, 314, 316, 329, 337, 338, 340, 374, 377, 383, 394, 461, 467, 470, 500, 502, 506, 512, 520, 521, 522, 523, 562, 580, 586, 597, 598, 603, 620, 626, 628, 649, 652, 653, 654, 673, 703, 709, 718, 720, 723, 725, 737, 739, 744, 745, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 770, 773, 774, 778, 789, 807, 812, 814, 816, 817, 818, 820, 824, 826, 833, 836, 840, 842, 851, 853, 856, 857, 861, 868, 876, 901, 906, 932, 933, 935, 971, 980, 1001, 1063, 1089, 1101, 1103, 1107, 1113, 1121, 1122, 1123, 1124, 1155, 1166, 1169, 1171, 1174, 1176, 1178, 1180, 1222, 1225, 1226, 1227, 1246, 1292, 1301], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 65, 70, 81, 89, 140, 165, 167, 181, 190, 195, 200, 212, 236, 238, 239, 242, 253, 254, 269, 273, 275, 295, 302, 310, 314, 316, 329, 337, 338, 340, 345, 347, 374, 377, 385, 394, 453, 461, 470, 476, 486, 500, 506, 518, 526, 564, 580, 591, 597, 601, 603, 609, 611, 622, 626, 641, 676, 684, 716, 722, 723, 745, 777, 789, 814, 829, 833, 835, 840, 855, 857, 868, 876, 896, 901, 906, 927, 928, 932, 933, 935, 940, 942, 982, 994, 1005, 1008, 1016, 1022, 1036, 1037, 1075, 1089, 1101, 1107, 1119, 1127, 1166, 1171, 1177, 1179, 1181, 1196, 1214, 1249, 1258, 1272, 1292], "27": [1, 85, 295, 377, 413, 420, 437, 789, 896, 1292, 1301], "16": [1, 40, 54, 75, 83, 140, 152, 167, 182, 189, 236, 275, 302, 374, 377, 470, 543, 562, 586, 601, 677, 722, 736, 737, 740, 789, 814, 828, 855, 863, 876, 901, 906, 1022, 1036, 1140, 1155, 1186, 1197, 1250, 1266, 1292], "64": [1, 48, 50, 53, 56, 74, 77, 83, 85, 139, 157, 371, 562, 586, 789, 1155, 1292], "25": [1, 32, 40, 85, 114, 148, 167, 189, 209, 236, 271, 275, 302, 387, 398, 400, 419, 422, 436, 438, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 696, 731, 732, 734, 735, 736, 742, 753, 776, 777, 789, 814, 828, 837, 844, 855, 874, 876, 901, 906, 982, 983, 996, 1022, 1036, 1042, 1063, 1155, 1159, 1292], "125": [1, 40, 85, 302, 310, 789, 1155, 1292], "inner": [2, 62, 147, 208, 270, 302, 339, 350, 388, 509, 531, 595, 694, 789, 836, 859, 873, 901, 934, 945, 984, 1110, 1132, 1275, 1292], "polarsdatatyp": [2, 62, 118, 119, 132, 145, 146, 147, 148, 150, 158, 161, 212, 302, 317, 361, 447, 540, 542, 543, 544, 596, 644, 645, 708, 738, 750, 751, 752, 753, 762, 765, 780, 785, 789, 807, 901, 906, 913, 955, 1140, 1141, 1165, 1217, 1218, 1292], "pythondatatyp": [2, 62], "width": [2, 31, 40, 118, 119, 132, 302, 305, 531, 901, 1132], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 61, 67, 70, 83, 110, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 158, 160, 162, 167, 173, 176, 177, 179, 183, 185, 187, 194, 195, 196, 198, 199, 204, 206, 207, 209, 211, 212, 213, 215, 220, 222, 223, 233, 234, 237, 240, 245, 246, 247, 249, 251, 252, 254, 255, 260, 263, 265, 269, 272, 274, 277, 278, 285, 296, 302, 310, 334, 338, 346, 348, 351, 353, 354, 360, 383, 387, 444, 445, 446, 450, 451, 452, 458, 460, 461, 463, 465, 466, 467, 491, 497, 500, 505, 506, 507, 508, 519, 524, 525, 527, 529, 530, 531, 532, 534, 580, 582, 585, 586, 589, 592, 595, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 621, 626, 630, 640, 644, 645, 650, 653, 654, 655, 656, 660, 662, 664, 665, 676, 677, 682, 689, 690, 691, 695, 701, 703, 710, 718, 720, 730, 733, 736, 742, 744, 746, 747, 762, 765, 766, 767, 770, 771, 774, 775, 778, 780, 789, 805, 808, 814, 821, 822, 823, 826, 833, 837, 840, 851, 861, 862, 864, 866, 868, 869, 870, 874, 875, 879, 880, 886, 897, 901, 920, 921, 929, 933, 941, 943, 946, 948, 954, 955, 963, 964, 980, 983, 1044, 1045, 1046, 1047, 1051, 1052, 1053, 1057, 1058, 1061, 1062, 1063, 1089, 1091, 1092, 1098, 1099, 1101, 1106, 1107, 1108, 1109, 1120, 1125, 1126, 1128, 1130, 1131, 1132, 1133, 1135, 1147, 1148, 1150, 1151, 1152, 1154, 1155, 1158, 1159, 1161, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1191, 1192, 1195, 1200, 1203, 1213, 1217, 1218, 1223, 1226, 1227, 1228, 1229, 1233, 1235, 1237, 1238, 1249, 1250, 1255, 1262, 1263, 1264, 1265, 1271, 1276, 1281, 1292, 1300, 1301], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 789, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1292, 1300], "fix": [2, 15, 51, 123, 146, 148, 439, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 736, 789, 1039, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "length": [2, 62, 89, 118, 119, 132, 146, 187, 189, 190, 192, 193, 236, 249, 302, 305, 383, 422, 436, 525, 532, 553, 596, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 626, 647, 648, 650, 652, 653, 654, 660, 662, 682, 762, 765, 766, 767, 780, 789, 828, 829, 831, 832, 851, 855, 864, 901, 905, 963, 980, 990, 1022, 1036, 1126, 1133, 1152, 1165, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1200, 1220, 1221, 1223, 1225, 1226, 1227, 1233, 1235, 1255, 1292], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 58, 59, 60, 61, 62, 65, 66, 67, 68, 70, 73, 81, 82, 83, 84, 85, 87, 88, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 158, 160, 161, 162, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 204, 206, 207, 208, 209, 211, 212, 213, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 285, 287, 288, 294, 296, 302, 310, 312, 313, 314, 315, 316, 317, 327, 334, 335, 338, 339, 346, 347, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 394, 395, 401, 418, 421, 422, 423, 425, 427, 428, 436, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 476, 487, 489, 491, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 555, 556, 560, 562, 565, 566, 567, 568, 569, 570, 575, 576, 580, 581, 582, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 683, 685, 686, 687, 689, 690, 691, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 789, 805, 807, 808, 810, 811, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 840, 841, 842, 846, 847, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 883, 886, 888, 889, 895, 897, 901, 905, 906, 909, 910, 911, 912, 913, 922, 929, 930, 933, 934, 941, 942, 946, 947, 949, 950, 951, 952, 953, 954, 955, 958, 964, 965, 966, 967, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 988, 990, 991, 997, 1018, 1021, 1022, 1023, 1025, 1027, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1061, 1062, 1063, 1066, 1067, 1077, 1085, 1086, 1090, 1092, 1097, 1098, 1099, 1100, 1101, 1103, 1106, 1107, 1108, 1109, 1110, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1140, 1141, 1155, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1195, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1255, 1256, 1259, 1263, 1264, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1280, 1281, 1282, 1283, 1292, 1300], "The": [2, 25, 38, 39, 40, 45, 47, 48, 50, 51, 61, 62, 65, 69, 72, 73, 74, 81, 86, 87, 91, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 127, 128, 130, 132, 136, 137, 138, 141, 142, 143, 144, 152, 167, 169, 170, 171, 174, 175, 178, 187, 188, 189, 192, 194, 200, 206, 209, 212, 219, 225, 236, 237, 238, 239, 242, 243, 261, 268, 271, 275, 276, 278, 279, 280, 288, 302, 312, 354, 355, 356, 357, 384, 389, 390, 398, 413, 418, 419, 422, 425, 436, 437, 447, 450, 453, 458, 465, 501, 505, 530, 542, 543, 544, 555, 581, 589, 592, 595, 596, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 622, 625, 631, 636, 637, 640, 644, 645, 651, 653, 654, 656, 657, 661, 667, 668, 669, 670, 671, 672, 673, 738, 742, 750, 753, 766, 767, 768, 771, 779, 781, 782, 784, 785, 789, 790, 791, 794, 796, 797, 798, 814, 817, 820, 824, 827, 828, 831, 833, 835, 837, 840, 842, 847, 851, 855, 857, 858, 859, 872, 876, 877, 880, 881, 889, 901, 905, 909, 912, 949, 950, 951, 964, 981, 982, 985, 986, 994, 1013, 1018, 1019, 1022, 1025, 1036, 1037, 1050, 1051, 1054, 1061, 1102, 1106, 1140, 1141, 1159, 1161, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1196, 1199, 1204, 1209, 1210, 1217, 1218, 1224, 1226, 1227, 1229, 1230, 1234, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1272, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299, 1301], "datatyp": [2, 37, 43, 58, 62, 79, 107, 109, 110, 111, 113, 115, 123, 125, 127, 128, 131, 136, 150, 171, 181, 241, 302, 361, 447, 620, 694, 738, 750, 789, 801, 818, 856, 859, 901, 913, 955, 958, 982, 1077, 1084, 1086, 1088, 1141, 1193, 1275, 1292], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 62, 63, 65, 69, 72, 79, 81, 89, 91, 109, 110, 112, 113, 118, 119, 120, 121, 123, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 167, 170, 172, 175, 176, 177, 178, 182, 187, 189, 192, 194, 195, 200, 204, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 227, 228, 229, 231, 236, 237, 238, 239, 240, 246, 247, 250, 251, 252, 253, 254, 257, 258, 262, 265, 266, 269, 270, 271, 272, 279, 283, 284, 286, 289, 290, 292, 293, 302, 309, 310, 311, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 352, 353, 354, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 377, 383, 384, 387, 389, 390, 394, 398, 413, 419, 437, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 498, 499, 500, 501, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 524, 526, 527, 528, 529, 532, 533, 534, 536, 538, 539, 542, 543, 544, 545, 546, 547, 559, 560, 561, 562, 563, 573, 574, 575, 576, 579, 581, 582, 585, 586, 589, 590, 592, 595, 596, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 622, 623, 624, 625, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 648, 653, 654, 656, 657, 659, 662, 664, 665, 666, 682, 684, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 709, 713, 715, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 739, 740, 745, 746, 747, 748, 750, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 772, 773, 779, 789, 804, 805, 814, 817, 822, 823, 824, 828, 831, 834, 835, 836, 837, 843, 844, 845, 846, 848, 849, 852, 853, 855, 859, 861, 862, 865, 866, 867, 870, 873, 874, 884, 885, 887, 890, 891, 893, 894, 901, 906, 908, 910, 911, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 947, 948, 950, 951, 952, 953, 958, 962, 965, 966, 967, 969, 970, 971, 980, 981, 982, 983, 985, 986, 990, 994, 1013, 1019, 1037, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1069, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1091, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1120, 1125, 1127, 1128, 1129, 1130, 1134, 1135, 1140, 1141, 1142, 1143, 1145, 1146, 1148, 1150, 1151, 1152, 1154, 1155, 1158, 1159, 1160, 1161, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1186, 1187, 1188, 1191, 1192, 1196, 1197, 1198, 1199, 1201, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1226, 1227, 1229, 1230, 1232, 1235, 1237, 1238, 1239, 1255, 1258, 1262, 1263, 1264, 1265, 1266, 1267, 1273, 1274, 1275, 1278, 1280, 1282, 1283, 1292, 1301], "within": [2, 62, 141, 142, 143, 144, 188, 189, 190, 191, 192, 193, 194, 209, 236, 271, 302, 465, 592, 628, 789, 828, 829, 831, 832, 837, 855, 901, 1061, 1292, 1300], "each": [2, 37, 40, 49, 58, 62, 81, 119, 120, 136, 141, 142, 143, 144, 146, 166, 178, 187, 188, 189, 190, 191, 192, 193, 207, 209, 212, 225, 236, 238, 240, 268, 270, 271, 279, 280, 283, 285, 287, 288, 296, 302, 327, 384, 422, 436, 453, 474, 475, 478, 479, 508, 511, 512, 519, 529, 537, 544, 589, 592, 599, 600, 606, 608, 610, 612, 615, 621, 628, 641, 647, 648, 649, 652, 662, 664, 665, 710, 713, 717, 746, 747, 771, 779, 789, 810, 813, 824, 828, 829, 831, 832, 837, 851, 855, 872, 873, 881, 883, 884, 886, 888, 889, 897, 901, 922, 963, 981, 1022, 1036, 1072, 1073, 1078, 1079, 1109, 1112, 1113, 1120, 1130, 1159, 1161, 1168, 1169, 1183, 1195, 1214, 1220, 1221, 1222, 1225, 1235, 1237, 1238, 1261, 1292, 1301], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 785, 789, 801, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 905, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1189, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1226, 1227, 1229, 1230, 1231, 1232, 1235, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1292, 1300], "dtype": [2, 15, 40, 48, 72, 73, 84, 90, 91, 107, 109, 111, 113, 114, 118, 119, 120, 121, 127, 128, 129, 132, 145, 146, 147, 148, 150, 157, 161, 189, 190, 192, 193, 209, 236, 260, 261, 262, 269, 278, 302, 317, 361, 362, 376, 377, 439, 447, 460, 496, 505, 530, 538, 540, 542, 543, 544, 594, 595, 601, 604, 605, 606, 607, 608, 610, 611, 612, 620, 644, 645, 673, 688, 690, 694, 699, 708, 710, 738, 742, 746, 747, 749, 750, 751, 752, 753, 762, 765, 771, 780, 789, 807, 828, 829, 831, 832, 837, 855, 880, 901, 906, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 955, 956, 957, 959, 964, 974, 975, 982, 983, 1039, 1043, 1044, 1068, 1070, 1074, 1077, 1084, 1086, 1088, 1093, 1094, 1097, 1106, 1132, 1139, 1140, 1141, 1167, 1186, 1193, 1217, 1218, 1246, 1262, 1271, 1273, 1274, 1275, 1279, 1292, 1301], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, 89, 108, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 145, 155, 158, 167, 170, 175, 179, 182, 188, 190, 191, 192, 193, 198, 200, 206, 212, 213, 215, 220, 223, 229, 233, 237, 238, 239, 246, 252, 255, 267, 275, 282, 283, 288, 294, 302, 310, 313, 314, 317, 346, 366, 378, 379, 380, 381, 382, 386, 425, 428, 442, 443, 450, 457, 459, 462, 464, 470, 474, 478, 481, 486, 489, 498, 512, 524, 530, 539, 540, 541, 543, 544, 558, 560, 562, 564, 565, 567, 569, 571, 572, 575, 576, 577, 580, 586, 587, 590, 592, 602, 604, 605, 606, 607, 608, 610, 611, 612, 618, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 669, 670, 671, 672, 676, 682, 686, 687, 690, 691, 696, 698, 703, 718, 753, 763, 781, 782, 784, 785, 789, 790, 791, 794, 795, 796, 797, 798, 801, 811, 814, 815, 817, 829, 830, 831, 832, 835, 841, 852, 861, 869, 871, 876, 883, 884, 889, 895, 901, 912, 913, 941, 958, 965, 976, 977, 978, 979, 982, 1025, 1028, 1050, 1051, 1066, 1072, 1078, 1099, 1113, 1125, 1131, 1140, 1141, 1160, 1161, 1170, 1176, 1186, 1188, 1191, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1249, 1255, 1264, 1265, 1275, 1282, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299], "attribut": [2, 5, 48, 49, 50, 51, 62, 73, 145, 302, 781, 782, 784, 785, 790, 791, 794, 796, 797, 798, 901, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 178, 226, 302, 327, 585, 713, 741, 789, 824, 850, 901, 905, 1141, 1292], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 120, 121, 165, 178, 226, 262, 302, 585, 789, 824, 850, 901, 905, 1274, 1292, 1300], "order": [5, 15, 40, 58, 59, 60, 61, 65, 67, 81, 87, 110, 120, 139, 141, 142, 160, 170, 178, 188, 189, 190, 191, 192, 193, 208, 225, 226, 227, 236, 238, 240, 244, 250, 261, 265, 267, 271, 302, 327, 347, 352, 363, 389, 390, 453, 501, 519, 526, 533, 592, 601, 605, 606, 607, 608, 610, 612, 615, 616, 617, 627, 628, 659, 669, 670, 671, 672, 685, 697, 698, 700, 713, 779, 789, 800, 805, 817, 824, 827, 828, 829, 830, 831, 832, 836, 846, 855, 860, 865, 870, 871, 901, 922, 942, 947, 958, 960, 985, 986, 1054, 1085, 1102, 1120, 1127, 1134, 1161, 1167, 1183, 1185, 1189, 1201, 1232, 1259, 1277, 1278, 1280, 1292, 1301], "categoricalord": [5, 363, 958], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 61, 65, 66, 67, 68, 70, 81, 88, 91, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 162, 166, 167, 170, 176, 177, 187, 189, 190, 192, 193, 194, 200, 204, 208, 209, 210, 212, 213, 215, 218, 220, 223, 224, 227, 236, 237, 240, 246, 247, 249, 250, 252, 257, 259, 262, 266, 267, 268, 269, 270, 271, 283, 287, 302, 313, 315, 316, 317, 329, 330, 331, 338, 339, 351, 354, 366, 372, 373, 374, 377, 384, 389, 390, 397, 418, 421, 422, 436, 443, 444, 445, 446, 447, 450, 451, 452, 458, 465, 467, 470, 471, 480, 482, 483, 484, 490, 492, 493, 501, 507, 509, 511, 519, 520, 521, 522, 523, 525, 532, 540, 542, 543, 544, 552, 555, 556, 558, 563, 576, 577, 578, 579, 582, 589, 592, 593, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 618, 619, 620, 621, 622, 626, 627, 631, 632, 635, 637, 638, 641, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 661, 662, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 679, 682, 683, 684, 685, 694, 705, 706, 707, 708, 710, 715, 717, 719, 721, 725, 731, 732, 733, 734, 735, 736, 738, 739, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 760, 765, 766, 767, 771, 773, 775, 776, 777, 779, 789, 808, 809, 811, 813, 814, 817, 822, 823, 828, 829, 831, 832, 835, 836, 837, 839, 841, 842, 846, 849, 855, 859, 861, 862, 863, 864, 865, 871, 872, 873, 878, 883, 884, 888, 889, 901, 905, 906, 910, 911, 913, 920, 921, 925, 926, 933, 934, 946, 964, 965, 981, 982, 984, 985, 986, 993, 1002, 1003, 1004, 1010, 1021, 1022, 1036, 1042, 1045, 1046, 1047, 1051, 1052, 1053, 1061, 1063, 1065, 1066, 1067, 1077, 1082, 1083, 1086, 1089, 1090, 1091, 1093, 1094, 1097, 1102, 1108, 1110, 1112, 1120, 1121, 1122, 1123, 1124, 1126, 1133, 1140, 1141, 1142, 1143, 1144, 1145, 1154, 1159, 1160, 1161, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1183, 1184, 1187, 1188, 1191, 1192, 1195, 1196, 1199, 1200, 1203, 1204, 1205, 1208, 1210, 1211, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1226, 1227, 1228, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1250, 1252, 1255, 1258, 1270, 1271, 1272, 1273, 1274, 1275, 1281, 1292, 1300], "physic": [5, 72, 91, 118, 119, 209, 302, 363, 694, 789, 806, 836, 837, 901, 958, 959, 1275, 1292], "A": [5, 18, 37, 40, 51, 58, 65, 68, 87, 88, 114, 118, 119, 120, 121, 132, 134, 139, 152, 181, 189, 208, 209, 214, 216, 221, 227, 253, 257, 269, 270, 271, 275, 276, 302, 309, 389, 390, 394, 425, 428, 442, 443, 450, 462, 464, 473, 477, 480, 482, 489, 532, 539, 542, 553, 566, 575, 576, 598, 603, 604, 605, 606, 607, 608, 610, 611, 612, 632, 633, 634, 635, 640, 641, 642, 643, 646, 648, 656, 657, 658, 662, 682, 716, 736, 737, 741, 789, 828, 836, 837, 853, 873, 876, 877, 901, 906, 985, 986, 990, 1025, 1028, 1051, 1171, 1172, 1173, 1175, 1178, 1179, 1180, 1205, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1219, 1221, 1229, 1230, 1231, 1235, 1255, 1292, 1300], "encod": [5, 51, 71, 118, 119, 132, 259, 302, 356, 459, 599, 636, 684, 789, 950, 1168, 1209, 1269, 1292], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 40, 41, 42, 43, 44, 48, 49, 51, 58, 59, 60, 61, 81, 82, 87, 88, 108, 109, 110, 113, 118, 119, 120, 123, 124, 126, 127, 129, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 164, 170, 180, 188, 189, 190, 191, 192, 193, 194, 206, 209, 213, 215, 216, 218, 220, 236, 238, 240, 242, 249, 252, 253, 259, 261, 266, 267, 269, 270, 275, 302, 313, 315, 317, 339, 351, 366, 384, 421, 439, 465, 476, 505, 509, 519, 520, 521, 522, 523, 525, 530, 532, 542, 543, 544, 555, 585, 589, 596, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 621, 625, 626, 631, 644, 645, 651, 656, 657, 661, 662, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 700, 704, 706, 710, 714, 717, 731, 732, 733, 734, 735, 736, 746, 747, 748, 750, 762, 765, 766, 767, 771, 776, 777, 779, 780, 789, 801, 810, 811, 817, 819, 827, 828, 829, 830, 831, 832, 836, 837, 841, 842, 846, 855, 857, 859, 864, 871, 873, 876, 883, 889, 901, 905, 910, 911, 934, 946, 950, 958, 965, 981, 1021, 1039, 1055, 1061, 1075, 1106, 1110, 1120, 1121, 1122, 1123, 1124, 1126, 1131, 1133, 1140, 1141, 1159, 1165, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1183, 1184, 1185, 1188, 1195, 1199, 1200, 1204, 1217, 1218, 1224, 1229, 1230, 1234, 1235, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1252, 1273, 1280, 1292, 1301], "lexic": [5, 363, 906, 958, 960], "appear": [5, 40, 110, 302, 698, 789, 1278, 1292], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 58, 61, 81, 87, 88, 89, 107, 109, 110, 111, 112, 113, 114, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 132, 141, 143, 145, 146, 147, 148, 149, 150, 155, 167, 170, 173, 188, 189, 190, 191, 192, 193, 194, 206, 208, 209, 216, 218, 225, 227, 236, 237, 238, 239, 240, 246, 251, 253, 259, 261, 267, 269, 270, 272, 277, 287, 302, 312, 313, 315, 339, 346, 351, 363, 384, 421, 422, 436, 441, 443, 444, 445, 446, 465, 505, 509, 519, 524, 525, 527, 530, 532, 534, 535, 543, 552, 555, 573, 574, 576, 582, 589, 592, 596, 601, 604, 605, 606, 607, 608, 610, 611, 612, 615, 618, 621, 630, 631, 640, 651, 655, 661, 662, 667, 668, 669, 670, 673, 674, 675, 677, 679, 700, 701, 704, 706, 710, 714, 717, 718, 720, 731, 732, 733, 734, 735, 736, 739, 742, 746, 747, 748, 750, 762, 765, 770, 771, 776, 777, 778, 780, 789, 810, 811, 814, 817, 819, 827, 828, 829, 830, 831, 832, 836, 837, 846, 855, 859, 861, 866, 871, 873, 874, 879, 888, 901, 910, 911, 934, 941, 946, 958, 965, 981, 982, 1021, 1022, 1036, 1042, 1044, 1045, 1046, 1047, 1061, 1106, 1110, 1120, 1125, 1126, 1131, 1133, 1140, 1150, 1151, 1155, 1159, 1161, 1165, 1183, 1191, 1195, 1203, 1204, 1205, 1213, 1216, 1224, 1228, 1234, 1235, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1250, 1252, 1280, 1281, 1292, 1301], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 386, 459, 789, 815, 901], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 502, 641, 1103, 1214], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 81, 87, 88, 89, 90, 91, 107, 108, 109, 110, 112, 113, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 157, 160, 161, 162, 163, 167, 172, 177, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 197, 199, 201, 202, 203, 206, 208, 209, 216, 225, 227, 236, 237, 238, 239, 240, 244, 248, 250, 253, 257, 259, 261, 262, 265, 266, 267, 268, 270, 271, 273, 275, 284, 286, 289, 292, 302, 312, 313, 314, 315, 316, 317, 327, 330, 331, 334, 339, 347, 352, 355, 356, 358, 359, 361, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 404, 421, 423, 436, 441, 442, 443, 444, 445, 446, 462, 464, 467, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 489, 492, 493, 497, 502, 505, 509, 519, 526, 530, 533, 539, 540, 542, 544, 548, 549, 550, 551, 552, 556, 575, 576, 578, 580, 583, 584, 589, 592, 594, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 620, 625, 627, 628, 631, 632, 633, 635, 636, 638, 643, 655, 656, 657, 658, 663, 664, 666, 673, 674, 675, 677, 679, 685, 697, 700, 703, 704, 705, 706, 707, 708, 710, 713, 714, 717, 718, 721, 722, 726, 731, 732, 733, 734, 735, 746, 747, 750, 753, 762, 765, 771, 776, 777, 779, 780, 789, 805, 807, 808, 810, 811, 814, 819, 821, 823, 824, 827, 828, 829, 830, 831, 832, 836, 837, 841, 842, 846, 851, 855, 860, 863, 865, 870, 871, 872, 873, 876, 885, 887, 890, 893, 901, 905, 906, 910, 911, 913, 922, 925, 926, 929, 934, 942, 947, 949, 950, 952, 953, 955, 957, 960, 964, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1000, 1021, 1023, 1036, 1042, 1043, 1045, 1046, 1047, 1054, 1060, 1063, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1093, 1094, 1098, 1099, 1103, 1106, 1110, 1120, 1127, 1131, 1134, 1141, 1153, 1156, 1157, 1159, 1161, 1162, 1163, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1186, 1187, 1188, 1189, 1194, 1199, 1201, 1204, 1205, 1206, 1208, 1209, 1211, 1216, 1228, 1229, 1230, 1231, 1236, 1237, 1239, 1246, 1247, 1248, 1250, 1252, 1269, 1272, 1273, 1274, 1277, 1280, 1282, 1292, 1300], "true": [6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 67, 69, 87, 88, 89, 107, 108, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 155, 157, 160, 161, 162, 163, 167, 172, 177, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 199, 201, 202, 203, 206, 209, 210, 215, 216, 222, 223, 225, 227, 228, 236, 237, 238, 239, 240, 242, 250, 253, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 281, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 311, 312, 313, 314, 315, 316, 317, 328, 330, 331, 334, 339, 347, 351, 355, 356, 358, 359, 361, 373, 374, 375, 376, 377, 384, 392, 395, 398, 401, 404, 414, 415, 418, 419, 421, 422, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 460, 462, 463, 464, 467, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 489, 492, 493, 497, 505, 509, 526, 530, 532, 539, 542, 544, 548, 549, 550, 551, 552, 553, 556, 557, 575, 576, 578, 580, 583, 584, 589, 594, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 620, 625, 627, 628, 631, 632, 633, 635, 636, 638, 643, 644, 646, 655, 656, 657, 663, 664, 666, 673, 674, 675, 677, 679, 683, 685, 697, 700, 703, 704, 705, 706, 707, 708, 710, 713, 714, 718, 731, 733, 734, 740, 746, 753, 762, 765, 771, 776, 779, 780, 789, 805, 807, 808, 809, 810, 811, 814, 819, 821, 823, 827, 828, 829, 830, 831, 832, 836, 837, 839, 841, 842, 846, 851, 855, 857, 859, 863, 865, 870, 871, 872, 873, 876, 882, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 905, 906, 910, 911, 913, 923, 925, 926, 929, 934, 942, 949, 950, 952, 953, 955, 957, 960, 963, 964, 981, 987, 988, 991, 994, 996, 997, 998, 1000, 1004, 1005, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1045, 1046, 1047, 1054, 1060, 1063, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1093, 1094, 1098, 1106, 1110, 1127, 1131, 1141, 1147, 1153, 1156, 1157, 1159, 1163, 1177, 1186, 1199, 1201, 1204, 1205, 1206, 1208, 1209, 1211, 1216, 1217, 1219, 1228, 1229, 1230, 1236, 1237, 1239, 1246, 1247, 1248, 1250, 1252, 1269, 1273, 1274, 1280, 1282, 1283, 1292, 1301], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 302, 613, 676, 789, 901, 1181, 1249, 1292], "temporari": 6, "remov": [6, 9, 92, 118, 119, 132, 157, 168, 213, 215, 220, 252, 259, 302, 317, 422, 436, 447, 541, 565, 651, 661, 667, 668, 669, 670, 671, 672, 738, 789, 816, 901, 958, 981, 1022, 1036, 1159, 1224, 1234, 1240, 1241, 1242, 1243, 1244, 1245, 1248, 1269, 1272, 1282, 1292], "onc": [6, 68, 118, 119, 123, 152, 212, 238, 240, 280, 302, 519, 542, 544, 615, 671, 672, 789, 806, 881, 901, 1120, 1141, 1183, 1244, 1245, 1292], "stabil": [6, 194, 302, 465, 789, 1061, 1292], "current": [6, 7, 8, 10, 11, 35, 67, 114, 120, 121, 123, 130, 137, 162, 163, 208, 209, 302, 400, 444, 445, 446, 532, 582, 789, 808, 809, 836, 837, 901, 906, 964, 968, 987, 996, 1045, 1046, 1047, 1155, 1292, 1300], "consid": [6, 41, 49, 51, 58, 59, 60, 61, 87, 88, 90, 91, 118, 119, 120, 132, 138, 141, 142, 143, 144, 170, 172, 182, 205, 212, 218, 238, 267, 269, 270, 302, 317, 366, 383, 384, 422, 467, 542, 544, 563, 564, 567, 569, 571, 572, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 722, 740, 766, 767, 785, 789, 810, 811, 817, 833, 840, 846, 871, 873, 889, 901, 957, 960, 965, 980, 981, 1022, 1043, 1063, 1077, 1141, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1186, 1187, 1292], "beta": 6, "cfg": [7, 9, 22, 155], "previous": [7, 8], "save": [7, 8, 11, 189, 209, 236, 271, 302, 391, 400, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 785, 789, 801, 828, 837, 855, 901, 996, 1018, 1022, 1036], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 81, 118, 120, 121, 122, 123, 124, 126, 130, 133, 134, 135, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 189, 204, 209, 218, 257, 261, 266, 270, 302, 487, 555, 602, 604, 605, 606, 607, 608, 610, 611, 612, 625, 633, 658, 662, 700, 771, 779, 789, 801, 828, 836, 837, 846, 859, 873, 901, 906, 1086, 1090, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1199, 1206, 1231, 1235, 1270, 1280, 1292], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 65, 66, 67, 73, 81, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 161, 167, 168, 173, 175, 180, 187, 189, 192, 206, 207, 208, 209, 210, 218, 227, 231, 236, 237, 239, 240, 242, 243, 259, 266, 267, 269, 270, 271, 277, 302, 305, 351, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 447, 459, 470, 487, 506, 519, 532, 544, 555, 573, 574, 576, 582, 585, 589, 591, 601, 603, 604, 605, 607, 610, 611, 612, 615, 628, 640, 641, 644, 645, 655, 662, 668, 669, 670, 671, 672, 673, 674, 675, 679, 698, 711, 712, 715, 730, 731, 732, 733, 734, 735, 736, 750, 765, 775, 776, 777, 785, 788, 789, 807, 814, 815, 816, 821, 828, 831, 836, 837, 846, 853, 855, 857, 858, 871, 873, 878, 879, 901, 906, 946, 981, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1050, 1086, 1090, 1107, 1120, 1133, 1150, 1151, 1152, 1155, 1159, 1171, 1183, 1213, 1214, 1217, 1218, 1228, 1235, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1252, 1269, 1283, 1292, 1300, 1301], "json": [7, 8, 10, 11, 43, 44, 127, 128, 134, 136, 302, 386, 459, 555, 558, 644, 645, 646, 684, 789, 801, 815, 859, 901, 905, 1217, 1218, 1219, 1258], "produc": [7, 8, 147, 148, 150, 208, 302, 335, 498, 499, 552, 752, 836, 841, 842, 901, 930, 1099, 1100], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 175, 302, 386, 459, 555, 558, 568, 570, 789, 815, 859, 901, 905, 1050, 1292], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 302, 386, 555, 558, 617, 646, 789, 815, 859, 863, 901, 905, 1189, 1219, 1292, 1301], "load": [8, 10, 11, 110, 112, 120, 122, 123, 129, 133, 134, 149, 151, 302, 789, 801, 833, 840, 901, 905, 1301], "reset": [9, 155], "state": [9, 100, 722, 726, 801, 819, 821, 851, 863, 901], "note": [9, 15, 25, 39, 40, 47, 48, 50, 65, 69, 70, 72, 74, 81, 86, 88, 90, 91, 107, 108, 109, 111, 113, 114, 118, 120, 121, 122, 123, 127, 128, 130, 133, 134, 138, 141, 143, 146, 148, 150, 152, 155, 157, 160, 165, 167, 176, 189, 190, 192, 193, 194, 204, 205, 206, 208, 209, 212, 223, 226, 227, 236, 237, 238, 239, 246, 258, 261, 262, 265, 266, 270, 271, 275, 277, 278, 302, 346, 366, 376, 377, 389, 390, 395, 414, 415, 418, 422, 436, 459, 465, 471, 480, 482, 486, 502, 505, 524, 530, 532, 544, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 596, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 625, 632, 640, 641, 642, 643, 647, 648, 656, 657, 662, 668, 669, 670, 673, 682, 687, 688, 696, 705, 707, 722, 731, 732, 734, 735, 736, 740, 750, 762, 764, 765, 776, 777, 779, 780, 785, 789, 800, 805, 811, 814, 821, 822, 828, 829, 831, 832, 833, 837, 840, 853, 855, 861, 863, 865, 870, 873, 876, 879, 880, 901, 941, 965, 974, 975, 982, 985, 986, 991, 1014, 1015, 1018, 1022, 1036, 1060, 1061, 1067, 1103, 1106, 1125, 1131, 1141, 1165, 1169, 1177, 1184, 1187, 1191, 1194, 1199, 1205, 1213, 1214, 1215, 1216, 1220, 1221, 1229, 1230, 1235, 1241, 1242, 1243, 1246, 1255, 1262, 1273, 1274, 1292, 1296, 1300], "oper": [9, 40, 72, 89, 91, 96, 97, 104, 107, 109, 110, 111, 112, 113, 118, 120, 130, 158, 163, 175, 178, 181, 188, 191, 198, 199, 210, 212, 219, 223, 225, 226, 230, 234, 236, 239, 240, 246, 256, 262, 266, 269, 279, 280, 302, 310, 311, 314, 346, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 442, 443, 457, 459, 462, 464, 486, 489, 519, 520, 521, 522, 523, 524, 532, 539, 557, 560, 562, 563, 564, 565, 567, 569, 571, 572, 575, 576, 577, 580, 586, 587, 594, 615, 618, 686, 687, 696, 703, 704, 706, 716, 717, 721, 737, 779, 789, 801, 809, 814, 821, 827, 830, 833, 836, 840, 846, 847, 861, 881, 901, 905, 941, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1050, 1120, 1121, 1122, 1123, 1124, 1125, 1163, 1183, 1191, 1268, 1272, 1273, 1274, 1282, 1292], "environ": [9, 35, 130, 137, 149, 152], "ani": [9, 37, 39, 40, 41, 45, 48, 49, 51, 58, 59, 60, 61, 86, 87, 88, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 145, 147, 148, 150, 155, 158, 165, 170, 175, 177, 178, 181, 204, 206, 207, 212, 216, 225, 226, 237, 238, 239, 253, 257, 258, 261, 262, 267, 269, 270, 278, 302, 310, 313, 314, 317, 339, 361, 383, 384, 422, 423, 442, 443, 452, 453, 457, 460, 462, 464, 467, 476, 489, 496, 502, 509, 539, 540, 542, 543, 544, 557, 560, 562, 564, 565, 567, 569, 571, 572, 575, 576, 580, 581, 585, 587, 589, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 631, 633, 655, 669, 670, 671, 672, 673, 674, 675, 677, 679, 686, 687, 690, 696, 703, 704, 705, 707, 708, 717, 718, 719, 750, 753, 766, 767, 779, 789, 810, 811, 817, 823, 824, 850, 871, 873, 880, 901, 905, 906, 910, 913, 934, 960, 980, 981, 1022, 1023, 1050, 1053, 1057, 1063, 1075, 1089, 1097, 1103, 1110, 1140, 1141, 1159, 1165, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1188, 1204, 1206, 1228, 1246, 1247, 1248, 1250, 1252, 1264, 1272, 1273, 1274, 1292, 1300, 1301], "local": [9, 39, 120, 122, 133, 134, 137, 150, 302, 436, 583, 584, 789, 957, 959, 992, 993, 1022, 1026, 1036, 1156, 1157, 1292], "non": [9, 37, 39, 40, 48, 49, 58, 81, 112, 139, 166, 190, 193, 207, 218, 236, 242, 243, 246, 266, 270, 275, 276, 302, 366, 372, 373, 421, 471, 532, 542, 543, 544, 582, 596, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 634, 635, 641, 647, 682, 705, 707, 715, 716, 717, 719, 721, 725, 729, 736, 755, 757, 760, 766, 767, 768, 771, 773, 789, 813, 829, 832, 846, 855, 857, 858, 861, 873, 876, 877, 901, 905, 965, 982, 1021, 1067, 1133, 1141, 1155, 1165, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1191, 1207, 1208, 1214, 1220, 1255, 1273, 1292], "env": [9, 151], "back": [9, 81, 175, 189, 192, 262, 302, 555, 581, 680, 789, 828, 831, 859, 901, 1050, 1253, 1274, 1292], "contain": [10, 37, 38, 39, 40, 58, 81, 86, 109, 112, 114, 120, 121, 122, 133, 134, 141, 142, 147, 160, 170, 189, 192, 207, 223, 227, 265, 270, 283, 302, 313, 315, 317, 339, 358, 359, 476, 509, 543, 544, 631, 638, 640, 642, 643, 646, 665, 666, 682, 704, 705, 706, 707, 717, 721, 753, 789, 805, 817, 828, 831, 851, 870, 873, 884, 901, 905, 906, 910, 911, 934, 981, 1055, 1110, 1140, 1147, 1159, 1204, 1211, 1213, 1215, 1216, 1219, 1238, 1239, 1255, 1268, 1273, 1292], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 302, 555, 859, 901], "leav": [11, 218, 302, 532, 846, 901], "directli": [11, 35, 67, 88, 120, 148, 150, 155, 239, 302, 444, 445, 446, 596, 765, 789, 811, 901, 958, 1045, 1046, 1047, 1165, 1292, 1301], "ascii": [12, 25, 633, 647, 648, 650, 658, 660, 662, 682, 1206, 1220, 1221, 1223, 1231, 1233, 1235, 1255], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 118, 119, 121, 132, 302, 418, 639, 641, 647, 648, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 682, 851, 901, 906, 1018, 1212, 1214, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1255], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 167, 187, 302, 814, 901], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 66, 67, 68, 70, 107, 114, 122, 123, 133, 134, 208, 227, 256, 262, 269, 270, 302, 836, 873, 901, 1300], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 81, 87, 88, 108, 109, 110, 112, 113, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 157, 160, 161, 162, 163, 167, 172, 181, 186, 187, 188, 189, 190, 191, 192, 193, 197, 199, 201, 202, 203, 206, 208, 209, 210, 215, 216, 222, 223, 225, 227, 228, 236, 237, 238, 239, 240, 244, 248, 250, 253, 257, 259, 261, 262, 265, 266, 267, 270, 271, 273, 275, 284, 286, 289, 290, 292, 295, 302, 313, 314, 315, 317, 327, 330, 331, 334, 339, 347, 352, 355, 358, 359, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 404, 421, 423, 436, 441, 442, 443, 444, 445, 446, 464, 467, 471, 472, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 489, 492, 493, 497, 502, 505, 509, 519, 526, 530, 533, 539, 540, 542, 544, 548, 551, 553, 556, 575, 576, 578, 580, 583, 584, 589, 592, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 620, 625, 627, 628, 631, 632, 633, 635, 638, 643, 644, 655, 656, 657, 658, 663, 664, 666, 673, 674, 675, 677, 697, 700, 703, 704, 705, 706, 707, 710, 713, 714, 717, 718, 721, 722, 726, 731, 732, 733, 734, 735, 746, 747, 750, 762, 765, 771, 776, 777, 779, 780, 789, 805, 807, 808, 809, 810, 811, 814, 819, 821, 827, 828, 829, 830, 831, 832, 836, 837, 839, 841, 842, 851, 855, 860, 863, 865, 870, 871, 873, 876, 885, 887, 890, 891, 893, 896, 901, 905, 906, 910, 911, 922, 925, 926, 929, 934, 942, 947, 949, 950, 952, 953, 955, 957, 960, 963, 964, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1000, 1021, 1023, 1036, 1042, 1043, 1045, 1046, 1047, 1054, 1060, 1067, 1068, 1069, 1071, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1087, 1090, 1093, 1094, 1098, 1103, 1106, 1110, 1120, 1127, 1131, 1134, 1147, 1153, 1156, 1157, 1159, 1161, 1162, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1186, 1189, 1194, 1199, 1201, 1204, 1205, 1206, 1208, 1211, 1216, 1217, 1228, 1229, 1230, 1231, 1236, 1237, 1239, 1246, 1247, 1248, 1250, 1269, 1273, 1274, 1277, 1280, 1282, 1283, 1292, 1300], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 114], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 117, 118, 119, 120, 132, 138, 174, 187, 206, 218, 238, 239, 258, 300, 302, 422, 425, 428, 555, 556, 673, 674, 675, 679, 736, 819, 820, 846, 859, 901, 1025, 1028, 1246, 1247, 1248, 1252, 1291], "style": [12, 25, 40, 120, 130, 227, 302], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 310, 641, 656, 669, 789, 906, 1214, 1229, 1230], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 310, 635, 641, 789, 1208, 1214, 1270, 1292], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 62, 65, 81, 83, 85, 89, 108, 110, 138, 148, 161, 162, 163, 165, 167, 168, 171, 176, 177, 181, 186, 187, 188, 189, 199, 200, 208, 209, 214, 215, 216, 217, 221, 227, 228, 229, 249, 250, 251, 253, 272, 275, 280, 284, 286, 289, 290, 291, 292, 294, 295, 302, 309, 312, 319, 320, 321, 322, 323, 324, 342, 348, 353, 361, 364, 365, 369, 370, 371, 383, 384, 385, 389, 390, 423, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 456, 457, 462, 464, 470, 480, 482, 483, 484, 486, 487, 489, 502, 514, 515, 527, 534, 535, 536, 537, 539, 545, 546, 547, 559, 562, 564, 573, 574, 575, 576, 582, 586, 589, 590, 591, 592, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 623, 624, 625, 629, 630, 692, 693, 696, 701, 711, 712, 715, 716, 718, 720, 737, 738, 753, 756, 757, 758, 769, 770, 778, 785, 789, 807, 808, 814, 816, 822, 823, 827, 828, 835, 836, 837, 844, 845, 852, 865, 866, 874, 876, 878, 881, 885, 887, 890, 891, 892, 893, 895, 896, 901, 906, 914, 915, 916, 917, 918, 919, 937, 943, 948, 961, 962, 969, 970, 971, 980, 981, 982, 985, 986, 1023, 1045, 1046, 1047, 1048, 1052, 1056, 1063, 1066, 1103, 1115, 1128, 1135, 1136, 1137, 1138, 1155, 1159, 1161, 1165, 1171, 1173, 1174, 1176, 1177, 1178, 1180, 1181, 1182, 1197, 1198, 1202, 1266, 1267, 1279, 1292, 1301], "multi": [13, 40, 118, 119, 302, 447, 640, 789, 1213], "automat": [13, 67, 70, 107, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 127, 128, 132, 136, 148, 150, 152, 242, 275, 302, 542, 543, 596, 668, 669, 670, 789, 857, 876, 901, 905, 1140, 1165, 1241, 1242, 1243, 1292, 1300], "turn": [13, 58, 59, 60, 61, 87, 88, 118, 119, 132, 680, 810, 811, 819, 821, 841, 842, 851, 901, 1253], "struct": [13, 105, 114, 223, 242, 264, 268, 275, 302, 351, 384, 467, 532, 566, 568, 570, 589, 599, 600, 642, 644, 664, 665, 700, 722, 723, 725, 726, 727, 752, 789, 857, 872, 876, 889, 901, 946, 981, 1133, 1159, 1168, 1215, 1217, 1237, 1238, 1292], "v": [13, 14, 45, 67, 68, 173, 302, 616, 705, 707, 789, 1185, 1292], "v2": [13, 124, 135], "out": [13, 19, 58, 59, 60, 61, 114, 140, 236, 239, 302, 338, 356, 505, 507, 530, 632, 636, 643, 779, 855, 901, 933, 950, 1106, 1108, 1131, 1205, 1209, 1216], "separ": [14, 15, 29, 32, 37, 58, 116, 118, 119, 132, 225, 227, 259, 266, 268, 302, 317, 336, 339, 503, 509, 544, 639, 717, 722, 723, 726, 727, 789, 872, 901, 931, 934, 1104, 1110, 1212, 1261, 1269, 1292], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 61, 65, 119, 161, 188, 189, 190, 191, 192, 193, 207, 223, 225, 227, 236, 239, 269, 271, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 311, 383, 449, 455, 460, 463, 502, 542, 544, 552, 554, 581, 592, 600, 601, 627, 628, 632, 640, 641, 642, 643, 656, 657, 700, 753, 789, 807, 827, 828, 829, 830, 831, 832, 855, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 905, 906, 980, 1103, 1169, 1205, 1213, 1214, 1215, 1216, 1229, 1230, 1280, 1292], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 906], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 49, 118, 119, 141, 142, 143, 144, 189, 190, 192, 193, 208, 209, 236, 270, 302, 384, 444, 445, 446, 471, 520, 521, 522, 523, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 625, 660, 715, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 836, 837, 855, 873, 901, 981, 1045, 1046, 1047, 1067, 1121, 1122, 1123, 1124, 1159, 1185, 1199, 1233, 1292], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 302, 901], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 119, 140, 141, 143, 171, 187, 188, 207, 210, 260, 279, 302, 469, 556, 789, 810, 834, 901, 1075, 1271, 1292, 1301], "876": 14, "543": 14, "010": [14, 677, 1250], "101": [14, 32, 394, 677, 1250, 1301], "000": [14, 15, 32, 40, 302, 1301], "123": [14, 635, 641, 657, 682, 779, 906, 1208, 1214, 1255, 1270, 1292], "456": [14, 15, 394, 906, 990, 1270, 1292], "780": 14, "precis": [15, 16, 37, 40, 49, 58, 120, 206, 238, 239, 258, 302, 392, 676, 901, 906, 988, 1249], "control": [15, 16, 40, 70, 88, 89, 146, 302, 596, 789, 811, 819, 901, 1165, 1292], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 47, 48, 49, 58, 61, 72, 74, 81, 91, 101, 107, 109, 110, 111, 113, 116, 118, 119, 120, 121, 123, 127, 128, 129, 130, 132, 135, 136, 137, 139, 146, 148, 149, 151, 152, 153, 160, 162, 166, 173, 174, 176, 177, 187, 195, 206, 207, 210, 211, 222, 223, 240, 246, 247, 251, 254, 265, 269, 272, 283, 285, 287, 296, 302, 328, 344, 346, 351, 354, 360, 372, 383, 384, 387, 393, 402, 405, 408, 411, 413, 423, 437, 438, 440, 444, 445, 446, 450, 452, 458, 466, 480, 482, 490, 491, 500, 508, 511, 512, 517, 519, 524, 527, 529, 532, 534, 585, 589, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 618, 619, 621, 630, 644, 645, 647, 648, 649, 652, 656, 662, 664, 665, 676, 689, 695, 701, 718, 719, 720, 736, 744, 749, 766, 767, 770, 774, 778, 789, 805, 808, 813, 820, 821, 822, 823, 833, 840, 851, 861, 862, 866, 868, 870, 874, 884, 886, 888, 897, 901, 939, 941, 946, 954, 964, 980, 981, 983, 989, 998, 1001, 1007, 1011, 1013, 1023, 1037, 1038, 1040, 1044, 1045, 1046, 1047, 1051, 1053, 1062, 1074, 1091, 1092, 1101, 1109, 1112, 1113, 1118, 1120, 1125, 1130, 1133, 1147, 1148, 1159, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1191, 1192, 1195, 1203, 1217, 1218, 1220, 1221, 1222, 1225, 1229, 1230, 1235, 1237, 1238, 1249, 1263, 1276, 1281, 1292, 1301], "place": [15, 16, 37, 58, 160, 169, 175, 197, 198, 199, 227, 232, 234, 239, 247, 250, 265, 273, 302, 327, 339, 347, 509, 526, 619, 627, 789, 805, 862, 865, 870, 901, 912, 922, 934, 942, 1050, 1110, 1127, 1162, 1192, 1201, 1292], "float": [15, 16, 37, 40, 52, 53, 58, 123, 138, 141, 142, 143, 144, 145, 148, 150, 157, 167, 173, 176, 209, 229, 240, 247, 294, 302, 334, 365, 384, 389, 390, 423, 441, 442, 443, 444, 445, 446, 451, 456, 462, 464, 470, 473, 477, 480, 482, 483, 484, 489, 497, 519, 535, 539, 545, 559, 573, 574, 575, 576, 586, 589, 590, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 696, 763, 765, 789, 814, 822, 837, 852, 862, 863, 895, 901, 906, 929, 955, 962, 981, 982, 984, 985, 986, 1003, 1004, 1023, 1042, 1044, 1045, 1046, 1047, 1052, 1056, 1063, 1074, 1090, 1098, 1099, 1120, 1136, 1150, 1151, 1158, 1159, 1160, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1183, 1185, 1187, 1188, 1199, 1203, 1262, 1273, 1281, 1292, 1301], "point": [15, 16, 40, 41, 49, 51, 52, 53, 58, 59, 60, 61, 87, 88, 138, 148, 150, 176, 189, 192, 210, 269, 270, 302, 365, 383, 384, 389, 422, 423, 451, 456, 467, 480, 482, 519, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 766, 767, 789, 810, 811, 822, 828, 831, 841, 842, 853, 873, 901, 960, 962, 980, 981, 985, 1022, 1023, 1052, 1056, 1063, 1074, 1120, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1273, 1292], "standard": [15, 40, 251, 261, 302, 405, 445, 610, 625, 630, 646, 770, 785, 789, 866, 901, 1001, 1046, 1199, 1203, 1219, 1292, 1301], "behaviour": [15, 81, 89, 170, 302, 632, 640, 641, 643, 656, 657, 696, 789, 817, 901, 1205, 1213, 1214, 1216, 1229, 1230], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 61, 70, 72, 73, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 148, 150, 158, 160, 167, 171, 173, 175, 177, 181, 189, 190, 192, 193, 208, 212, 226, 236, 237, 239, 242, 243, 246, 250, 259, 261, 265, 267, 270, 276, 302, 346, 366, 444, 445, 446, 452, 524, 532, 543, 553, 585, 596, 618, 627, 628, 633, 647, 648, 658, 662, 668, 669, 670, 673, 713, 722, 726, 740, 789, 805, 814, 823, 828, 829, 831, 832, 836, 841, 842, 855, 857, 858, 861, 865, 870, 871, 873, 877, 901, 941, 965, 982, 1044, 1045, 1046, 1047, 1050, 1053, 1125, 1140, 1165, 1184, 1187, 1191, 1206, 1220, 1221, 1231, 1235, 1241, 1242, 1243, 1246, 1269, 1273, 1292], "larger": [15, 58, 59, 60, 61, 87, 88, 718, 810, 811, 901], "should": [15, 38, 40, 58, 59, 60, 61, 89, 107, 109, 111, 113, 122, 127, 128, 130, 132, 136, 138, 145, 146, 150, 160, 168, 206, 209, 212, 237, 238, 239, 258, 259, 265, 268, 288, 302, 311, 363, 383, 439, 447, 480, 482, 502, 544, 555, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 625, 700, 736, 738, 750, 753, 766, 767, 779, 789, 805, 816, 821, 836, 837, 842, 859, 863, 865, 870, 872, 901, 906, 958, 980, 1039, 1103, 1141, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1185, 1199, 1272, 1280, 1292], "ensur": [15, 40, 121, 147, 148, 150, 188, 191, 225, 237, 261, 302, 471, 542, 789, 827, 830, 841, 842, 901, 905, 906, 1273, 1292], "awar": [15, 120, 206, 238, 239, 258, 302, 633, 658, 821, 901, 1206, 1231, 1248], "both": [15, 30, 37, 58, 72, 90, 91, 120, 189, 190, 192, 193, 208, 209, 219, 236, 237, 262, 270, 302, 316, 366, 384, 447, 471, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 662, 731, 732, 734, 735, 776, 777, 785, 789, 800, 828, 829, 831, 832, 836, 837, 847, 855, 873, 901, 965, 1067, 1077, 1235, 1274, 1292], "limit": [15, 16, 61, 120, 121, 132, 152, 177, 302, 354, 367, 368, 452, 458, 789, 823, 833, 901, 966, 967, 1053, 1292], "represent": [15, 43, 44, 47, 48, 50, 74, 114, 260, 302, 363, 393, 398, 402, 405, 406, 408, 409, 411, 413, 416, 419, 420, 423, 437, 438, 440, 694, 789, 819, 839, 901, 958, 959, 989, 994, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1013, 1016, 1019, 1020, 1023, 1037, 1038, 1040, 1271, 1275, 1292], "look": [15, 189, 302, 355, 532, 542, 789, 828, 901, 949], "appli": [15, 25, 37, 40, 58, 65, 89, 120, 132, 145, 148, 150, 167, 181, 212, 226, 288, 302, 327, 393, 396, 397, 398, 402, 404, 405, 406, 408, 409, 411, 413, 416, 419, 420, 423, 426, 437, 438, 440, 445, 446, 540, 542, 544, 585, 602, 604, 605, 607, 611, 656, 657, 673, 674, 675, 679, 713, 722, 723, 726, 727, 740, 751, 752, 753, 764, 779, 789, 814, 833, 840, 841, 842, 850, 889, 901, 965, 989, 992, 993, 994, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1013, 1016, 1019, 1020, 1023, 1026, 1037, 1038, 1040, 1046, 1047, 1141, 1170, 1172, 1173, 1175, 1179, 1229, 1230, 1246, 1247, 1248, 1252, 1292], "float64": [15, 37, 40, 58, 110, 118, 148, 171, 173, 181, 241, 275, 302, 319, 320, 321, 322, 323, 324, 361, 369, 370, 371, 385, 423, 447, 480, 482, 591, 623, 624, 692, 693, 738, 762, 765, 780, 789, 818, 856, 876, 901, 906, 1023, 1274, 1279, 1292], "doe": [15, 37, 39, 58, 81, 89, 101, 107, 109, 110, 111, 113, 114, 118, 119, 120, 121, 122, 123, 127, 128, 132, 133, 136, 138, 163, 175, 189, 194, 207, 208, 237, 238, 239, 267, 275, 278, 302, 305, 439, 465, 532, 543, 669, 670, 698, 785, 789, 809, 814, 821, 828, 831, 836, 842, 871, 876, 880, 901, 968, 1039, 1050, 1060, 1061, 1140, 1194, 1282, 1292, 1296], "cover": 15, "nativ": [15, 118, 120, 123, 124, 126, 130, 146, 206, 212, 238, 239, 258, 288, 302, 544, 753, 789, 795, 889, 1141, 1292, 1301], "level": [15, 40, 45, 61, 132, 135, 136, 137, 148, 181, 212, 223, 302, 453, 789, 801, 833, 840, 901], "larg": [15, 16, 19, 81, 120], "maximum": [15, 31, 37, 49, 58, 110, 113, 118, 119, 120, 127, 132, 136, 138, 146, 147, 148, 150, 187, 189, 213, 214, 302, 332, 494, 545, 573, 583, 592, 644, 645, 648, 662, 754, 755, 789, 828, 843, 901, 927, 1002, 1095, 1142, 1150, 1156, 1161, 1217, 1218, 1221, 1235, 1292], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 81, 107, 108, 111, 112, 118, 120, 121, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 167, 168, 170, 187, 189, 207, 209, 218, 225, 227, 259, 261, 269, 271, 302, 305, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 453, 555, 603, 604, 605, 607, 610, 611, 612, 711, 712, 731, 732, 734, 735, 736, 776, 777, 785, 789, 801, 807, 811, 814, 815, 816, 817, 828, 837, 842, 846, 859, 901, 969, 971, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1071, 1076, 1080, 1081, 1086, 1171, 1197, 1266, 1292, 1296, 1301], "pi": [15, 385, 789, 969, 971, 1197, 1266, 1292], "e": [15, 36, 37, 39, 41, 42, 45, 58, 108, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 187, 195, 205, 254, 256, 261, 269, 302, 310, 317, 386, 441, 447, 471, 535, 544, 549, 550, 552, 553, 554, 556, 557, 620, 625, 643, 669, 670, 738, 753, 779, 789, 815, 839, 853, 901, 906, 1042, 1043, 1067, 1186, 1199, 1216, 1292, 1301], "const": 15, "15": [15, 40, 140, 147, 167, 189, 199, 212, 236, 302, 383, 387, 415, 422, 436, 585, 601, 611, 645, 723, 776, 789, 814, 828, 855, 901, 980, 983, 1022, 1036, 1218, 1292], "141592653589793": 15, "718281828459045": [15, 441, 535, 789, 1042, 1136, 1292], "align": [15, 20, 21, 40, 81, 89, 302], "numer": [15, 21, 37, 40, 58, 161, 168, 209, 218, 227, 262, 269, 302, 310, 366, 457, 471, 537, 560, 562, 586, 595, 620, 642, 682, 686, 696, 789, 801, 807, 816, 837, 846, 901, 906, 965, 982, 1043, 1067, 1084, 1186, 1193, 1215, 1255, 1273, 1292, 1301], "column": [15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 72, 73, 81, 82, 89, 91, 93, 95, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 160, 161, 165, 166, 168, 169, 170, 171, 174, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 250, 251, 252, 253, 257, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 287, 302, 312, 313, 315, 327, 336, 345, 347, 350, 366, 372, 373, 384, 393, 394, 396, 397, 398, 402, 404, 405, 406, 408, 409, 411, 413, 416, 419, 420, 423, 425, 426, 428, 437, 438, 440, 447, 449, 453, 455, 467, 471, 486, 490, 496, 503, 505, 526, 530, 531, 532, 543, 544, 550, 552, 554, 555, 564, 567, 569, 571, 572, 581, 587, 589, 593, 595, 597, 599, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 620, 627, 628, 631, 639, 643, 664, 665, 673, 674, 675, 676, 677, 679, 684, 687, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 789, 805, 807, 813, 816, 817, 818, 820, 824, 827, 828, 829, 830, 831, 832, 836, 837, 842, 843, 844, 845, 846, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 888, 889, 901, 906, 910, 911, 931, 940, 942, 945, 957, 959, 965, 981, 989, 992, 993, 994, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1013, 1016, 1019, 1020, 1023, 1025, 1026, 1028, 1037, 1038, 1040, 1049, 1060, 1063, 1097, 1104, 1106, 1127, 1132, 1159, 1166, 1169, 1193, 1204, 1212, 1216, 1237, 1238, 1246, 1247, 1248, 1249, 1250, 1252, 1258, 1261, 1269, 1270, 1292, 1301], "cleanli": [15, 187, 302], "line": [15, 25, 40, 118, 119, 123, 132, 187, 201, 203, 302, 305, 640, 1213], "up": [15, 40, 73, 118, 119, 121, 132, 206, 209, 238, 239, 258, 302, 317, 365, 544, 789, 836, 837, 842, 901, 906, 962, 1292], "xx": [15, 82, 84, 147, 150, 167, 302, 814, 901, 906], "yy": [15, 82, 84, 147, 150, 167, 302, 814, 901, 906], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 61, 140, 148, 159, 167, 236, 302, 312, 414, 415, 418, 422, 436, 459, 470, 506, 558, 582, 592, 601, 603, 611, 626, 703, 772, 777, 789, 804, 810, 811, 814, 833, 840, 851, 855, 868, 901, 906, 1018, 1022, 1036, 1141, 1171, 1292], "111": 15, "100": [15, 22, 32, 40, 110, 113, 118, 119, 120, 127, 132, 136, 246, 302, 596, 618, 633, 644, 645, 658, 676, 735, 789, 861, 901, 1137, 1165, 1172, 1173, 1175, 1191, 1206, 1217, 1218, 1231, 1249, 1292, 1301], "988": 15, "44": [15, 219, 302, 388, 789, 847, 901], "444": 15, "23": [15, 167, 189, 236, 302, 394, 398, 402, 419, 422, 438, 601, 604, 605, 607, 610, 611, 612, 733, 736, 775, 776, 777, 789, 814, 828, 855, 901, 906, 990, 998, 1301], "789": [15, 906], "fmt": [16, 469, 741, 789, 834, 901], "floatfmt": 16, "mix": [16, 209, 302, 982, 1248, 1292], "how": [16, 39, 40, 81, 89, 121, 130, 137, 170, 208, 209, 227, 269, 270, 302, 335, 363, 387, 421, 422, 436, 470, 498, 499, 500, 581, 595, 609, 673, 675, 733, 779, 789, 817, 836, 873, 901, 905, 930, 958, 983, 1021, 1022, 1036, 1099, 1100, 1101, 1177, 1246, 1248, 1292], "full": [16, 48, 81, 89, 110, 113, 118, 119, 120, 122, 127, 132, 133, 134, 136, 138, 189, 190, 192, 193, 236, 302, 644, 645, 673, 674, 675, 679, 828, 829, 831, 832, 841, 842, 855, 901, 906, 1217, 1218, 1246, 1247, 1248, 1252, 1292, 1301], "scientif": 16, "notat": [16, 40, 302], "small": [16, 121, 147, 210, 302, 422, 821, 901, 1301], "2304980958725870923": 16, "1e6": 16, "1e": [16, 141, 142, 143, 144], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 1034], "00000001": [16, 703, 789], "plai": [17, 717], "sam": 17, "As": [17, 72, 90, 91, 107, 109, 110, 111, 113, 123, 127, 128, 136, 302, 532, 779, 901], "time": [17, 39, 48, 50, 65, 70, 86, 87, 88, 130, 132, 167, 175, 189, 190, 192, 193, 209, 236, 271, 302, 334, 360, 391, 392, 394, 395, 396, 400, 401, 418, 421, 422, 425, 427, 428, 436, 439, 496, 497, 532, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 621, 673, 675, 679, 694, 695, 716, 717, 731, 732, 733, 734, 735, 736, 742, 776, 777, 789, 810, 811, 814, 828, 829, 831, 832, 837, 851, 855, 901, 906, 929, 954, 987, 988, 990, 991, 996, 997, 1018, 1021, 1022, 1025, 1027, 1028, 1036, 1039, 1050, 1097, 1098, 1099, 1169, 1195, 1246, 1248, 1252, 1275, 1276, 1292, 1301], "goe": 17, "By": [17, 19, 35, 81, 118, 119, 132, 189, 208, 209, 236, 238, 246, 251, 270, 271, 272, 302, 346, 418, 422, 436, 524, 527, 534, 601, 604, 605, 606, 607, 608, 610, 611, 612, 618, 630, 701, 718, 720, 731, 732, 734, 735, 736, 750, 770, 776, 777, 778, 789, 810, 828, 836, 837, 855, 861, 866, 874, 901, 941, 1018, 1022, 1036, 1125, 1191, 1203, 1281, 1292], "begin": [17, 40, 302, 444, 445, 446, 640, 789, 1045, 1046, 1047, 1213, 1292], "beauti": 17, "friendship": 17, "len_byt": [17, 648, 649, 1221, 1222], "len": [17, 40, 146, 148, 207, 227, 278, 283, 288, 302, 372, 512, 544, 552, 554, 719, 746, 789, 880, 884, 889, 901, 1113, 1292], "u32": [17, 65, 120, 159, 161, 166, 224, 277, 278, 283, 287, 293, 295, 302, 311, 318, 325, 326, 327, 328, 329, 332, 333, 335, 344, 372, 373, 467, 490, 494, 495, 499, 511, 517, 563, 579, 592, 600, 604, 605, 607, 610, 611, 612, 616, 635, 643, 647, 648, 694, 698, 704, 709, 713, 714, 719, 721, 746, 749, 761, 789, 804, 807, 813, 849, 879, 880, 884, 888, 894, 896, 901, 922, 923, 924, 927, 928, 930, 939, 955, 959, 1063, 1095, 1096, 1100, 1112, 1118, 1161, 1169, 1185, 1208, 1216, 1220, 1221, 1275, 1278, 1280, 1292], "37": [17, 611, 789], "beaut": 17, "48": [17, 236, 302, 601, 789, 855, 901], "fmt_str_length": [17, 732, 735], "50": [17, 32, 40, 167, 175, 187, 302, 366, 422, 436, 732, 789, 814, 901, 965, 982, 1036, 1292], "element": [18, 19, 30, 147, 150, 160, 166, 204, 227, 237, 251, 265, 272, 302, 317, 319, 320, 321, 322, 323, 324, 335, 336, 360, 364, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 389, 390, 448, 449, 453, 465, 476, 490, 498, 499, 501, 502, 503, 506, 511, 512, 520, 521, 522, 523, 527, 534, 536, 537, 544, 581, 582, 592, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 622, 623, 624, 629, 630, 664, 665, 676, 692, 693, 695, 701, 718, 720, 766, 767, 770, 778, 789, 805, 813, 865, 866, 870, 874, 901, 913, 914, 915, 916, 917, 918, 919, 930, 931, 954, 961, 964, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 985, 986, 1048, 1049, 1054, 1062, 1075, 1089, 1091, 1092, 1099, 1100, 1102, 1103, 1104, 1107, 1112, 1113, 1121, 1122, 1123, 1124, 1137, 1138, 1141, 1155, 1161, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1185, 1196, 1197, 1198, 1202, 1203, 1237, 1238, 1249, 1263, 1266, 1267, 1271, 1276, 1277, 1281, 1292], "empti": [18, 36, 37, 58, 97, 110, 118, 119, 123, 129, 132, 162, 163, 189, 202, 218, 302, 750, 768, 808, 809, 828, 846, 901, 906, 964, 968, 1070, 1292], "alwai": [18, 37, 39, 49, 51, 58, 65, 118, 147, 188, 191, 212, 288, 302, 552, 673, 731, 779, 842, 901, 1141, 1246, 1292, 1300, 1301], "neg": [18, 47, 48, 49, 50, 118, 119, 124, 126, 130, 139, 189, 190, 192, 193, 195, 211, 236, 246, 247, 249, 254, 278, 302, 346, 524, 525, 585, 601, 618, 619, 626, 662, 789, 828, 829, 831, 832, 855, 861, 862, 864, 879, 880, 901, 941, 1062, 1092, 1125, 1126, 1191, 1192, 1200, 1235, 1263, 1292], "result": [18, 37, 43, 44, 45, 58, 59, 60, 61, 81, 89, 111, 112, 113, 120, 121, 122, 123, 132, 135, 137, 138, 150, 175, 189, 192, 194, 208, 209, 223, 227, 236, 239, 246, 247, 261, 262, 271, 278, 280, 287, 302, 422, 425, 428, 436, 444, 445, 446, 450, 465, 471, 487, 531, 532, 542, 544, 555, 581, 589, 596, 597, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 617, 618, 619, 663, 664, 675, 696, 721, 722, 723, 726, 727, 731, 732, 733, 734, 735, 736, 750, 752, 762, 765, 766, 767, 780, 789, 806, 810, 814, 828, 829, 831, 832, 836, 841, 842, 851, 855, 859, 861, 862, 880, 881, 888, 901, 912, 981, 1022, 1025, 1028, 1036, 1045, 1046, 1047, 1050, 1051, 1061, 1067, 1090, 1132, 1141, 1159, 1165, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1189, 1191, 1192, 1236, 1237, 1248, 1272, 1273, 1274, 1292, 1300, 1301], "being": [18, 41, 49, 51, 58, 59, 60, 61, 87, 88, 118, 119, 120, 132, 138, 161, 174, 259, 269, 270, 302, 317, 383, 384, 422, 467, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 737, 766, 767, 789, 807, 810, 811, 820, 821, 873, 901, 960, 980, 981, 1022, 1063, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1269, 1292, 1301], "content": [18, 621, 789, 1195, 1292], "final": [18, 40, 81, 137, 209, 302, 444, 445, 446, 789, 814, 821, 901, 905, 1045, 1046, 1047, 1292], "item": [18, 89, 119, 187, 237, 240, 302, 334, 338, 339, 387, 449, 497, 500, 507, 509, 519, 615, 665, 789, 929, 933, 934, 983, 1049, 1098, 1101, 1108, 1110, 1120, 1183, 1238, 1292], "num": [18, 40, 264, 302, 471, 789, 1067, 1292], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 61, 65, 81, 89, 114, 121, 132, 140, 148, 150, 163, 167, 175, 186, 187, 189, 195, 197, 199, 200, 205, 222, 226, 227, 228, 232, 234, 236, 242, 254, 275, 280, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 312, 316, 325, 326, 327, 329, 366, 374, 377, 387, 391, 393, 394, 396, 397, 400, 402, 406, 408, 409, 411, 414, 415, 416, 421, 422, 423, 426, 436, 439, 465, 466, 470, 476, 486, 491, 500, 506, 508, 515, 525, 527, 529, 534, 536, 552, 554, 564, 579, 582, 585, 596, 601, 626, 677, 689, 703, 715, 722, 731, 734, 737, 740, 742, 744, 750, 752, 774, 777, 789, 810, 811, 814, 828, 833, 835, 840, 850, 851, 855, 857, 867, 868, 876, 881, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 906, 965, 983, 987, 989, 990, 996, 1007, 1021, 1036, 1039, 1042, 1062, 1075, 1092, 1101, 1109, 1126, 1128, 1130, 1135, 1137, 1141, 1155, 1165, 1184, 1187, 1250, 1263, 1273, 1292, 1301], "size": [19, 45, 61, 118, 119, 120, 146, 147, 148, 150, 152, 173, 269, 302, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 710, 746, 747, 766, 767, 789, 810, 901, 1044, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292, 1301], "overwrit": [19, 38, 39, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 136, 157, 270, 302, 312, 789, 821, 901], "chunk": [19, 61, 116, 118, 119, 130, 132, 135, 136, 137, 148, 150, 175, 207, 222, 302, 316, 593, 789, 901, 912, 963, 1050, 1059, 1147, 1162, 1268, 1292], "stream": [19, 41, 42, 58, 59, 60, 61, 87, 88, 126, 160, 188, 191, 208, 265, 267, 302, 542, 789, 805, 810, 811, 819, 821, 827, 830, 836, 841, 842, 846, 851, 863, 865, 870, 871, 901], "engin": [19, 38, 120, 121, 123, 152, 188, 191, 208, 212, 267, 288, 302, 542, 789, 827, 830, 836, 841, 842, 846, 871, 889, 901, 1141, 1292], "determin": [19, 37, 40, 58, 79, 81, 89, 118, 119, 120, 123, 129, 130, 132, 137, 139, 158, 181, 189, 192, 206, 207, 212, 227, 236, 266, 271, 302, 363, 404, 421, 422, 436, 467, 532, 543, 552, 589, 595, 596, 604, 605, 606, 607, 608, 610, 611, 612, 625, 633, 673, 675, 676, 733, 762, 765, 780, 789, 828, 831, 855, 901, 958, 1000, 1021, 1022, 1036, 1063, 1133, 1140, 1159, 1165, 1199, 1206, 1246, 1248, 1249, 1292], "thread": [19, 37, 58, 88, 116, 118, 119, 121, 152, 153, 302, 317, 502, 544, 789, 811, 901, 1103], "pool": [19, 88, 152, 153, 811, 901], "For": [19, 39, 40, 118, 119, 120, 121, 122, 123, 132, 133, 134, 170, 175, 208, 209, 236, 288, 302, 305, 444, 445, 446, 532, 544, 553, 594, 625, 632, 640, 641, 642, 643, 722, 726, 736, 740, 741, 785, 789, 817, 837, 855, 889, 901, 905, 1045, 1046, 1047, 1050, 1077, 1163, 1199, 1205, 1213, 1214, 1215, 1216, 1292, 1296], "some": [19, 35, 40, 72, 91, 110, 118, 119, 120, 123, 132, 157, 170, 239, 302, 785, 817, 901, 1075, 1292, 1301], "dataset": [19, 45, 51, 118, 119, 130, 132, 138, 208, 302, 487, 789, 801, 836, 841, 842, 901, 1090, 1292], "esp": 19, "have": [19, 35, 40, 48, 72, 81, 91, 108, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 150, 175, 206, 208, 209, 230, 236, 238, 239, 258, 278, 302, 383, 386, 444, 445, 446, 544, 553, 592, 596, 601, 642, 789, 815, 836, 846, 855, 863, 879, 880, 901, 905, 906, 980, 982, 1045, 1046, 1047, 1050, 1060, 1161, 1165, 1248, 1292, 1301], "too": [19, 821, 901], "optimist": 19, "lead": [19, 45, 114, 138, 189, 190, 192, 193, 216, 236, 246, 253, 302, 346, 460, 463, 524, 542, 544, 601, 617, 618, 651, 667, 668, 670, 690, 718, 789, 828, 829, 831, 832, 841, 842, 855, 861, 883, 889, 901, 941, 1125, 1141, 1189, 1191, 1224, 1240, 1241, 1243, 1292], "memori": [19, 61, 87, 88, 89, 107, 108, 111, 112, 113, 118, 119, 120, 123, 124, 130, 132, 135, 136, 137, 157, 175, 212, 238, 239, 248, 261, 288, 302, 581, 593, 620, 789, 810, 811, 901, 1050, 1141, 1162, 1193, 1194, 1273, 1292], "error": [19, 39, 88, 99, 102, 109, 110, 113, 118, 119, 132, 161, 227, 237, 302, 312, 339, 356, 361, 486, 505, 509, 530, 564, 632, 636, 640, 642, 643, 644, 646, 673, 674, 675, 679, 789, 807, 811, 883, 889, 901, 934, 950, 955, 1106, 1110, 1131, 1205, 1209, 1213, 1215, 1216, 1217, 1219, 1246, 1247, 1248, 1252, 1292], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 61, 81, 82, 84, 89, 98, 101, 106, 110, 111, 112, 113, 114, 118, 119, 120, 123, 124, 126, 127, 130, 132, 135, 136, 137, 138, 141, 142, 146, 148, 158, 160, 162, 170, 175, 178, 181, 183, 187, 188, 189, 191, 194, 195, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 218, 223, 239, 240, 249, 254, 255, 258, 260, 265, 267, 269, 270, 277, 278, 283, 285, 287, 288, 296, 302, 327, 328, 336, 351, 449, 461, 466, 491, 503, 532, 581, 582, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 626, 628, 639, 644, 645, 689, 691, 710, 713, 717, 719, 721, 726, 727, 740, 744, 746, 747, 749, 764, 766, 767, 774, 779, 789, 805, 808, 810, 817, 821, 824, 825, 826, 828, 833, 836, 837, 838, 840, 842, 846, 864, 868, 869, 870, 871, 873, 879, 880, 884, 886, 888, 889, 897, 901, 922, 931, 1049, 1050, 1058, 1062, 1104, 1155, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1200, 1212, 1217, 1218, 1263, 1265, 1292, 1301], "per": [19, 37, 40, 58, 146, 148, 160, 187, 223, 224, 243, 250, 265, 276, 291, 293, 294, 302, 317, 338, 502, 505, 507, 530, 542, 544, 564, 565, 567, 569, 571, 572, 628, 700, 713, 789, 805, 858, 865, 870, 877, 892, 894, 895, 901, 905, 933, 1103, 1106, 1108, 1131, 1280, 1292], "everi": [19, 37, 58, 118, 119, 132, 183, 189, 192, 255, 258, 271, 302, 330, 331, 332, 333, 336, 338, 344, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 422, 436, 449, 461, 494, 495, 500, 503, 506, 507, 508, 517, 520, 525, 529, 600, 639, 691, 722, 723, 726, 727, 789, 821, 826, 828, 831, 869, 901, 925, 926, 927, 928, 931, 933, 939, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1022, 1036, 1049, 1058, 1060, 1095, 1096, 1101, 1104, 1107, 1108, 1109, 1118, 1121, 1126, 1130, 1169, 1212, 1265, 1292], "process": [19, 37, 58, 59, 60, 61, 87, 88, 118, 119, 120, 132, 152, 238, 302, 810, 811, 901], "liter": [20, 21, 25, 39, 120, 149, 150, 151, 242, 243, 246, 270, 275, 276, 302, 312, 355, 366, 394, 442, 443, 450, 457, 462, 464, 471, 489, 539, 543, 560, 562, 575, 576, 586, 596, 632, 635, 643, 656, 657, 686, 696, 705, 707, 710, 715, 716, 717, 725, 729, 730, 733, 746, 750, 755, 757, 760, 768, 771, 773, 775, 789, 823, 857, 858, 861, 873, 876, 877, 901, 906, 949, 965, 990, 1051, 1067, 1165, 1184, 1187, 1191, 1205, 1208, 1216, 1229, 1230, 1292], "left": [20, 21, 40, 67, 81, 141, 142, 143, 144, 189, 190, 192, 193, 208, 209, 236, 270, 302, 384, 444, 445, 446, 470, 471, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 650, 694, 715, 722, 723, 726, 727, 731, 732, 734, 735, 740, 764, 776, 777, 779, 789, 828, 829, 831, 832, 836, 837, 855, 873, 901, 981, 1045, 1046, 1047, 1067, 1159, 1185, 1223, 1275, 1292], "center": [20, 21, 40, 302, 444, 445, 446, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 789, 1045, 1046, 1047, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "cell": [20, 21, 40, 302], "valueerror": [20, 25], "recognis": [20, 21, 25, 145], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 81, 114, 123, 148, 161, 167, 187, 189, 190, 192, 193, 207, 209, 236, 271, 302, 305, 334, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 497, 601, 604, 605, 606, 607, 608, 610, 611, 612, 673, 675, 694, 731, 732, 734, 735, 736, 742, 750, 776, 777, 789, 807, 814, 828, 829, 831, 832, 837, 855, 901, 906, 929, 987, 988, 989, 990, 991, 992, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1086, 1098, 1099, 1150, 1151, 1188, 1246, 1248, 1275, 1292], "date": [21, 40, 48, 81, 118, 119, 121, 123, 129, 132, 138, 148, 161, 167, 187, 189, 190, 192, 193, 207, 209, 236, 302, 305, 334, 392, 393, 394, 395, 398, 401, 404, 405, 408, 413, 414, 415, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 497, 601, 604, 605, 606, 607, 608, 610, 611, 612, 673, 674, 694, 731, 732, 734, 735, 742, 750, 775, 789, 807, 814, 828, 829, 831, 832, 837, 855, 901, 906, 929, 988, 989, 990, 991, 994, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1086, 1098, 1099, 1150, 1151, 1188, 1246, 1247, 1275, 1292], "333": [21, 614, 789, 1182, 1292], "mno": [21, 25], "2023": [21, 40, 114, 140, 207, 302, 394, 736, 750, 906, 990], "29": [21, 148, 391, 414, 987, 1014], "2001": [21, 392, 393, 398, 401, 404, 408, 413, 418, 419, 420, 422, 427, 436, 437, 438, 439, 604, 605, 607, 610, 611, 612, 673, 789, 906, 988, 989, 994, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1016, 1018, 1019, 1020, 1022, 1027, 1036, 1037, 1038, 1039, 1040, 1246], "null": [21, 37, 39, 48, 58, 67, 81, 89, 109, 110, 113, 118, 119, 128, 132, 136, 138, 157, 160, 162, 166, 167, 170, 172, 177, 181, 182, 200, 208, 215, 216, 217, 224, 227, 229, 246, 247, 250, 251, 252, 253, 257, 262, 265, 268, 270, 272, 275, 283, 302, 313, 315, 316, 317, 327, 330, 331, 338, 339, 346, 347, 354, 356, 366, 372, 373, 374, 377, 387, 389, 390, 418, 421, 429, 430, 431, 432, 433, 434, 435, 443, 444, 445, 446, 447, 450, 451, 452, 458, 470, 480, 482, 483, 484, 490, 492, 493, 500, 501, 504, 505, 507, 509, 510, 511, 520, 521, 522, 523, 524, 526, 530, 532, 542, 544, 563, 576, 577, 578, 579, 582, 593, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 619, 620, 622, 627, 631, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 653, 654, 655, 662, 664, 665, 666, 673, 675, 677, 682, 683, 684, 685, 694, 704, 705, 706, 707, 715, 716, 717, 719, 721, 725, 733, 738, 749, 750, 755, 757, 760, 766, 767, 771, 773, 779, 789, 805, 808, 813, 814, 817, 823, 835, 836, 849, 859, 861, 862, 865, 870, 872, 873, 876, 878, 884, 901, 910, 911, 913, 922, 925, 926, 933, 934, 941, 942, 950, 964, 965, 983, 985, 986, 1021, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1043, 1045, 1046, 1047, 1051, 1053, 1060, 1066, 1082, 1083, 1091, 1093, 1094, 1097, 1101, 1102, 1105, 1106, 1108, 1110, 1111, 1112, 1122, 1124, 1125, 1127, 1131, 1133, 1141, 1154, 1155, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1186, 1191, 1192, 1196, 1201, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1226, 1227, 1228, 1235, 1237, 1238, 1239, 1246, 1248, 1250, 1255, 1271, 1273, 1274, 1275, 1282, 1292, 1300, 1301], "07": [21, 118, 167, 302, 393, 394, 408, 421, 422, 436, 673, 731, 734, 742, 814, 901, 906, 990, 1021, 1246], "05": [21, 138, 141, 142, 143, 144, 148, 161, 167, 271, 302, 393, 394, 395, 396, 397, 402, 406, 408, 409, 411, 414, 415, 416, 421, 423, 425, 426, 428, 429, 731, 734, 807, 814, 837, 901, 906, 990, 991, 992, 993, 1021, 1022, 1025, 1026, 1028, 1029, 1036], "visibl": [22, 173, 302, 1044, 1292], "eg": [22, 30, 40, 89, 121, 155, 302, 422, 673, 675, 696, 789, 1060, 1246, 1248, 1292], "low": [22, 120, 589, 789, 1159, 1292], "rang": [22, 40, 120, 121, 167, 173, 189, 207, 302, 318, 385, 398, 413, 419, 420, 422, 436, 437, 470, 710, 716, 730, 731, 732, 733, 734, 735, 746, 747, 775, 776, 777, 789, 814, 828, 901, 982, 994, 1013, 1019, 1020, 1022, 1036, 1037, 1044, 1155, 1292], "98": [22, 199, 302, 360, 460, 463, 627, 676, 695, 789, 1249], "99": [22, 40, 176, 177, 199, 202, 270, 302, 311, 360, 450, 452, 460, 463, 627, 695, 779, 789, 822, 823, 873, 901, 1042, 1051, 1292], "tbl_col": 22, "95": [22, 311, 789], "96": [22, 167, 302, 311, 789, 814, 901, 1090, 1292], "97": [22, 199, 302, 311, 789, 1090, 1292], "move": [23, 239, 302, 444, 445, 446, 604, 605, 607, 611, 789, 1045, 1046, 1047, 1172, 1173, 1175, 1179, 1292], "inlin": [23, 239, 302, 632, 640, 641, 643, 656, 657, 1205, 1213, 1214, 1216, 1229, 1230], "parenthes": 23, "inform": [24, 28, 38, 86, 122, 130, 133, 134, 137, 141, 143, 165, 167, 302, 305, 487, 625, 632, 640, 641, 643, 656, 657, 789, 814, 851, 901, 905, 959, 1090, 1199, 1205, 1213, 1214, 1216, 1229, 1230, 1292, 1296], "below": [24, 39, 122, 123, 133, 134, 170, 227, 302, 452, 731, 732, 734, 735, 776, 777, 779, 785, 789, 817, 901], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 81, 114], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 640, 646, 1213, 1219], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 86, 112, 120, 122, 133, 134, 148, 160, 167, 173, 225, 239, 265, 266, 269, 270, 302, 384, 423, 467, 471, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 663, 664, 668, 669, 722, 726, 766, 767, 789, 805, 814, 870, 873, 901, 906, 981, 982, 1023, 1044, 1063, 1067, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1236, 1237, 1241, 1282, 1292], "divid": [25, 384, 422, 436, 444, 445, 446, 487, 589, 789, 981, 1022, 1036, 1045, 1046, 1047, 1090, 1159, 1292], "same": [25, 39, 40, 69, 72, 81, 87, 88, 89, 90, 91, 124, 132, 141, 142, 143, 144, 146, 155, 178, 188, 208, 212, 227, 238, 239, 250, 267, 275, 276, 280, 288, 302, 309, 316, 350, 389, 390, 453, 459, 460, 463, 531, 548, 551, 581, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 628, 647, 685, 789, 810, 811, 824, 827, 836, 841, 842, 865, 871, 876, 877, 881, 901, 908, 913, 945, 981, 985, 986, 990, 1132, 1141, 1159, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1220, 1272, 1283, 1292], "dens": [25, 187, 302, 592, 789, 1161, 1292], "space": [25, 189, 302, 828, 901], "horizont": [25, 89, 181, 197, 213, 214, 215, 216, 220, 221, 252, 253, 269, 302, 705, 707, 716, 717, 722, 723, 725, 726, 727, 729, 737, 740, 755, 757, 760, 764, 773], "markdown": 25, "compat": [25, 40, 45, 61, 302, 632, 634, 635, 640, 641, 642, 643, 656, 657, 901, 906, 1205, 1207, 1208, 1213, 1214, 1215, 1216, 1229, 1230], "utf8": [25, 118, 119, 132, 662, 1235], "No": [25, 680, 1253], "round": [25, 40, 83, 114, 120, 302, 365, 371, 456, 614, 692, 789, 962, 1056, 1182, 1292], "corner": [25, 40, 114, 302], "op": [25, 150, 302, 595, 789, 901, 1248, 1292], "one": [25, 37, 38, 40, 58, 70, 81, 98, 107, 109, 110, 111, 112, 113, 118, 119, 123, 127, 128, 129, 132, 149, 150, 151, 155, 161, 177, 178, 187, 188, 189, 190, 192, 193, 206, 218, 227, 236, 237, 238, 244, 246, 261, 264, 281, 302, 311, 346, 384, 452, 453, 460, 463, 524, 532, 537, 564, 565, 567, 569, 571, 572, 600, 601, 618, 627, 640, 641, 642, 658, 753, 769, 779, 785, 789, 807, 823, 824, 827, 828, 829, 831, 832, 846, 855, 860, 861, 878, 882, 901, 912, 941, 946, 981, 1053, 1086, 1125, 1133, 1138, 1159, 1169, 1191, 1213, 1214, 1215, 1231, 1256, 1273, 1292, 1296], "more": [25, 40, 43, 45, 61, 70, 81, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 141, 143, 148, 150, 155, 165, 167, 178, 205, 206, 210, 212, 218, 223, 237, 238, 240, 261, 267, 288, 302, 305, 314, 317, 352, 453, 487, 519, 533, 537, 542, 544, 580, 615, 625, 641, 647, 673, 674, 675, 697, 709, 719, 739, 745, 748, 756, 758, 761, 769, 779, 789, 814, 846, 871, 901, 905, 906, 913, 947, 959, 982, 1086, 1090, 1120, 1134, 1141, 1183, 1199, 1214, 1220, 1246, 1247, 1248, 1277, 1292, 1296, 1301], "semigraph": 25, "box": [25, 212, 302], "draw": [25, 30, 147, 1301], "found": [25, 37, 40, 58, 67, 93, 103, 105, 110, 114, 171, 302, 616, 643, 646, 671, 672, 673, 675, 789, 901, 1185, 1216, 1219, 1244, 1245, 1246, 1248, 1292, 1300], "unicod": [25, 648, 662, 1221, 1235], "block": [25, 88, 188, 191, 267, 302, 779, 811, 827, 830, 853, 871, 879, 880, 889, 901, 1184, 1187, 1292], "http": [25, 40, 41, 42, 108, 120, 121, 157, 165, 302, 640, 642, 1213, 1215], "en": [25, 40, 302], "wikipedia": 25, "org": [25, 41, 42, 108, 120, 121, 157, 165, 302], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 302], "etc": [26, 39, 40, 118, 122, 124, 126, 133, 134, 135, 302, 789, 905, 906, 1184, 1187, 1292], "between": [29, 89, 145, 146, 148, 150, 165, 229, 238, 294, 302, 339, 361, 387, 388, 471, 500, 509, 520, 521, 522, 523, 582, 589, 590, 608, 631, 711, 712, 718, 720, 763, 766, 767, 789, 852, 895, 901, 934, 955, 959, 983, 984, 1067, 1101, 1110, 1121, 1122, 1123, 1124, 1155, 1159, 1160, 1176, 1204, 1292], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 61, 65, 167, 177, 188, 214, 227, 236, 302, 367, 374, 379, 452, 532, 542, 581, 592, 596, 601, 604, 617, 665, 755, 769, 789, 814, 823, 827, 855, 901, 966, 972, 976, 982, 1053, 1133, 1161, 1172, 1189, 1238, 1292], "tbl_row": [30, 167, 302, 814, 901], "also": [32, 37, 40, 58, 70, 72, 110, 120, 123, 129, 132, 146, 147, 148, 149, 150, 155, 171, 188, 189, 190, 192, 193, 219, 223, 236, 238, 242, 250, 270, 275, 278, 302, 374, 377, 418, 421, 453, 471, 544, 592, 596, 604, 605, 606, 607, 608, 610, 611, 612, 628, 656, 657, 668, 669, 722, 723, 726, 727, 731, 740, 742, 764, 779, 788, 789, 795, 827, 828, 829, 831, 832, 847, 855, 857, 865, 873, 876, 878, 880, 901, 906, 1021, 1067, 1161, 1165, 1207, 1208, 1229, 1230, 1241, 1292, 1296], "char": [32, 641, 1214], "omit": [32, 110, 114, 146, 148, 150, 155, 223, 239, 302, 746, 747, 776, 777, 906], "set_decimal_separ": 32, "x": [32, 67, 68, 73, 81, 89, 108, 114, 118, 119, 121, 132, 146, 148, 157, 173, 197, 201, 203, 208, 218, 227, 238, 239, 266, 269, 302, 305, 310, 312, 314, 334, 339, 373, 385, 442, 443, 457, 462, 464, 465, 489, 496, 509, 537, 539, 541, 542, 544, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 580, 586, 587, 595, 596, 600, 622, 625, 664, 686, 687, 694, 696, 703, 705, 707, 711, 712, 722, 723, 725, 740, 750, 752, 755, 757, 760, 764, 773, 779, 789, 836, 842, 846, 864, 901, 906, 934, 959, 1053, 1088, 1141, 1165, 1196, 1199, 1237, 1275, 1292, 1300], "1234567": 32, "987654": [32, 906], "10101": 32, "y": [32, 73, 81, 89, 108, 114, 146, 148, 157, 173, 201, 203, 208, 218, 227, 238, 239, 266, 269, 302, 305, 310, 312, 314, 334, 339, 425, 428, 442, 443, 462, 464, 489, 496, 509, 539, 541, 544, 563, 565, 567, 569, 571, 572, 575, 576, 580, 587, 595, 596, 600, 673, 674, 675, 687, 696, 703, 705, 707, 711, 712, 725, 736, 750, 755, 757, 760, 773, 789, 836, 846, 864, 901, 906, 934, 959, 1025, 1028, 1165, 1246, 1247, 1248, 1292], "1234": [32, 614, 789, 1182, 1292], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 48, 148, 161, 189, 271, 302, 391, 392, 395, 400, 414, 415, 418, 421, 422, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 604, 605, 607, 610, 611, 612, 673, 675, 679, 734, 735, 736, 776, 777, 789, 807, 828, 837, 901, 906, 987, 988, 991, 992, 993, 996, 997, 998, 1004, 1005, 1011, 1014, 1015, 1016, 1018, 1021, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1246, 1248, 1252], "321": [32, 1301], "strip": [33, 651, 661, 668, 669, 670, 671, 672, 1224, 1234, 1241, 1242, 1243], "trail": [33, 187, 302, 661, 667, 668, 669, 1234, 1240, 1241, 1242], "zero": [33, 40, 107, 108, 117, 118, 119, 124, 126, 130, 147, 157, 177, 206, 237, 256, 261, 262, 302, 452, 532, 537, 616, 625, 682, 696, 789, 808, 823, 901, 964, 1053, 1133, 1199, 1255, 1268, 1273, 1274, 1292], "enabl": [33, 34, 72, 90, 91, 141, 142, 143, 144, 154, 242, 262, 275, 302, 313, 315, 596, 617, 633, 658, 700, 785, 789, 810, 857, 876, 901, 910, 911, 1165, 1189, 1206, 1231, 1274, 1280, 1292], "d": [33, 36, 37, 39, 40, 41, 42, 45, 110, 138, 187, 189, 194, 195, 199, 208, 254, 256, 269, 273, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 310, 312, 373, 401, 425, 428, 471, 585, 620, 635, 641, 656, 657, 664, 673, 674, 675, 715, 736, 742, 789, 828, 836, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 959, 997, 1025, 1028, 1067, 1097, 1208, 1214, 1229, 1230, 1237, 1246, 1247, 1248, 1259, 1292], "01": [33, 47, 48, 81, 148, 161, 167, 187, 189, 209, 236, 271, 302, 391, 392, 393, 394, 395, 396, 397, 401, 402, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 601, 604, 605, 607, 610, 611, 612, 673, 674, 675, 679, 731, 732, 734, 735, 736, 789, 807, 814, 828, 855, 901, 906, 988, 990, 991, 992, 993, 997, 998, 1004, 1005, 1011, 1014, 1015, 1016, 1018, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1246, 1247, 1248, 1252], "6789": 33, "scale": [33, 49, 173, 302, 544, 585, 676, 789, 1044, 1249, 1292], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 110, 122, 123, 133, 134, 146, 170, 174, 188, 191, 225, 242, 243, 244, 250, 262, 268, 275, 276, 280, 302, 310, 400, 447, 450, 581, 628, 632, 640, 641, 643, 656, 657, 713, 715, 716, 717, 738, 768, 771, 789, 820, 827, 830, 857, 858, 860, 865, 872, 876, 877, 881, 901, 987, 996, 1051, 1205, 1213, 1214, 1216, 1229, 1230, 1274, 1292, 1296], "verbos": [34, 141, 143, 155, 641, 1214], "debug": [34, 810, 821, 841, 842, 901, 1301], "log": [34, 83, 360, 441, 537, 562, 586, 695, 789, 954, 1042, 1276, 1292], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 68, 82, 84, 86, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 180, 206, 225, 231, 237, 238, 239, 241, 257, 258, 266, 302, 543, 789, 853, 856, 901, 905, 1055, 1140, 1292], "show": [35, 40, 69, 167, 170, 187, 210, 224, 302, 467, 789, 814, 817, 851, 863, 901, 1063, 1292], "variabl": [35, 62, 67, 130, 137, 149, 152, 218, 259, 302, 846, 901, 1269, 1292, 1300], "chang": [35, 41, 49, 51, 58, 59, 60, 61, 81, 87, 88, 118, 119, 120, 138, 269, 270, 271, 277, 302, 317, 383, 384, 387, 422, 467, 543, 544, 582, 589, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 789, 810, 811, 873, 879, 901, 905, 958, 959, 960, 980, 981, 1022, 1063, 1140, 1155, 1159, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1194, 1292], "restrict": [35, 665, 1238], "dictionari": [35, 40, 73, 86, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 131, 132, 136, 206, 225, 237, 238, 239, 257, 258, 302, 543, 789, 901, 1055, 1140, 1292], "those": [35, 40, 118, 123, 239, 262, 270, 302, 592, 640, 753, 789, 873, 901, 906, 1161, 1213, 1274, 1292], "been": [35, 40, 153, 157, 158, 179, 182, 190, 191, 192, 193, 198, 233, 255, 282, 283, 302, 317, 378, 379, 380, 381, 382, 459, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 544, 558, 587, 592, 602, 604, 605, 606, 607, 608, 610, 611, 612, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 687, 690, 691, 708, 728, 729, 751, 789, 829, 830, 831, 832, 841, 869, 883, 884, 901, 913, 976, 977, 978, 979, 1072, 1078, 1099, 1113, 1131, 1140, 1161, 1170, 1186, 1188, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1264, 1265, 1292], "set_fmt_float": 35, "via": [35, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 206, 238, 302, 317, 386, 544, 642, 789, 815, 901, 1215], "set_stat": 35, "all_stat": 35, "io": [36, 37, 40, 41, 42, 117, 118, 123, 124, 125, 126, 129, 130, 131, 134, 302, 386, 459, 555, 789, 815, 859, 901], "byte": [36, 37, 40, 41, 42, 45, 58, 61, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 173, 302, 647, 648, 649, 662, 901, 1044, 1220, 1221, 1222, 1235, 1292], "compress": [36, 41, 42, 45, 59, 61, 302, 599, 789, 901, 1168, 1292], "avrocompress": [36, 302], "uncompress": [36, 41, 42, 45, 61, 124, 135, 302, 901], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 61, 119, 124, 155, 302, 366, 558, 789, 839, 863, 901, 965, 1292], "apach": [36, 41, 42, 45, 117, 120, 121, 134, 302], "avro": [36, 117, 302, 801], "writabl": [36, 37, 41, 42, 43, 44, 45, 261, 302, 1273, 1292], "like": [36, 37, 39, 41, 42, 43, 44, 45, 88, 108, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 189, 201, 203, 208, 239, 261, 302, 386, 391, 459, 502, 557, 592, 640, 669, 670, 700, 785, 789, 811, 815, 828, 901, 905, 987, 1103, 1161, 1213, 1280, 1292], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 73, 89, 96, 108, 109, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 146, 148, 150, 157, 188, 189, 191, 192, 209, 210, 236, 239, 261, 262, 302, 386, 555, 731, 732, 734, 735, 750, 776, 777, 789, 801, 815, 828, 829, 831, 832, 837, 855, 901, 906, 1268, 1292], "snappi": [36, 45, 61, 302, 901], "deflat": [36, 302], "pathlib": [36, 37, 41, 42, 45, 132, 302], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 69, 161, 164, 165, 168, 169, 170, 171, 172, 175, 178, 181, 184, 185, 186, 194, 195, 196, 197, 199, 200, 202, 208, 212, 213, 214, 215, 216, 217, 220, 221, 224, 227, 229, 231, 232, 234, 237, 240, 241, 242, 245, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 266, 267, 268, 272, 273, 274, 279, 302, 362, 384, 386, 418, 461, 466, 469, 491, 548, 551, 552, 553, 554, 555, 556, 557, 589, 597, 631, 635, 637, 639, 641, 642, 659, 663, 665, 668, 669, 670, 671, 672, 678, 681, 689, 709, 718, 719, 720, 739, 743, 744, 745, 748, 749, 754, 756, 758, 759, 761, 763, 768, 770, 774, 778, 779, 785, 789, 807, 812, 816, 817, 818, 824, 834, 835, 836, 849, 853, 856, 857, 871, 872, 875, 878, 901, 906, 956, 981, 1018, 1110, 1159, 1166, 1208, 1210, 1212, 1214, 1215, 1232, 1238, 1244, 1245, 1251, 1254, 1292], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 69, 161, 164, 165, 168, 169, 170, 171, 172, 175, 178, 181, 184, 185, 186, 195, 197, 199, 200, 202, 208, 212, 213, 214, 215, 216, 217, 220, 221, 224, 227, 229, 231, 232, 234, 237, 240, 241, 242, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 267, 268, 272, 273, 279, 302, 362, 386, 469, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 625, 635, 637, 639, 641, 642, 659, 663, 665, 671, 672, 709, 718, 719, 720, 739, 744, 745, 748, 749, 754, 756, 758, 759, 761, 768, 770, 774, 778, 779, 785, 789, 807, 812, 816, 817, 818, 824, 834, 835, 836, 849, 853, 856, 857, 871, 872, 875, 901, 906, 956, 1110, 1199, 1208, 1210, 1212, 1214, 1215, 1232, 1238, 1244, 1245, 1292], "ham": [36, 37, 39, 41, 42, 45, 161, 164, 165, 168, 169, 170, 171, 172, 178, 185, 194, 195, 197, 208, 213, 215, 217, 220, 224, 229, 231, 234, 237, 240, 241, 242, 249, 251, 252, 254, 259, 260, 261, 262, 263, 267, 272, 273, 302, 362, 556, 807, 812, 816, 817, 818, 824, 836, 849, 853, 856, 857, 871, 878, 901, 956], "dirpath": [36, 37, 41, 42, 45, 132, 302], "new_fil": [36, 37, 41, 42, 45, 302], "include_bom": [37, 58, 302, 901], "include_head": [37, 40, 58, 119, 266, 302, 901], "line_termin": [37, 58, 302, 901], "quote_char": [37, 58, 118, 119, 132, 302, 901], "batch_siz": [37, 58, 118, 119, 120, 136, 138, 302, 901], "1024": [37, 45, 58, 61, 118, 119, 120, 136, 302, 901], "datetime_format": [37, 58, 302, 901], "date_format": [37, 58, 302, 901], "time_format": [37, 58, 302, 901], "null_valu": [37, 58, 118, 119, 132, 302, 901], "quote_styl": [37, 58, 302, 901], "csvquotestyl": [37, 58, 302, 901], "comma": [37, 302], "csv": [37, 58, 59, 60, 61, 118, 119, 123, 132, 302, 801, 901], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 58, 61, 65, 72, 86, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 149, 157, 158, 160, 170, 175, 187, 189, 190, 192, 193, 195, 204, 205, 206, 209, 211, 212, 216, 223, 225, 227, 236, 238, 239, 240, 246, 249, 253, 254, 258, 259, 261, 265, 266, 267, 269, 270, 279, 302, 313, 315, 317, 339, 346, 351, 394, 395, 414, 415, 425, 428, 453, 467, 471, 487, 509, 519, 524, 525, 532, 542, 544, 555, 556, 581, 589, 592, 594, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 621, 625, 626, 631, 641, 642, 643, 644, 645, 651, 661, 662, 663, 664, 665, 667, 668, 669, 670, 673, 674, 675, 679, 682, 700, 704, 706, 708, 710, 714, 717, 718, 721, 722, 731, 732, 734, 735, 736, 739, 740, 746, 747, 748, 750, 753, 762, 765, 766, 767, 771, 776, 777, 779, 780, 789, 805, 810, 811, 817, 819, 828, 829, 831, 832, 836, 837, 842, 846, 853, 855, 859, 861, 864, 870, 871, 873, 883, 889, 901, 905, 906, 910, 911, 913, 934, 941, 946, 965, 981, 990, 991, 1014, 1015, 1025, 1028, 1050, 1060, 1062, 1063, 1067, 1089, 1090, 1092, 1110, 1120, 1125, 1126, 1133, 1141, 1159, 1161, 1163, 1165, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1185, 1189, 1191, 1195, 1199, 1200, 1204, 1214, 1215, 1216, 1217, 1218, 1224, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1252, 1255, 1263, 1268, 1273, 1280, 1282, 1292, 1300], "instead": [37, 39, 43, 44, 65, 69, 81, 88, 89, 109, 110, 113, 118, 119, 120, 123, 129, 130, 132, 138, 148, 159, 187, 189, 205, 206, 209, 212, 223, 225, 237, 238, 239, 242, 243, 246, 247, 261, 262, 275, 276, 277, 279, 302, 305, 327, 346, 367, 368, 384, 397, 399, 403, 407, 410, 412, 417, 421, 424, 436, 447, 524, 542, 555, 589, 618, 619, 647, 648, 651, 656, 657, 661, 667, 668, 669, 670, 671, 672, 673, 675, 682, 702, 710, 714, 719, 731, 732, 733, 734, 735, 736, 739, 746, 747, 748, 762, 765, 771, 776, 777, 780, 789, 804, 811, 822, 828, 857, 858, 859, 861, 862, 876, 877, 879, 901, 906, 922, 941, 950, 966, 967, 981, 993, 995, 999, 1006, 1009, 1012, 1017, 1021, 1024, 1036, 1068, 1074, 1077, 1084, 1086, 1088, 1125, 1159, 1184, 1187, 1191, 1192, 1201, 1220, 1221, 1224, 1229, 1230, 1234, 1240, 1241, 1242, 1243, 1246, 1248, 1255, 1273, 1274, 1292, 1296, 1300], "whether": [37, 58, 111, 113, 150, 154, 160, 172, 182, 189, 190, 192, 193, 205, 209, 236, 244, 265, 302, 313, 315, 330, 331, 404, 423, 492, 493, 601, 617, 789, 805, 828, 829, 831, 832, 841, 842, 855, 860, 865, 870, 901, 906, 910, 911, 925, 926, 957, 960, 1000, 1023, 1043, 1093, 1094, 1186, 1292, 1300], "utf": [37, 58, 71, 302, 901], "bom": [37, 58, 302, 901], "header": [37, 40, 45, 58, 61, 114, 118, 119, 123, 132, 171, 227, 266, 302, 901], "field": [37, 39, 58, 73, 103, 105, 110, 268, 302, 351, 532, 566, 568, 570, 599, 641, 642, 644, 664, 665, 685, 722, 723, 726, 727, 752, 771, 789, 872, 901, 946, 981, 1133, 1159, 1168, 1215, 1237, 1238, 1259, 1261, 1292], "symbol": [37, 58, 118, 119, 132, 302, 789, 901], "end": [37, 40, 58, 118, 119, 130, 132, 189, 302, 355, 358, 359, 391, 422, 447, 525, 632, 638, 641, 653, 662, 666, 668, 669, 672, 710, 731, 732, 734, 735, 738, 746, 747, 776, 777, 779, 789, 828, 833, 840, 851, 901, 906, 952, 987, 1022, 1126, 1211, 1214, 1226, 1235, 1239, 1241, 1242], "quot": [37, 38, 58, 118, 119, 121, 132, 302, 901], "specifi": [37, 39, 40, 58, 81, 93, 103, 105, 123, 129, 148, 160, 161, 173, 174, 177, 188, 189, 190, 191, 192, 193, 208, 225, 236, 237, 239, 242, 243, 244, 246, 250, 265, 268, 275, 276, 280, 302, 366, 444, 445, 446, 447, 452, 581, 595, 596, 604, 605, 606, 607, 608, 610, 611, 612, 618, 628, 713, 715, 716, 717, 731, 732, 734, 735, 736, 738, 768, 771, 776, 777, 789, 805, 807, 820, 823, 827, 828, 829, 830, 831, 832, 836, 855, 857, 858, 860, 861, 865, 870, 872, 876, 877, 881, 901, 965, 1044, 1045, 1046, 1047, 1053, 1165, 1191, 1292], "defin": [37, 40, 48, 58, 120, 145, 146, 148, 158, 161, 170, 174, 189, 190, 192, 193, 212, 223, 226, 236, 270, 282, 288, 302, 317, 471, 505, 530, 544, 585, 589, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 648, 662, 708, 731, 732, 734, 735, 753, 771, 776, 777, 789, 807, 817, 820, 828, 829, 831, 832, 850, 855, 873, 883, 889, 901, 906, 913, 1067, 1106, 1141, 1159, 1169, 1221, 1235, 1292], "chrono": [37, 58, 302, 425, 428, 673, 674, 675, 679, 901, 1025, 1028, 1246, 1247, 1248, 1252], "rust": [37, 45, 58, 100, 124, 126, 130, 212, 288, 302, 642, 901, 905, 1141, 1215, 1292], "crate": [37, 58, 302, 632, 634, 635, 640, 641, 642, 643, 656, 657, 673, 674, 675, 679, 901, 906, 1205, 1207, 1208, 1213, 1214, 1215, 1216, 1229, 1230, 1246, 1247, 1248, 1252], "fraction": [37, 58, 141, 142, 143, 144, 240, 302, 423, 519, 582, 615, 673, 675, 789, 901, 1023, 1120, 1155, 1183, 1246, 1248, 1292], "second": [37, 58, 141, 142, 143, 144, 147, 189, 209, 236, 271, 302, 402, 406, 409, 411, 416, 418, 422, 435, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 656, 657, 673, 675, 731, 732, 733, 734, 735, 736, 775, 776, 777, 779, 789, 828, 837, 855, 901, 906, 1018, 1022, 1035, 1036, 1229, 1230, 1246, 1248, 1301], "infer": [37, 49, 58, 73, 107, 109, 110, 111, 112, 113, 118, 119, 120, 123, 127, 128, 130, 132, 136, 137, 158, 212, 302, 422, 436, 542, 544, 597, 644, 645, 673, 674, 675, 676, 679, 736, 750, 765, 789, 901, 1022, 1036, 1141, 1166, 1217, 1218, 1246, 1247, 1248, 1249, 1252, 1292], "timeunit": [37, 48, 50, 58, 302, 392, 394, 427, 439, 675, 731, 732, 733, 734, 735, 736, 901, 906, 988, 990, 1027, 1039, 1248], "frame": [37, 38, 40, 58, 65, 66, 67, 68, 69, 70, 81, 88, 89, 110, 119, 123, 129, 141, 142, 148, 161, 162, 167, 206, 207, 212, 219, 223, 226, 237, 238, 239, 269, 270, 302, 807, 808, 814, 847, 850, 873, 901, 906, 964, 1292, 1300, 1301], "repres": [37, 40, 47, 48, 50, 58, 63, 74, 79, 107, 109, 111, 112, 113, 120, 123, 251, 272, 279, 302, 480, 482, 527, 534, 542, 630, 648, 662, 701, 704, 718, 720, 736, 738, 750, 752, 753, 766, 767, 770, 778, 785, 789, 866, 874, 901, 1184, 1188, 1203, 1221, 1235, 1281, 1292], "necessari": [37, 58, 72, 91, 123, 261, 302, 901], "non_numer": [37, 58, 302, 901], "never": [37, 58, 120, 208, 237, 302, 836, 901], "strategi": [37, 58, 81, 89, 118, 145, 146, 147, 148, 150, 177, 189, 192, 208, 209, 222, 270, 302, 317, 452, 532, 544, 789, 823, 828, 831, 836, 837, 873, 901, 1053, 1133, 1292], "put": [37, 58, 302, 901], "around": [37, 58, 302, 901], "thei": [37, 40, 58, 72, 88, 89, 90, 91, 110, 132, 155, 210, 239, 302, 658, 669, 670, 789, 901, 905, 906], "record": [37, 42, 58, 126, 138, 261, 302, 837, 901], "termin": [37, 58, 302, 901], "indistinguish": [37, 58, 302, 901], "even": [37, 58, 118, 302, 585, 589, 789, 901, 1159, 1292], "invalid": [37, 58, 118, 119, 132, 302, 644, 646, 677, 696, 789, 901, 950, 1217, 1219, 1250], "g": [37, 58, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 138, 157, 205, 261, 269, 302, 310, 317, 386, 447, 544, 620, 738, 789, 815, 853, 901, 1043, 1186, 1292, 1301], "pars": [37, 58, 65, 118, 119, 121, 123, 128, 132, 135, 136, 160, 188, 191, 242, 243, 246, 250, 265, 275, 276, 280, 302, 366, 471, 543, 581, 596, 628, 644, 645, 655, 676, 677, 705, 707, 713, 715, 716, 717, 725, 729, 742, 755, 757, 760, 768, 769, 771, 773, 779, 789, 805, 827, 830, 857, 858, 861, 865, 870, 876, 877, 881, 901, 965, 1067, 1165, 1191, 1217, 1218, 1228, 1248, 1249, 1250, 1292], "valid": [37, 40, 48, 58, 65, 120, 124, 126, 130, 150, 155, 173, 208, 302, 383, 632, 634, 635, 640, 641, 642, 643, 646, 656, 657, 779, 789, 836, 901, 906, 980, 1044, 1060, 1205, 1207, 1208, 1213, 1214, 1215, 1216, 1219, 1229, 1230, 1292], "integ": [37, 40, 47, 48, 50, 54, 55, 56, 57, 58, 74, 75, 76, 77, 78, 139, 146, 148, 149, 151, 170, 189, 236, 259, 302, 314, 365, 423, 456, 457, 580, 589, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 655, 677, 703, 710, 742, 746, 747, 765, 789, 817, 828, 855, 901, 906, 962, 1023, 1056, 1077, 1159, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1188, 1228, 1250, 1292, 1300, 1301], "aren": [37, 58, 302, 901], "t": [37, 39, 58, 67, 68, 89, 118, 123, 129, 132, 189, 209, 212, 226, 267, 269, 302, 317, 383, 391, 400, 421, 441, 444, 445, 446, 502, 544, 581, 585, 640, 643, 656, 657, 670, 673, 675, 779, 789, 828, 850, 871, 901, 906, 980, 1021, 1042, 1043, 1045, 1046, 1047, 1103, 1141, 1186, 1213, 1216, 1229, 1230, 1242, 1243, 1246, 1248, 1282, 1292], "strictli": [37, 58, 72, 91, 302, 821, 901], "table_nam": [38, 40, 302], "connect": [38, 118, 120, 121, 124, 126, 130, 135, 137, 138, 302, 802], "if_table_exist": [38, 302], "dbwritemod": [38, 302], "fail": [38, 39, 108, 122, 124, 128, 130, 133, 135, 136, 137, 141, 142, 157, 261, 267, 302, 328, 426, 532, 673, 674, 675, 679, 789, 871, 901, 1141, 1246, 1247, 1248, 1252, 1273, 1292], "dbwriteengin": [38, 302], "sqlalchemi": [38, 120, 140, 302], "databas": [38, 120, 121, 302, 801], "qualifi": [38, 302], "creat": [38, 40, 72, 91, 107, 111, 113, 118, 119, 120, 121, 124, 126, 130, 133, 134, 146, 147, 148, 149, 150, 151, 162, 163, 189, 190, 193, 224, 227, 236, 261, 271, 275, 278, 302, 394, 422, 436, 532, 593, 601, 604, 605, 607, 610, 611, 612, 716, 730, 731, 732, 733, 734, 735, 736, 775, 776, 777, 785, 789, 808, 809, 814, 819, 828, 829, 832, 855, 876, 880, 901, 964, 968, 981, 990, 1022, 1036, 1152, 1159, 1162, 1273, 1292, 1300, 1301], "append": [38, 39, 148, 175, 208, 209, 302, 593, 779, 789, 836, 837, 901, 1050, 1292], "your": [38, 40, 72, 81, 91, 118, 119, 120, 121, 123, 138, 206, 212, 238, 239, 242, 258, 275, 280, 288, 302, 317, 395, 459, 544, 642, 673, 674, 675, 682, 753, 789, 833, 840, 842, 857, 876, 881, 889, 901, 991, 1141, 1215, 1246, 1247, 1248, 1255, 1292, 1301], "special": [38, 118, 119, 121, 132, 278, 302, 603, 641, 656, 657, 789, 880, 901, 913, 1141, 1171, 1214, 1229, 1230, 1292], "uri": [38, 39, 120, 121, 122, 133, 134, 302], "postgresql": [38, 120, 121, 302, 581, 789], "user": [38, 120, 121, 158, 212, 226, 282, 288, 302, 317, 542, 544, 585, 617, 708, 753, 789, 850, 883, 889, 901, 905, 913, 1141, 1189, 1292], "pass": [38, 39, 40, 45, 68, 81, 109, 120, 121, 123, 130, 132, 137, 138, 141, 143, 146, 148, 150, 160, 165, 168, 188, 189, 192, 195, 211, 225, 226, 236, 242, 246, 250, 254, 262, 265, 271, 275, 279, 280, 302, 305, 317, 346, 401, 418, 421, 450, 469, 524, 543, 544, 581, 585, 596, 601, 604, 605, 606, 607, 608, 610, 611, 612, 618, 628, 668, 669, 670, 704, 713, 721, 731, 742, 771, 779, 785, 789, 805, 816, 827, 828, 829, 831, 832, 834, 841, 842, 850, 855, 857, 861, 863, 865, 870, 876, 881, 889, 901, 905, 913, 941, 997, 1021, 1051, 1062, 1092, 1125, 1140, 1141, 1165, 1191, 1241, 1242, 1243, 1263, 1274, 1292, 1296], "server": [38, 120, 121, 302], "port": [38, 118, 120, 121, 124, 126, 135, 302], "sqlite": [38, 120, 302], "db": [38, 120, 121, 302], "replac": [38, 39, 118, 119, 132, 176, 177, 233, 234, 266, 275, 276, 302, 394, 421, 542, 543, 657, 658, 789, 822, 876, 877, 901, 990, 1021, 1140, 1184, 1187, 1188, 1230, 1231, 1292], "insert": [38, 118, 119, 124, 126, 130, 132, 135, 136, 137, 198, 199, 232, 266, 268, 302, 616, 631, 682, 789, 872, 901, 1185, 1204, 1255, 1292], "mode": [38, 39, 58, 59, 60, 61, 65, 87, 88, 141, 143, 227, 302, 641, 762, 765, 780, 789, 810, 811, 901, 1214, 1292, 1300], "new": [38, 39, 40, 123, 132, 155, 183, 197, 198, 199, 212, 223, 224, 231, 232, 255, 266, 268, 269, 270, 275, 276, 302, 312, 394, 449, 459, 461, 470, 541, 565, 566, 596, 600, 656, 657, 664, 665, 683, 685, 691, 785, 789, 801, 826, 853, 869, 872, 873, 876, 877, 883, 889, 901, 909, 990, 1049, 1058, 1152, 1164, 1165, 1169, 1229, 1230, 1237, 1238, 1256, 1259, 1265, 1270, 1292, 1300], "alreadi": [38, 39, 302, 383, 502, 700, 789, 980, 1103, 1280, 1292], "adbc": [38, 120, 121, 302], "affect": [38, 141, 142, 143, 144, 302], "driver": [38, 120, 121, 302], "provid": [38, 40, 68, 118, 119, 121, 122, 130, 132, 133, 134, 137, 148, 150, 178, 204, 302, 356, 357, 447, 467, 532, 542, 544, 636, 637, 640, 644, 646, 669, 670, 671, 672, 739, 742, 771, 789, 801, 824, 901, 950, 951, 1063, 1089, 1141, 1209, 1210, 1213, 1217, 1219, 1292, 1300, 1301], "otherwis": [38, 120, 123, 147, 152, 212, 219, 239, 242, 288, 302, 351, 356, 366, 384, 444, 445, 446, 532, 544, 552, 585, 589, 594, 605, 606, 607, 608, 610, 612, 632, 636, 643, 648, 662, 704, 736, 753, 779, 789, 847, 857, 889, 901, 946, 950, 965, 981, 1045, 1046, 1047, 1133, 1141, 1159, 1163, 1184, 1187, 1205, 1209, 1216, 1221, 1235, 1292], "deltalak": [39, 122, 133, 140, 302], "deltat": [39, 302], "ignor": [39, 120, 147, 148, 150, 215, 216, 252, 253, 270, 302, 313, 315, 339, 387, 421, 444, 445, 446, 500, 509, 573, 574, 631, 704, 706, 717, 789, 910, 911, 934, 983, 1021, 1045, 1046, 1047, 1101, 1110, 1150, 1151, 1204, 1292], "merg": [39, 219, 302, 847, 901], "overwrite_schema": [39, 302], "storage_opt": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 302], "delta_write_opt": [39, 302], "delta_merge_opt": [39, 302], "tablemerg": [39, 302], "delta": [39, 122, 133, 251, 272, 302, 527, 534, 610, 612, 630, 701, 718, 720, 766, 767, 770, 778, 789, 801, 866, 874, 901, 1178, 1180, 1203, 1281, 1292], "handl": [39, 87, 88, 89, 114, 118, 119, 132, 138, 302, 387, 500, 682, 789, 810, 811, 901, 905, 983, 1101, 1255, 1292], "throw": [39, 109, 110, 113, 161, 302, 361, 644, 646, 789, 807, 901, 955, 1217, 1219, 1292], "add": [39, 40, 119, 175, 189, 192, 212, 275, 276, 277, 278, 302, 384, 567, 568, 569, 570, 587, 589, 687, 736, 740, 779, 789, 828, 831, 836, 876, 877, 878, 879, 880, 901, 1050, 1292], "anyth": [39, 237, 302], "updat": [39, 167, 302, 814, 901], "deprec": [39, 91, 92, 153, 158, 159, 179, 182, 189, 190, 191, 192, 193, 198, 213, 215, 220, 233, 247, 252, 255, 277, 282, 283, 302, 317, 367, 368, 378, 379, 380, 381, 382, 397, 399, 403, 407, 410, 412, 417, 421, 422, 424, 436, 439, 459, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 558, 587, 602, 619, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 673, 675, 687, 690, 691, 702, 708, 719, 728, 729, 731, 733, 751, 789, 804, 828, 829, 830, 831, 832, 841, 862, 869, 879, 883, 884, 901, 913, 958, 966, 967, 976, 977, 978, 979, 981, 993, 995, 999, 1006, 1009, 1012, 1017, 1021, 1022, 1024, 1036, 1039, 1068, 1072, 1074, 1077, 1078, 1084, 1086, 1088, 1099, 1113, 1131, 1140, 1159, 1170, 1186, 1188, 1192, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1246, 1248, 1264, 1265, 1272, 1273, 1282, 1292], "sinc": [39, 47, 48, 74, 91, 120, 122, 133, 153, 158, 159, 160, 179, 182, 189, 190, 191, 192, 193, 198, 213, 215, 220, 233, 247, 252, 255, 265, 277, 282, 283, 302, 317, 367, 368, 378, 379, 380, 381, 382, 397, 399, 401, 403, 407, 410, 412, 417, 421, 422, 424, 436, 439, 459, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 558, 587, 602, 619, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 673, 675, 687, 690, 691, 702, 708, 728, 729, 731, 733, 742, 751, 789, 804, 805, 828, 829, 830, 831, 832, 841, 862, 865, 869, 870, 879, 883, 884, 901, 913, 958, 966, 967, 976, 977, 978, 979, 981, 993, 995, 997, 999, 1006, 1009, 1012, 1017, 1021, 1022, 1024, 1036, 1039, 1068, 1072, 1074, 1077, 1078, 1084, 1086, 1088, 1099, 1113, 1131, 1140, 1159, 1170, 1186, 1188, 1192, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1246, 1248, 1264, 1265, 1272, 1273, 1282, 1292], "version": [39, 86, 91, 122, 123, 133, 140, 153, 157, 158, 159, 179, 182, 189, 190, 191, 192, 193, 194, 198, 213, 215, 220, 233, 247, 252, 255, 277, 282, 283, 302, 317, 367, 368, 378, 379, 380, 381, 382, 397, 399, 403, 407, 410, 412, 414, 415, 417, 421, 422, 424, 436, 439, 459, 465, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 558, 587, 602, 619, 633, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 673, 675, 687, 690, 691, 702, 708, 728, 729, 731, 733, 751, 764, 789, 804, 828, 829, 830, 831, 832, 841, 862, 869, 879, 883, 884, 901, 913, 958, 966, 967, 976, 977, 978, 979, 981, 993, 995, 999, 1006, 1009, 1012, 1014, 1015, 1017, 1021, 1022, 1024, 1036, 1039, 1061, 1068, 1072, 1074, 1077, 1078, 1084, 1086, 1088, 1099, 1113, 1131, 1140, 1159, 1170, 1186, 1188, 1192, 1206, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1246, 1248, 1264, 1265, 1272, 1273, 1282, 1292], "20": [39, 40, 118, 123, 140, 148, 153, 159, 167, 175, 197, 199, 219, 226, 228, 232, 234, 283, 302, 325, 326, 327, 387, 393, 396, 397, 402, 406, 408, 409, 411, 416, 422, 423, 426, 436, 439, 459, 465, 470, 558, 585, 604, 605, 607, 610, 611, 612, 702, 742, 750, 776, 789, 804, 814, 847, 850, 884, 901, 906, 983, 989, 993, 1007, 1022, 1036, 1039, 1048, 1273, 1292], "14": [39, 140, 148, 167, 179, 198, 212, 213, 215, 220, 233, 252, 255, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 378, 379, 380, 381, 382, 391, 396, 397, 402, 406, 409, 411, 416, 423, 426, 470, 530, 592, 655, 690, 691, 728, 729, 776, 789, 814, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 906, 976, 977, 978, 979, 987, 1022, 1068, 1088, 1131, 1188, 1228, 1264, 1265, 1282, 1292], "schema_mod": [39, 302], "extra": [39, 45, 61, 118, 119, 122, 123, 124, 126, 132, 133, 134, 135, 175, 189, 302, 789, 828, 901, 905, 1050, 1292], "storag": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 302], "backend": [39, 120, 121, 122, 133, 134, 302], "cloud": [39, 120, 122, 130, 133, 134, 135, 137, 138, 302], "configur": [39, 122, 133, 134, 155, 302], "authent": [39, 122, 133, 134, 302], "see": [39, 40, 41, 42, 48, 87, 88, 120, 121, 122, 123, 130, 133, 134, 137, 141, 142, 143, 144, 148, 150, 165, 189, 208, 226, 227, 302, 305, 366, 452, 487, 542, 625, 632, 640, 641, 643, 656, 657, 731, 732, 734, 735, 764, 776, 777, 785, 789, 810, 811, 828, 901, 905, 906, 959, 965, 1090, 1199, 1205, 1213, 1214, 1216, 1229, 1230, 1292, 1296, 1301], "here": [39, 40, 45, 107, 109, 110, 111, 113, 120, 121, 122, 127, 128, 130, 133, 134, 136, 137, 146, 148, 150, 302, 544, 642, 646, 789, 901, 1219], "gc": [39, 122, 133, 134, 302], "azur": [39, 122, 130, 133, 134, 137, 302], "keyword": [39, 68, 122, 130, 133, 165, 188, 226, 237, 242, 243, 262, 275, 276, 280, 302, 453, 585, 768, 771, 779, 789, 827, 850, 857, 858, 876, 877, 881, 901, 1274, 1292], "argument": [39, 45, 91, 118, 122, 130, 132, 133, 165, 168, 174, 188, 189, 190, 191, 192, 193, 213, 215, 220, 225, 226, 227, 236, 242, 243, 244, 250, 252, 262, 268, 271, 275, 276, 280, 302, 422, 436, 447, 453, 471, 581, 585, 601, 604, 605, 606, 607, 608, 610, 611, 612, 628, 668, 669, 670, 704, 711, 712, 713, 715, 716, 717, 719, 721, 738, 768, 771, 779, 789, 816, 820, 827, 828, 829, 830, 831, 832, 850, 855, 857, 858, 860, 865, 872, 876, 877, 881, 901, 905, 1022, 1036, 1067, 1241, 1242, 1243, 1274, 1292], "while": [39, 88, 119, 122, 123, 133, 148, 150, 155, 206, 218, 266, 270, 302, 648, 811, 846, 873, 901, 1060, 1221, 1292], "lake": [39, 122, 133, 302, 801], "typeerror": [39, 302], "unsupport": [39, 302], "arrowinvaliderror": [39, 302], "could": [39, 79, 94, 123, 161, 302, 361, 722, 726, 736, 740, 789, 807, 814, 817, 901, 955, 1060, 1292], "primit": [39, 302, 476, 789], "tablenotfounderror": [39, 302], "doesn": [39, 118, 132, 189, 209, 302, 441, 789, 828, 901, 1042, 1282, 1292], "action": [39, 302], "trigger": [39, 262, 302, 789, 905, 1274, 1292], "categor": [39, 51, 72, 90, 91, 141, 142, 143, 144, 208, 259, 302, 362, 363, 384, 589, 596, 694, 789, 906, 956, 957, 958, 959, 960, 981, 1159, 1165, 1275, 1292], "protocol": [39, 108, 121, 157, 302], "nullabl": [39, 302], "To": [39, 88, 176, 213, 215, 220, 252, 302, 366, 389, 390, 452, 632, 640, 641, 643, 656, 657, 669, 670, 671, 672, 680, 789, 822, 901, 965, 985, 986, 1060, 1205, 1213, 1214, 1216, 1229, 1230, 1253, 1273, 1292], "pyarrow": [39, 45, 107, 112, 118, 121, 122, 124, 126, 130, 133, 138, 140, 256, 261, 262, 302, 801, 1268, 1272, 1273, 1274, 1292], "ha": [39, 40, 81, 88, 112, 120, 123, 132, 153, 157, 158, 179, 182, 189, 190, 191, 192, 193, 198, 233, 236, 255, 271, 277, 282, 283, 302, 317, 360, 378, 379, 380, 381, 382, 383, 459, 474, 478, 481, 486, 498, 512, 530, 540, 541, 542, 543, 553, 558, 587, 602, 604, 605, 606, 607, 608, 610, 611, 612, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 687, 690, 691, 695, 708, 728, 729, 739, 748, 751, 785, 789, 811, 828, 829, 830, 831, 832, 841, 855, 869, 879, 883, 884, 889, 901, 913, 954, 964, 976, 977, 978, 979, 980, 982, 1060, 1072, 1074, 1078, 1099, 1113, 1131, 1140, 1170, 1186, 1188, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1264, 1265, 1276, 1292], "last": [39, 141, 142, 143, 144, 160, 195, 209, 211, 227, 239, 250, 254, 265, 267, 296, 302, 327, 338, 347, 383, 398, 414, 419, 437, 478, 479, 486, 507, 526, 529, 532, 564, 565, 567, 569, 571, 572, 587, 627, 665, 687, 689, 774, 789, 805, 837, 865, 868, 870, 871, 897, 901, 906, 922, 933, 942, 980, 994, 1014, 1019, 1037, 1062, 1078, 1079, 1092, 1108, 1127, 1130, 1201, 1238, 1263, 1292], "filesystem": [39, 122, 133, 134, 302], "table_path": [39, 122, 133, 134, 302], "match": [39, 40, 48, 89, 101, 107, 109, 110, 111, 113, 120, 127, 128, 136, 141, 142, 143, 144, 161, 177, 208, 209, 237, 270, 302, 550, 596, 609, 632, 633, 634, 635, 638, 640, 641, 643, 644, 646, 656, 657, 658, 666, 673, 674, 675, 779, 789, 807, 823, 836, 837, 873, 901, 906, 1077, 1086, 1165, 1177, 1205, 1206, 1207, 1208, 1211, 1213, 1214, 1216, 1217, 1219, 1229, 1230, 1231, 1239, 1246, 1247, 1248, 1292], "old": [39, 231, 302, 596, 789, 853, 901, 1165, 1292], "existing_table_path": [39, 302], "store": [39, 118, 130, 134, 175, 206, 238, 302, 362, 599, 789, 956, 1050, 1168, 1292], "bucket": [39, 122, 133, 134, 137, 302, 422, 436, 467, 789, 1022, 1036, 1063, 1292], "prefix": [39, 155, 302, 312, 359, 541, 565, 568, 569, 571, 572, 666, 670, 671, 682, 687, 789, 906, 953, 1239, 1244, 1255], "aws_region": [39, 133, 137, 302], "the_aws_region": [39, 302], "aws_access_key_id": [39, 122, 133, 137, 302], "the_aws_access_key_id": [39, 122, 133, 134, 302], "aws_secret_access_kei": [39, 122, 133, 137, 302], "the_aws_secret_access_kei": [39, 122, 133, 134, 302], "pa": [39, 107, 138, 302], "check": [39, 48, 118, 119, 132, 141, 142, 143, 144, 154, 172, 182, 189, 190, 192, 193, 202, 204, 208, 236, 302, 334, 355, 358, 359, 471, 476, 497, 601, 632, 638, 643, 666, 789, 828, 829, 831, 832, 836, 841, 842, 855, 901, 929, 949, 952, 953, 1043, 1068, 1070, 1074, 1075, 1077, 1084, 1085, 1086, 1088, 1089, 1098, 1186, 1205, 1211, 1216, 1239, 1292], "doc": [39, 41, 42, 121, 141, 143, 165, 302], "predic": [39, 58, 59, 60, 61, 87, 88, 132, 135, 136, 137, 138, 178, 204, 237, 302, 453, 702, 740, 779, 789, 810, 811, 819, 821, 824, 841, 842, 851, 853, 863, 879, 880, 901, 1054, 1184, 1187, 1292], "source_alia": [39, 302], "target_alia": [39, 302], "when_matched_update_al": [39, 302], "when_not_matched_insert_al": [39, 302], "execut": [39, 66, 67, 69, 72, 89, 120, 121, 210, 302, 502, 700, 789, 806, 841, 842, 851, 901, 905, 1103, 1280, 1292, 1300], "workbook": [40, 123, 302], "worksheet": [40, 123, 129, 302], "posit": [40, 168, 174, 188, 191, 225, 242, 243, 244, 246, 250, 268, 275, 276, 280, 302, 346, 444, 445, 446, 447, 524, 581, 589, 618, 628, 642, 643, 655, 656, 657, 677, 711, 712, 713, 715, 716, 717, 738, 768, 771, 789, 816, 820, 827, 830, 857, 858, 860, 861, 865, 872, 876, 877, 881, 901, 941, 1045, 1046, 1047, 1125, 1159, 1191, 1215, 1228, 1250, 1292], "tupl": [40, 121, 123, 129, 158, 206, 212, 225, 237, 238, 239, 245, 279, 302, 597, 789, 851, 863, 901, 906, 1166, 1292], "a1": [40, 82, 84, 302], "table_styl": [40, 302], "column_format": [40, 302], "columnformatdict": [40, 302], "dtype_format": [40, 302], "oneormoredatatyp": [40, 146, 302, 1086, 1292], "conditional_format": [40, 302], "conditionalformatdict": [40, 302], "header_format": [40, 302], "column_tot": [40, 302], "columntotalsdefinit": [40, 302], "column_width": [40, 302], "columnwidthsdefinit": [40, 302], "row_tot": [40, 302], "rowtotalsdefinit": [40, 302], "row_height": [40, 302], "sparklin": [40, 302], "sequenc": [40, 73, 81, 107, 109, 110, 111, 113, 118, 119, 120, 123, 127, 128, 129, 132, 136, 146, 147, 148, 160, 167, 174, 175, 208, 209, 218, 223, 225, 226, 227, 239, 250, 259, 265, 269, 270, 271, 302, 351, 384, 476, 532, 540, 542, 585, 589, 596, 628, 671, 672, 685, 708, 713, 722, 723, 726, 727, 740, 742, 751, 752, 753, 764, 769, 789, 805, 814, 820, 836, 837, 846, 850, 865, 870, 873, 901, 946, 981, 982, 1050, 1133, 1159, 1165, 1188, 1259, 1292], "formula": [40, 302, 441, 789, 1042, 1292], "autofilt": [40, 302], "autofit": [40, 302], "hidden_column": [40, 302], "selectortyp": [40, 302, 906], "hide_gridlin": [40, 302], "sheet_zoom": [40, 302], "freeze_pan": [40, 302], "excel": [40, 123, 302, 801], "bytesio": [40, 41, 42, 45, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 302, 386, 789, 815, 901], "open": [40, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 302, 386, 789, 815, 901], "xlsxwriter": [40, 140, 302], "close": [40, 120, 189, 190, 192, 193, 236, 302, 384, 471, 537, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 625, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 855, 901, 981, 1067, 1159, 1199, 1292], "xlsx": [40, 123, 302], "work": [40, 49, 51, 119, 138, 232, 243, 276, 302, 313, 315, 317, 352, 365, 366, 447, 456, 502, 533, 542, 544, 564, 565, 567, 569, 571, 572, 581, 647, 648, 662, 697, 789, 858, 877, 901, 906, 910, 911, 947, 962, 965, 1056, 1103, 1134, 1220, 1221, 1235, 1277, 1292], "directori": [40, 45, 130, 302, 905], "sheet1": [40, 302], "medium": [40, 302], "kei": [40, 81, 86, 89, 130, 134, 137, 189, 206, 208, 209, 219, 225, 227, 231, 235, 238, 239, 270, 279, 302, 453, 544, 596, 771, 789, 821, 828, 836, 837, 847, 853, 854, 873, 901, 1165, 1292], "follow": [40, 45, 86, 118, 119, 120, 122, 132, 133, 134, 141, 189, 209, 212, 226, 236, 271, 302, 418, 422, 436, 542, 585, 592, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 685, 696, 731, 732, 734, 735, 753, 776, 777, 779, 781, 782, 784, 789, 790, 791, 794, 796, 797, 798, 828, 837, 850, 855, 901, 1018, 1022, 1036, 1161, 1184, 1187, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299, 1301], "first_column": [40, 302], "last_column": [40, 302], "banded_column": [40, 302], "banded_row": [40, 302], "sheet": [40, 123, 129, 302], "chart": [40, 302, 851, 901], "subsequ": [40, 70, 230, 262, 302, 532, 779, 819, 901, 1274, 1292], "colnam": [40, 132, 148, 171, 302, 818, 901], "given": [40, 65, 66, 81, 96, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 158, 160, 173, 174, 176, 189, 190, 192, 193, 204, 212, 225, 226, 236, 237, 238, 239, 246, 247, 250, 265, 270, 302, 334, 346, 351, 366, 391, 395, 425, 427, 428, 441, 467, 471, 497, 524, 532, 535, 544, 581, 585, 592, 595, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 619, 641, 642, 653, 654, 673, 675, 682, 685, 708, 738, 751, 752, 753, 765, 766, 767, 789, 805, 820, 828, 829, 831, 832, 841, 842, 850, 855, 861, 862, 865, 870, 873, 883, 889, 901, 906, 913, 929, 941, 946, 965, 987, 991, 1025, 1027, 1028, 1042, 1044, 1063, 1067, 1089, 1098, 1125, 1133, 1136, 1139, 1141, 1152, 1161, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1185, 1191, 1192, 1214, 1215, 1226, 1227, 1246, 1248, 1255, 1279, 1283, 1292, 1300, 1301], "dd": [40, 302], "mm": [40, 302], "yyyi": [40, 302], "overridden": [40, 107, 109, 111, 113, 127, 128, 152, 302, 901], "basi": [40, 148, 302], "param": [40, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 147, 148, 150, 237, 302, 901], "It": [40, 41, 49, 51, 58, 59, 60, 61, 72, 87, 88, 91, 138, 167, 219, 226, 269, 270, 278, 288, 302, 383, 384, 422, 467, 544, 552, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 785, 789, 810, 811, 814, 841, 842, 847, 873, 880, 889, 901, 960, 980, 981, 1022, 1063, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1187, 1292], "float_dtyp": [40, 302], "simplifi": [40, 58, 59, 60, 61, 87, 88, 302, 810, 811, 819, 821, 851, 863, 901], "uniform": [40, 302, 589, 789, 1159, 1292], "condit": [40, 170, 178, 237, 302, 453, 471, 638, 666, 714, 740, 779, 789, 817, 824, 901, 1067, 1292], "suppli": [40, 107, 109, 110, 111, 113, 120, 127, 128, 136, 178, 237, 302, 453, 585, 789, 824, 901], "typenam": [40, 302], "3_color_scal": [40, 302], "data_bar": [40, 302], "make": [40, 73, 89, 107, 112, 118, 119, 124, 126, 130, 135, 219, 223, 230, 271, 302, 445, 446, 467, 571, 572, 581, 595, 664, 789, 847, 901, 905, 1046, 1047, 1063, 1237, 1292, 1301], "icon": [40, 302], "multipl": [40, 68, 87, 88, 89, 118, 119, 123, 129, 132, 135, 136, 137, 146, 150, 160, 168, 173, 175, 178, 188, 189, 197, 207, 225, 227, 239, 242, 244, 250, 265, 270, 275, 280, 302, 505, 530, 549, 553, 561, 562, 581, 596, 597, 604, 605, 606, 607, 608, 610, 611, 612, 628, 713, 719, 726, 727, 740, 751, 752, 754, 759, 764, 769, 772, 779, 785, 789, 805, 810, 811, 816, 824, 827, 828, 857, 860, 865, 870, 873, 876, 881, 889, 901, 912, 1044, 1050, 1106, 1131, 1146, 1165, 1166, 1292], "singl": [40, 66, 81, 87, 88, 89, 118, 119, 120, 121, 123, 130, 132, 137, 146, 161, 168, 169, 170, 175, 184, 194, 204, 208, 212, 225, 237, 239, 250, 279, 302, 317, 335, 366, 418, 460, 463, 465, 498, 499, 505, 530, 542, 544, 593, 596, 597, 599, 628, 631, 648, 662, 702, 708, 713, 716, 717, 747, 752, 753, 769, 777, 789, 807, 810, 811, 816, 817, 836, 865, 901, 930, 965, 1018, 1050, 1061, 1099, 1100, 1106, 1162, 1165, 1166, 1168, 1204, 1221, 1235, 1268, 1292], "across": [40, 81, 121, 194, 214, 216, 221, 253, 302, 465, 705, 707, 722, 723, 725, 729, 755, 757, 760, 773, 789, 1061, 1292], "effect": [40, 181, 189, 192, 261, 302, 400, 544, 566, 568, 570, 731, 732, 789, 828, 831, 879, 880, 901, 987, 996], "heatmap": [40, 302], "min": [40, 45, 61, 167, 177, 221, 227, 236, 302, 368, 375, 380, 452, 581, 592, 601, 607, 760, 768, 789, 814, 823, 855, 901, 905, 967, 973, 977, 982, 1053, 1161, 1175, 1292, 1301], "entir": [40, 87, 88, 302, 810, 811, 901], "made": [40, 120, 302], "abov": [40, 141, 209, 227, 302, 779], "than": [40, 58, 59, 60, 61, 87, 88, 106, 111, 113, 118, 119, 120, 123, 129, 132, 138, 148, 150, 162, 188, 191, 206, 209, 212, 225, 237, 238, 240, 269, 288, 302, 459, 462, 464, 471, 489, 519, 539, 542, 544, 556, 589, 600, 615, 625, 647, 653, 654, 665, 682, 718, 731, 753, 789, 810, 811, 827, 830, 837, 889, 901, 1067, 1120, 1141, 1159, 1169, 1183, 1199, 1220, 1226, 1227, 1238, 1255, 1292, 1301], "bold": [40, 302], "font_color": [40, 302], "702963": [40, 302], "total": [40, 173, 283, 302, 399, 403, 407, 410, 412, 417, 424, 429, 430, 431, 432, 433, 434, 435, 490, 511, 789, 884, 995, 999, 1006, 1009, 1012, 1017, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1044, 1091, 1112, 1292], "export": [40, 206, 207, 238, 239, 258, 261, 302, 785], "associ": [40, 66, 68, 81, 121, 147, 239, 302], "sum": [40, 65, 173, 181, 188, 189, 204, 227, 236, 253, 280, 302, 376, 377, 382, 386, 441, 453, 532, 544, 552, 554, 555, 556, 557, 596, 601, 611, 702, 704, 722, 724, 725, 726, 728, 729, 740, 753, 764, 773, 789, 810, 811, 815, 819, 821, 827, 828, 849, 851, 855, 859, 863, 881, 901, 905, 906, 974, 975, 979, 1042, 1044, 1179, 1292], "must": [40, 51, 108, 109, 122, 133, 134, 138, 167, 174, 189, 190, 192, 193, 209, 219, 236, 237, 302, 384, 532, 542, 589, 596, 601, 604, 605, 606, 607, 608, 610, 611, 612, 779, 789, 814, 820, 828, 829, 831, 832, 837, 841, 842, 847, 855, 901, 905, 981, 982, 1159, 1165, 1292], "funcnam": [40, 302], "averag": [40, 302, 444, 445, 446, 592, 789, 1045, 1046, 1047, 1161, 1292], "count_num": [40, 302], "count": [40, 65, 138, 159, 167, 189, 209, 223, 224, 236, 266, 271, 277, 293, 302, 318, 335, 344, 373, 378, 418, 467, 490, 498, 499, 511, 517, 544, 563, 579, 601, 604, 605, 606, 607, 608, 610, 611, 612, 634, 635, 698, 700, 709, 721, 749, 761, 789, 804, 814, 828, 837, 849, 855, 879, 894, 901, 930, 939, 982, 1018, 1063, 1091, 1099, 1100, 1112, 1118, 1148, 1154, 1207, 1208, 1278, 1280, 1292], "std_dev": [40, 302], "var": [40, 151, 302, 612, 789, 901, 1292], "pixel": [40, 302], "unit": [40, 48, 50, 141, 142, 143, 144, 148, 150, 173, 302, 392, 394, 401, 427, 439, 450, 538, 553, 673, 675, 699, 731, 732, 733, 734, 735, 736, 742, 789, 851, 901, 905, 906, 988, 990, 997, 1027, 1039, 1044, 1051, 1139, 1246, 1248, 1279, 1292, 1301], "hand": [40, 118, 119, 132, 302, 520, 521, 522, 523, 1121, 1122, 1123, 1124], "side": [40, 189, 190, 192, 193, 236, 302, 471, 520, 521, 522, 523, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 855, 901, 905, 1067, 1121, 1122, 1123, 1124, 1185, 1292], "call": [40, 69, 72, 91, 112, 119, 120, 141, 142, 143, 144, 148, 150, 155, 188, 189, 192, 210, 212, 236, 301, 302, 317, 374, 377, 486, 544, 564, 565, 567, 569, 571, 572, 587, 621, 687, 719, 785, 789, 827, 828, 829, 831, 832, 855, 900, 901, 905, 906, 913, 1141, 1195, 1272, 1292], "ad": [40, 110, 123, 189, 192, 266, 270, 275, 276, 302, 316, 450, 722, 723, 726, 727, 789, 828, 831, 873, 876, 877, 901, 981, 1051, 1159, 1292], "wise": [40, 81, 120, 181, 302, 319, 320, 321, 322, 323, 324, 369, 370, 371, 448, 536, 622, 623, 624, 692, 693, 726, 727, 740, 764, 789, 914, 915, 916, 917, 918, 919, 969, 970, 971, 1048, 1137, 1138, 1196, 1197, 1198, 1266, 1267, 1292], "particip": [40, 302], "distinct": [40, 150, 225, 279, 302, 352, 474, 475, 478, 479, 533, 592, 600, 736, 789, 947, 1072, 1073, 1078, 1079, 1134, 1161, 1169, 1292, 1301], "referenc": [40, 302, 685], "differ": [40, 118, 138, 141, 143, 175, 189, 194, 206, 236, 238, 239, 258, 266, 302, 387, 398, 418, 419, 421, 437, 443, 465, 500, 520, 522, 532, 544, 573, 574, 576, 596, 673, 698, 739, 742, 748, 789, 819, 828, 855, 901, 906, 959, 983, 994, 1018, 1019, 1021, 1037, 1043, 1050, 1061, 1101, 1121, 1123, 1141, 1150, 1151, 1165, 1186, 1246, 1292], "row_index": [40, 302], "height": [40, 170, 302], "intersect": [40, 302, 521, 906, 1122], "bodi": [40, 302], "start": [40, 117, 118, 119, 121, 124, 126, 129, 130, 132, 135, 136, 137, 152, 183, 188, 189, 191, 192, 210, 249, 255, 271, 277, 278, 302, 355, 358, 359, 398, 413, 419, 422, 436, 437, 447, 461, 506, 525, 600, 604, 605, 607, 610, 611, 612, 626, 632, 638, 641, 654, 662, 666, 668, 670, 671, 682, 691, 710, 722, 726, 731, 732, 734, 735, 738, 740, 746, 747, 776, 777, 779, 789, 826, 827, 828, 830, 831, 851, 864, 869, 879, 880, 901, 906, 953, 988, 991, 994, 997, 998, 1005, 1008, 1011, 1013, 1016, 1019, 1022, 1027, 1036, 1037, 1058, 1107, 1126, 1169, 1200, 1211, 1214, 1227, 1235, 1239, 1241, 1243, 1255, 1265, 1292, 1301], "unless": [40, 81, 109, 302, 668, 669, 765, 901, 1241, 1282, 1292], "marker": [40, 302], "compliant": [40, 302], "case": [40, 72, 81, 88, 107, 109, 110, 111, 113, 120, 127, 128, 136, 137, 152, 158, 175, 189, 190, 192, 193, 206, 212, 236, 238, 239, 258, 302, 391, 541, 542, 552, 553, 565, 601, 604, 605, 606, 607, 608, 610, 611, 612, 632, 633, 641, 643, 656, 657, 658, 789, 811, 828, 829, 831, 832, 855, 901, 905, 906, 987, 1050, 1205, 1206, 1214, 1216, 1229, 1230, 1231, 1292], "three": [40, 236, 264, 302, 384, 589, 601, 616, 789, 855, 901, 946, 981, 1133, 1159, 1292], "avail": [40, 41, 116, 120, 121, 122, 133, 134, 146, 155, 227, 301, 302, 592, 781, 782, 784, 788, 789, 790, 791, 794, 795, 796, 797, 798, 801, 821, 900, 901, 905, 906, 982, 1161, 1284, 1286, 1288, 1292, 1293, 1297, 1298, 1299], "insert_befor": [40, 302], "insert_aft": [40, 302], "respect": [40, 302, 633, 658, 906, 1206, 1231], "direct": [40, 121, 130, 134, 137, 141, 246, 269, 302, 346, 524, 618, 789, 861, 901, 941, 1125, 1191, 1292], "far": [40, 302], "strongli": [40, 152, 212, 237, 288, 302, 544, 789, 1141, 1292], "advis": [40, 72, 91, 210, 302], "structur": [40, 41, 96, 97, 104, 175, 226, 239, 261, 302, 585, 789, 850, 901, 1050, 1292], "wherev": [40, 212, 288, 302, 544, 789, 1141, 1292], "possibl": [40, 96, 109, 110, 113, 118, 160, 188, 191, 206, 212, 238, 265, 267, 288, 302, 538, 544, 552, 603, 665, 699, 789, 805, 827, 830, 865, 870, 871, 901, 1141, 1171, 1238, 1292], "simpl": [40, 150, 223, 302], "colx": [40, 70, 302, 571, 572, 906, 1301], "coli": [40, 302, 571, 572, 906, 1301], "after": [40, 70, 89, 110, 117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 175, 268, 301, 302, 447, 543, 581, 592, 682, 789, 872, 901, 1050, 1140, 1161, 1255, 1292], "befor": [40, 47, 48, 118, 120, 123, 132, 138, 141, 142, 143, 144, 152, 155, 175, 189, 192, 209, 268, 302, 376, 377, 383, 542, 543, 581, 582, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 682, 688, 766, 767, 789, 828, 831, 834, 837, 872, 901, 905, 974, 975, 980, 1050, 1140, 1155, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1255, 1262, 1292], "most": [40, 67, 107, 118, 119, 121, 132, 141, 142, 143, 144, 302, 553, 561, 582, 665, 789, 1146, 1155, 1238, 1292, 1300], "mandatori": [40, 302], "return_dtyp": [40, 158, 212, 302, 317, 540, 542, 543, 544, 596, 703, 708, 751, 752, 753, 789, 913, 1140, 1141, 1165, 1292], "latter": [40, 175, 302, 1050, 1292], "appropri": [40, 138, 261, 302, 592, 789, 1161, 1292], "pure": [40, 302, 1273, 1292], "actual": [40, 110, 148, 150, 239, 302, 1194, 1292], "indic": [40, 47, 48, 50, 74, 117, 118, 119, 120, 124, 126, 130, 132, 137, 145, 146, 150, 189, 190, 192, 193, 236, 239, 244, 246, 259, 302, 328, 346, 460, 467, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 505, 524, 530, 548, 549, 550, 551, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 618, 622, 690, 713, 714, 789, 828, 829, 831, 832, 855, 860, 861, 901, 905, 906, 941, 1057, 1063, 1071, 1072, 1073, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1106, 1125, 1131, 1184, 1185, 1188, 1191, 1196, 1264, 1269, 1292, 1301], "calcul": [40, 81, 167, 189, 251, 272, 302, 387, 444, 445, 446, 487, 500, 520, 527, 534, 538, 609, 625, 630, 699, 701, 718, 720, 766, 767, 770, 778, 789, 814, 828, 866, 874, 901, 982, 983, 1045, 1046, 1047, 1090, 1101, 1121, 1177, 1199, 1203, 1281, 1292], "individu": [40, 61, 148, 155, 236, 261, 302, 544, 641, 789, 810, 855, 901, 963, 1214, 1292], "gridlin": [40, 302], "zoom": [40, 302], "freez": [40, 302], "pane": [40, 302], "top": [40, 265, 302, 870, 901], "index": [40, 108, 112, 115, 118, 119, 124, 126, 130, 132, 135, 136, 137, 140, 157, 179, 183, 185, 189, 190, 192, 193, 198, 199, 204, 206, 209, 227, 233, 234, 236, 237, 238, 246, 249, 255, 261, 263, 270, 271, 277, 278, 302, 311, 325, 326, 327, 329, 332, 333, 338, 346, 351, 418, 460, 461, 463, 494, 495, 505, 506, 507, 524, 525, 530, 532, 601, 604, 605, 606, 607, 608, 610, 611, 612, 616, 618, 626, 632, 640, 643, 662, 690, 691, 713, 746, 749, 789, 826, 828, 829, 831, 832, 837, 855, 861, 864, 869, 873, 879, 880, 901, 920, 921, 922, 923, 924, 927, 928, 933, 941, 946, 1018, 1057, 1058, 1089, 1095, 1096, 1106, 1107, 1108, 1125, 1126, 1131, 1133, 1152, 1184, 1185, 1188, 1191, 1200, 1213, 1216, 1235, 1264, 1265, 1292], "thu": [40, 175, 302, 718, 1050, 1292], "altern": [40, 302, 785], "a2": [40, 82, 84, 302], "occur": [40, 87, 88, 302, 335, 498, 499, 561, 592, 789, 810, 811, 819, 821, 851, 863, 901, 930, 1099, 1100, 1146, 1161, 1273, 1292], "equival": [40, 107, 109, 110, 111, 113, 122, 127, 128, 136, 189, 204, 223, 302, 310, 314, 442, 443, 457, 462, 464, 489, 539, 560, 562, 575, 576, 577, 580, 586, 648, 686, 696, 703, 739, 748, 789, 828, 901, 1089, 1221, 1251, 1253, 1254, 1292], "top_row": [40, 302], "top_col": [40, 302], "base": [40, 46, 99, 170, 178, 189, 190, 192, 193, 236, 302, 391, 400, 441, 444, 445, 446, 453, 467, 535, 536, 542, 544, 589, 596, 601, 655, 677, 789, 817, 824, 828, 829, 831, 832, 855, 901, 906, 987, 996, 1042, 1045, 1046, 1047, 1063, 1136, 1137, 1141, 1159, 1165, 1228, 1250, 1283, 1292, 1301], "scroll": [40, 302], "region": [40, 134, 302], "initi": [40, 73, 155, 302, 722, 726, 740, 779, 1300], "5th": [40, 302], "properti": [40, 157, 164, 171, 180, 196, 241, 245, 274, 278, 302, 812, 818, 856, 875, 880, 901, 906, 1292, 1301], "readthedoc": [40, 302], "html": [40, 41, 42, 108, 120, 157, 165, 302], "definit": [40, 146, 302, 487, 789, 1090, 1292], "take": [40, 123, 129, 148, 155, 181, 183, 189, 192, 216, 219, 226, 227, 231, 255, 261, 302, 327, 418, 453, 460, 461, 505, 506, 566, 568, 570, 628, 691, 713, 731, 732, 737, 739, 748, 789, 826, 828, 831, 847, 853, 869, 901, 922, 1018, 1057, 1058, 1106, 1107, 1265, 1283, 1292], "care": [40, 302, 317, 544, 617, 789, 1189, 1292], "rel": [40, 121, 122, 133, 134, 141, 142, 143, 144, 302, 418, 444, 445, 446, 606, 608, 610, 612, 789, 1018, 1045, 1046, 1047, 1292], "working_with_conditional_format": [40, 302], "similarli": [40, 110, 189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "well": [40, 118, 119, 120, 132, 227, 302, 471, 789, 1067, 1292], "adjac": [40, 302], "two": [40, 70, 72, 90, 91, 109, 111, 113, 121, 181, 209, 218, 219, 227, 238, 264, 281, 288, 302, 311, 388, 394, 460, 463, 532, 589, 627, 711, 712, 718, 720, 766, 767, 789, 846, 847, 882, 889, 901, 946, 984, 990, 1133, 1159, 1292], "help": [40, 141, 142, 143, 144, 302, 305, 821, 901, 1292, 1296], "where": [40, 65, 81, 120, 121, 147, 170, 175, 189, 206, 218, 238, 251, 270, 272, 302, 328, 438, 441, 443, 527, 534, 576, 595, 616, 625, 628, 630, 658, 701, 714, 718, 720, 766, 767, 770, 778, 779, 789, 817, 828, 846, 866, 873, 874, 901, 923, 1038, 1042, 1050, 1185, 1199, 1203, 1231, 1281, 1283, 1292, 1300], "working_with_sparklin": [40, 302], "inject": [40, 81, 302], "locat": [40, 175, 233, 234, 263, 268, 302, 616, 789, 872, 901, 1050, 1057, 1184, 1185, 1188, 1264, 1292], "syntax": [40, 178, 212, 223, 302, 632, 640, 641, 643, 656, 657, 746, 747, 785, 824, 863, 901, 1205, 1213, 1214, 1216, 1229, 1230, 1292], "correctli": [40, 123, 302, 542, 789], "microsoft": [40, 302], "com": [40, 121, 302, 444, 445, 446, 640, 641, 642, 789, 1045, 1046, 1047, 1213, 1214, 1215, 1292], "u": [40, 48, 50, 68, 137, 209, 302, 392, 394, 401, 427, 439, 673, 675, 705, 707, 731, 732, 733, 734, 735, 736, 742, 906, 988, 990, 997, 1027, 1039, 1246, 1248], "offic": [40, 302], "f5ed2452": [40, 302], "2337": [40, 302], "4f71": [40, 302], "bed3": [40, 302], "c8ae6d2b276": [40, 302], "instanti": [40, 120, 242, 275, 302, 857, 876, 901], "basic": [40, 302, 1301], "random": [40, 41, 139, 146, 148, 150, 194, 240, 302, 465, 519, 592, 615, 621, 700, 789, 801, 1061, 1120, 1161, 1183, 1195, 1280, 1292], "dtm": [40, 302, 394, 906, 990], "500": [40, 270, 302, 396, 397, 402, 406, 409, 411, 416, 423, 426, 821, 873, 901, 1005, 1008, 1016, 1172, 1173, 1175, 1292], "val": [40, 235, 302, 544, 585, 694, 779, 789, 854, 901], "10_000": [40, 302], "20_000": [40, 302], "30_000": [40, 302], "increas": [40, 81, 118, 130, 137, 302, 383, 600, 789, 980, 1169, 1292], "b4": [40, 302], "light": [40, 302], "twice": [40, 123, 302], "titl": [40, 65, 302], "explicit": [40, 120, 132, 146, 270, 302, 764, 873, 901], "integr": [40, 302, 1301], "multi_fram": [40, 302], "wb": [40, 302], "coordin": [40, 302], "advanc": [40, 123, 227, 302, 351, 532, 564, 567, 569, 571, 572, 946, 1133, 1301], "min_color": [40, 302], "76933c": [40, 302], "mid_color": [40, 302], "c4d79b": [40, 302], "max_color": [40, 302], "ebf1d": [40, 302], "data_bar_2010": [40, 302], "bar_color": [40, 302], "9bbb59": [40, 302], "bar_negative_color_sam": [40, 302], "bar_negative_border_color_sam": [40, 302], "white": [40, 302], "w": [40, 67, 68, 120, 189, 192, 239, 302, 635, 640, 642, 705, 707, 828, 831, 901, 906, 1208, 1213, 1215, 1242], "get_worksheet_by_nam": [40, 302], "fmt_titl": [40, 302], "add_format": [40, 302], "4f6228": [40, 302], "font_siz": [40, 302], "12": [40, 81, 114, 118, 140, 147, 148, 167, 189, 205, 209, 236, 247, 271, 302, 312, 367, 368, 376, 391, 393, 394, 398, 408, 413, 414, 415, 418, 419, 420, 422, 436, 437, 438, 470, 486, 506, 541, 582, 587, 591, 601, 611, 619, 620, 635, 650, 660, 676, 687, 723, 730, 731, 732, 733, 734, 735, 752, 776, 777, 789, 814, 828, 833, 837, 840, 855, 862, 863, 868, 901, 906, 966, 967, 987, 989, 990, 1007, 1013, 1022, 1036, 1141, 1181, 1192, 1208, 1223, 1233, 1249, 1292, 1301], "ital": [40, 302], "customis": [40, 302], "trend": [40, 302], "win_loss": [40, 302], "subtl": [40, 302], "tone": [40, 302], "hidden": [40, 302], "id": [40, 89, 118, 134, 266, 278, 288, 302, 600, 656, 657, 698, 789, 880, 889, 901, 1169, 1278, 1292, 1301], "q1": [40, 302], "55": [40, 83, 302], "35": [40, 302, 387, 789, 983, 1292], "q2": [40, 302], "30": [40, 167, 175, 189, 197, 226, 232, 234, 257, 275, 302, 325, 326, 327, 387, 394, 396, 397, 402, 406, 409, 411, 413, 414, 416, 420, 421, 422, 423, 426, 429, 436, 437, 465, 620, 750, 776, 789, 814, 828, 850, 876, 901, 906, 983, 990, 1014, 1021, 1022, 1029, 1036, 1292, 1301], "60": [40, 175, 302, 402, 409, 411, 423, 435, 611, 673, 789, 1019, 1023, 1035, 1246], "q3": [40, 302], "40": [40, 167, 175, 226, 302, 422, 436, 465, 534, 676, 789, 814, 850, 901, 1001, 1036, 1135, 1249], "80": [40, 302], "q4": [40, 302], "75": [40, 167, 302, 314, 580, 589, 604, 605, 606, 607, 610, 611, 612, 753, 789, 814, 901, 982, 1063, 1090, 1159, 1292, 1301], "account": [40, 114, 121, 134, 302, 418, 444, 445, 446, 789, 1018, 1045, 1046, 1047, 1292], "flavour": [40, 120, 302], "integer_dtyp": [40, 242, 302, 857, 901, 906], "0_": [40, 302], "just": [40, 112, 120, 132, 218, 302, 846, 901], "unifi": [40, 302, 906], "2_color_scal": [40, 302], "95b3d7": [40, 302], "ffffff": [40, 302], "standardis": [40, 302], "z": [40, 67, 73, 89, 114, 146, 148, 173, 201, 203, 208, 218, 238, 239, 266, 269, 302, 310, 312, 314, 465, 496, 541, 544, 565, 567, 569, 571, 572, 580, 587, 595, 596, 633, 641, 658, 673, 675, 687, 705, 707, 725, 755, 757, 760, 765, 773, 789, 836, 846, 864, 901, 906, 1053, 1165, 1206, 1214, 1231, 1246, 1248, 1292, 1300], "score": [40, 302], "conjunct": [40, 90, 120, 123, 129, 302, 746, 749], "a123": [40, 302], "b345": [40, 302], "c567": [40, 302], "d789": [40, 302], "e101": [40, 302], "45": [40, 167, 236, 302, 394, 422, 436, 601, 611, 635, 641, 684, 711, 712, 750, 776, 789, 814, 855, 901, 906, 990, 1022, 1036, 1208, 1214, 1258, 1301], "85": [40, 302, 1090, 1292, 1301], "font": [40, 302], "consola": [40, 302], "stdev": [40, 302], "ipccompress": [41, 42, 302], "futur": [41, 88, 157, 167, 213, 215, 220, 252, 302, 731, 811, 814, 901, 1282, 1292], "arrow": [41, 42, 59, 107, 120, 121, 124, 126, 135, 206, 238, 239, 256, 258, 261, 302, 901, 1268, 1273, 1292], "ipc": [41, 42, 59, 124, 125, 126, 135, 138, 302, 801, 901], "binari": [41, 120, 123, 302, 355, 356, 357, 358, 359, 636, 906, 949, 950, 952, 953, 1209], "feather": [41, 124, 135, 302, 801], "access": [41, 82, 83, 84, 85, 130, 134, 135, 137, 157, 206, 237, 238, 302, 642, 878, 901, 1215, 1301], "lz4": [41, 42, 45, 59, 61, 302, 901], "zstd": [41, 42, 45, 59, 61, 302, 901], "intern": [41, 120, 139, 206, 302], "might": [41, 118, 119, 132, 152, 160, 261, 265, 302, 317, 544, 698, 789, 805, 865, 870, 901], "implement": [41, 45, 108, 120, 157, 194, 212, 288, 302, 305, 465, 486, 544, 564, 565, 567, 569, 571, 572, 587, 687, 753, 789, 889, 1061, 1141, 1184, 1187, 1292, 1296], "unstabl": [41, 49, 51, 58, 59, 60, 61, 87, 88, 120, 138, 269, 270, 302, 383, 384, 422, 467, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 789, 810, 811, 873, 901, 960, 980, 981, 1022, 1063, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292], "break": [41, 49, 51, 58, 59, 60, 61, 87, 88, 138, 269, 270, 302, 317, 383, 384, 422, 467, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 789, 810, 811, 873, 901, 958, 960, 980, 981, 1022, 1063, 1159, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292], "batch": [42, 87, 88, 116, 119, 120, 126, 136, 138, 238, 302, 810, 811, 841, 842, 901], "iobas": [43, 44, 127, 128, 302, 386, 555, 558, 789, 815, 859, 901], "pretti": [43, 302], "row_ori": [43, 302], "serial": [43, 44, 302, 386, 558, 789, 815, 901], "orient": [43, 82, 84, 111, 113, 302, 901], "slower": [43, 111, 113, 123, 188, 191, 212, 225, 271, 288, 302, 544, 753, 789, 827, 830, 889, 901, 1141, 1292], "common": [43, 81, 87, 88, 89, 270, 302, 541, 565, 789, 795, 810, 811, 819, 821, 851, 863, 873, 901], "write_ndjson": [43, 302], "bit_set": [43, 302, 859, 901], "newlin": [44, 128, 136, 302], "delimit": [44, 58, 128, 136, 227, 259, 302, 631, 901, 1204, 1269, 1292], "parquetcompress": [45, 302], "compression_level": [45, 61, 302, 901], "statist": [45, 61, 118, 119, 130, 137, 167, 302, 445, 446, 487, 604, 605, 606, 607, 608, 609, 610, 611, 612, 625, 789, 814, 901, 982, 1046, 1047, 1090, 1177, 1199, 1292], "row_group_s": [45, 61, 302, 901], "data_page_s": [45, 302], "use_pyarrow": [45, 118, 124, 126, 130, 261, 302, 1272, 1273, 1292], "pyarrow_opt": [45, 122, 130, 133, 302], "parquet": [45, 61, 130, 131, 137, 302, 801, 901], "gzip": [45, 61, 302, 901], "lzo": [45, 61, 302, 901], "brotli": [45, 61, 302, 901], "choos": [45, 59, 61, 189, 227, 302, 828, 901], "good": [45, 59, 61, 206, 302, 901], "perform": [45, 59, 61, 81, 94, 97, 104, 108, 118, 119, 120, 124, 130, 132, 135, 136, 137, 157, 160, 188, 189, 190, 191, 192, 193, 209, 212, 213, 215, 220, 230, 236, 238, 239, 252, 261, 265, 288, 302, 317, 532, 542, 544, 581, 601, 633, 647, 648, 658, 673, 674, 675, 789, 805, 828, 829, 831, 832, 837, 855, 865, 870, 879, 880, 901, 1141, 1206, 1220, 1221, 1231, 1246, 1247, 1248, 1272, 1273, 1292], "fast": [45, 59, 61, 149, 151, 302, 450, 617, 789, 901, 905, 1051, 1189, 1292, 1301], "decompress": [45, 59, 61, 302, 901], "backward": [45, 61, 177, 209, 302, 354, 415, 452, 789, 823, 837, 901, 1015, 1053, 1292], "guarante": [45, 61, 118, 119, 167, 194, 267, 302, 465, 789, 814, 821, 871, 901, 1060, 1061, 1292], "deal": [45, 61, 206, 302, 313, 315, 421, 422, 436, 592, 673, 675, 704, 705, 706, 707, 733, 789, 901, 910, 911, 1021, 1022, 1036, 1161, 1246, 1248, 1292], "older": [45, 61, 302, 901], "reader": [45, 61, 116, 118, 119, 124, 126, 130, 302, 901], "higher": [45, 61, 167, 229, 294, 302, 590, 608, 763, 789, 814, 852, 895, 901, 982, 1160, 1176, 1292], "mean": [45, 61, 118, 119, 124, 130, 132, 167, 177, 188, 189, 209, 216, 227, 236, 271, 280, 302, 418, 422, 436, 449, 452, 601, 604, 605, 606, 607, 608, 610, 611, 612, 625, 631, 640, 731, 732, 734, 735, 736, 757, 776, 777, 779, 789, 814, 823, 827, 828, 837, 841, 842, 855, 881, 901, 982, 1018, 1022, 1036, 1049, 1053, 1060, 1173, 1199, 1204, 1213, 1292], "smaller": [45, 61, 173, 302, 821, 901, 1044, 1292], "disk": [45, 58, 59, 60, 61, 124, 302, 863, 901], "22": [45, 61, 147, 302, 398, 419, 422, 436, 438, 439, 603, 604, 605, 607, 610, 611, 612, 673, 789, 901, 906, 1022, 1036, 1039, 1171, 1246, 1292, 1301], "comput": [45, 61, 87, 89, 94, 173, 188, 209, 262, 267, 280, 294, 302, 309, 319, 320, 321, 322, 323, 324, 341, 342, 343, 348, 349, 353, 364, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 441, 448, 487, 513, 514, 515, 516, 520, 521, 522, 523, 527, 534, 535, 536, 537, 561, 581, 582, 588, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 622, 623, 624, 625, 629, 692, 693, 700, 705, 707, 711, 712, 713, 718, 720, 737, 757, 766, 767, 779, 789, 810, 827, 834, 836, 837, 871, 878, 881, 895, 901, 908, 914, 915, 916, 917, 918, 919, 936, 937, 938, 943, 944, 948, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 984, 1042, 1044, 1048, 1090, 1114, 1115, 1116, 1117, 1121, 1122, 1123, 1124, 1128, 1135, 1136, 1137, 1138, 1146, 1155, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1196, 1197, 1198, 1199, 1202, 1266, 1267, 1274, 1280, 1292], "512": [45, 120, 206, 302, 586, 789, 1155, 1292], "page": [45, 61, 124, 130, 135, 137, 302, 789, 801, 901, 1292], "At": [45, 302], "moment": [45, 165, 302, 487, 625, 789, 1090, 1199, 1292], "write_t": [45, 302], "partition_col": [45, 121, 302], "write_to_dataset": [45, 302], "similar": [45, 152, 181, 209, 246, 302, 346, 425, 428, 524, 581, 618, 749, 779, 789, 821, 837, 861, 901, 941, 1025, 1028, 1125, 1191, 1292], "spark": [45, 302], "partit": [45, 121, 122, 130, 133, 137, 138, 207, 225, 302], "we": [45, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 167, 189, 209, 236, 271, 302, 386, 418, 422, 436, 467, 502, 532, 542, 544, 601, 604, 605, 606, 607, 608, 610, 611, 612, 642, 655, 677, 731, 732, 734, 735, 750, 776, 777, 779, 789, 814, 815, 828, 837, 841, 842, 855, 901, 913, 1018, 1022, 1036, 1063, 1103, 1141, 1215, 1228, 1250, 1292], "use_pyarrow_write_to_dataset": [45, 302], "first": [45, 81, 118, 119, 123, 124, 126, 130, 132, 141, 142, 143, 144, 147, 158, 187, 189, 192, 195, 209, 211, 212, 222, 226, 227, 236, 254, 259, 260, 266, 267, 271, 278, 285, 302, 327, 329, 338, 383, 387, 415, 418, 422, 439, 466, 474, 475, 491, 500, 502, 507, 508, 532, 542, 543, 544, 553, 585, 601, 616, 628, 632, 640, 643, 644, 646, 656, 657, 715, 722, 740, 744, 779, 789, 810, 828, 831, 833, 837, 840, 850, 855, 871, 878, 880, 886, 901, 906, 922, 933, 980, 982, 983, 1015, 1018, 1022, 1039, 1062, 1072, 1073, 1092, 1101, 1103, 1108, 1109, 1133, 1140, 1141, 1185, 1201, 1213, 1215, 1216, 1217, 1219, 1229, 1230, 1263, 1269, 1271, 1292, 1301], "watermark": [45, 302], "partitioned_object": [45, 302], "calendar": [47, 48, 189, 209, 236, 271, 302, 393, 405, 408, 418, 422, 436, 440, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 989, 1001, 1007, 1018, 1022, 1036, 1040], "32": [47, 52, 55, 76, 83, 204, 236, 302, 562, 601, 620, 789, 855, 901, 984, 1019, 1155, 1176, 1292], "bit": [47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 78, 594, 632, 789, 1163, 1205, 1292], "sign": [47, 48, 50, 54, 55, 56, 57, 74, 418, 594, 656, 657, 682, 789, 906, 1018, 1077, 1163, 1229, 1230, 1255, 1292], "dai": [47, 48, 74, 189, 192, 207, 209, 236, 271, 302, 414, 415, 418, 419, 422, 425, 428, 429, 436, 438, 601, 604, 605, 606, 607, 608, 610, 611, 612, 730, 731, 732, 733, 734, 735, 736, 776, 777, 789, 828, 831, 837, 855, 901, 906, 1014, 1015, 1018, 1019, 1022, 1025, 1028, 1029, 1036, 1038], "unix": [47, 48, 401, 742, 997], "epoch": [47, 48, 742], "1970": [47, 48, 65, 138], "time_unit": [48, 50, 392, 394, 401, 427, 439, 675, 731, 732, 733, 734, 735, 736, 742, 906, 988, 990, 997, 1027, 1039, 1248], "time_zon": [48, 395, 397, 421, 675, 731, 732, 733, 734, 735, 906, 987, 991, 996, 1021, 1248], "timezon": [48, 397, 906], "m": [48, 50, 68, 208, 302, 391, 392, 394, 400, 401, 425, 427, 428, 439, 640, 673, 674, 675, 679, 731, 732, 733, 734, 735, 736, 742, 836, 901, 906, 987, 988, 990, 996, 997, 1025, 1027, 1028, 1039, 1213, 1246, 1247, 1248, 1252], "microsecond": [48, 50, 189, 206, 209, 236, 238, 239, 258, 271, 302, 418, 422, 431, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 733, 734, 735, 736, 775, 776, 777, 789, 828, 837, 851, 855, 901, 906, 1018, 1022, 1031, 1036], "zone": [48, 391, 395, 421, 675, 731, 732, 733, 734, 735, 906, 987, 991, 1021, 1248], "zoneinfo": [48, 906], "run": [48, 58, 59, 60, 61, 87, 88, 120, 149, 151, 188, 191, 210, 212, 227, 243, 267, 276, 288, 302, 317, 383, 502, 542, 544, 599, 600, 648, 768, 789, 810, 811, 819, 821, 827, 830, 841, 842, 846, 851, 858, 863, 871, 877, 901, 906, 980, 1103, 1141, 1168, 1169, 1221, 1292, 1300, 1301], "available_timezon": [48, 906], "128": [49, 83, 1155, 1292], "progress": [49, 51], "expect": [49, 51, 98, 101, 106, 118, 120, 132, 532, 544, 750, 789, 839, 841, 842, 901], "digit": [49, 585, 613, 614, 641, 789, 1181, 1182, 1208, 1214, 1292, 1301], "amount": [50, 72, 91, 317, 544, 736, 789], "offset": [50, 118, 119, 123, 124, 126, 130, 132, 135, 136, 137, 183, 189, 190, 192, 193, 236, 249, 255, 271, 277, 278, 302, 391, 400, 414, 415, 418, 422, 436, 461, 506, 525, 601, 626, 662, 691, 789, 826, 828, 829, 831, 832, 855, 864, 869, 879, 880, 901, 987, 996, 1014, 1015, 1018, 1022, 1036, 1058, 1107, 1126, 1200, 1235, 1248, 1265, 1292], "categori": [51, 72, 91, 259, 302, 362, 363, 384, 467, 589, 789, 956, 958, 981, 1063, 1159, 1269, 1292], "iter": [51, 87, 88, 89, 107, 120, 149, 151, 160, 168, 178, 188, 189, 190, 191, 192, 193, 205, 206, 207, 236, 237, 238, 239, 242, 243, 244, 250, 265, 266, 275, 276, 279, 280, 302, 383, 453, 581, 628, 705, 707, 713, 715, 716, 717, 725, 729, 755, 757, 760, 768, 771, 773, 779, 785, 789, 805, 816, 824, 827, 828, 829, 830, 831, 832, 855, 857, 858, 860, 865, 870, 876, 877, 881, 901, 905, 980, 1184, 1292, 1301], "maintain_ord": [58, 59, 60, 61, 160, 188, 191, 225, 227, 265, 267, 271, 281, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 311, 352, 460, 463, 533, 544, 697, 789, 805, 811, 819, 821, 827, 830, 851, 863, 865, 870, 871, 882, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 947, 1134, 1277, 1292], "type_coercion": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 851, 863, 901], "predicate_pushdown": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 841, 842, 851, 863, 901], "projection_pushdown": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 841, 842, 851, 863, 901], "simplify_express": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 851, 863, 901], "slice_pushdown": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 841, 842, 851, 863, 901], "no_optim": [58, 59, 60, 61, 87, 88, 810, 811, 821, 841, 842, 851, 901], "evalu": [58, 59, 60, 61, 176, 178, 209, 302, 314, 328, 330, 331, 383, 453, 469, 492, 493, 532, 580, 704, 706, 710, 714, 731, 732, 734, 735, 737, 746, 747, 762, 765, 771, 776, 777, 779, 780, 789, 810, 824, 834, 836, 837, 901, 923, 925, 926, 980, 1093, 1094, 1283, 1292], "queri": [58, 59, 60, 61, 65, 67, 87, 88, 120, 121, 124, 132, 135, 136, 137, 175, 210, 226, 302, 542, 544, 646, 789, 810, 811, 819, 821, 833, 840, 851, 863, 879, 880, 883, 889, 901, 1050, 1141, 1219, 1292, 1300], "ram": [58, 59, 60, 61, 901], "maintain": [58, 59, 60, 61, 160, 265, 302, 352, 533, 616, 697, 789, 805, 814, 865, 870, 901, 947, 1134, 1185, 1277, 1292], "slightli": [58, 59, 60, 61, 123, 901], "faster": [58, 59, 60, 61, 120, 123, 175, 261, 269, 302, 317, 544, 698, 789, 901, 913, 1050, 1141, 1292], "coercion": [58, 59, 60, 61, 87, 88, 595, 789, 810, 811, 819, 821, 851, 863, 901], "optim": [58, 59, 60, 61, 87, 88, 130, 132, 135, 136, 137, 206, 210, 226, 230, 238, 267, 302, 810, 811, 819, 821, 841, 842, 851, 863, 871, 879, 880, 889, 901, 961, 1184, 1292], "pushdown": [58, 59, 60, 61, 87, 88, 810, 811, 819, 821, 841, 842, 851, 853, 863, 879, 880, 901, 1184, 1187, 1292], "project": [58, 59, 60, 61, 87, 88, 132, 134, 135, 136, 137, 317, 627, 628, 789, 810, 811, 819, 821, 841, 842, 851, 853, 859, 863, 901], "slice": [58, 59, 60, 61, 82, 87, 88, 173, 195, 207, 254, 302, 508, 529, 544, 552, 554, 602, 604, 605, 606, 607, 608, 610, 611, 612, 789, 810, 811, 819, 821, 841, 842, 851, 863, 901, 905, 1044, 1062, 1109, 1130, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1263, 1292], "off": [58, 59, 60, 61, 87, 88, 118, 119, 132, 810, 811, 819, 821, 841, 842, 851, 901], "certain": [58, 59, 60, 61, 88, 122, 133, 198, 199, 271, 302, 669, 670, 810, 811, 851, 901, 1292], "lf": [58, 59, 60, 61, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 878, 879, 880, 884, 888, 901, 1300, 1301], "scan_csv": [58, 59, 60, 61, 118, 119, 901], "my_larger_than_ram_fil": [58, 59, 60, 61, 901], "ndjson": [60, 901], "data_pagesize_limit": [61, 901], "reduc": [61, 118, 119, 130, 132, 135, 136, 137, 238, 289, 290, 292, 295, 302, 620, 723, 740, 789, 890, 891, 893, 896, 901, 1143, 1158, 1193, 1262, 1292], "pressur": [61, 118, 119, 130, 132, 136, 137, 620, 789, 901, 1193, 1292], "improv": [61, 124, 135, 542, 789, 901], "speed": [61, 317, 544, 789, 901, 1301], "integer_list": 62, "float_list": 62, "wrap": [64, 114, 471, 789], "arbitrari": [64, 148, 906], "eager": [65, 66, 67, 68, 69, 70, 189, 209, 227, 269, 302, 392, 395, 398, 401, 414, 415, 418, 419, 421, 422, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 604, 605, 607, 610, 611, 612, 710, 714, 731, 732, 734, 735, 742, 746, 747, 762, 765, 771, 776, 777, 780, 788, 789, 828, 842, 901, 987, 988, 991, 994, 996, 997, 998, 1004, 1005, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1300], "against": [65, 96, 118, 120, 502, 643, 901, 1103, 1216, 1300, 1301], "eagerli": [65, 532], "unset": [65, 147, 287, 421, 532, 888, 1021], "init": [65, 155], "eager_execut": [65, 1300], "itself": [65, 146, 302, 305, 544, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 789, 839, 901, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292, 1296, 1300], "impact": [65, 189, 192, 302, 828, 831, 901, 1300], "declar": [65, 107, 109, 110, 111, 113, 120, 127, 128, 136, 302, 901], "godfath": 65, "1972": 65, "6_000_000": 65, "134_821_952": 65, "dark": 65, "knight": 65, "2008": 65, "185_000_000": 65, "533_316_061": 65, "schindler": 65, "1993": 65, "22_000_000": 65, "96_067_179": 65, "pulp": 65, "fiction": 65, "1994": 65, "8_000_000": 65, "107_930_000": 65, "shawshank": 65, "redempt": 65, "25_000_000": 65, "28_341_469": 65, "release_year": 65, "budget": 65, "gross": 65, "imdb_scor": 65, "ctx": [65, 66, 67, 68, 69, 70], "film": 65, "1990": [65, 118], "BY": [65, 67], "desc": [65, 67], "AS": [65, 769, 1300], "decad": 65, "total_gross": 65, "n_film": 65, "2000": [65, 393, 404, 408, 414, 415, 418, 906, 989, 1000, 1007, 1014, 1015, 1018, 1023], "533316061": 65, "232338648": 65, "134821952": 65, "register_glob": [66, 68, 70, 1300], "register_mani": [66, 67, 70], "unregist": [66, 67, 68, 1300], "frame_data": [66, 69], "collect": [66, 67, 70, 84, 87, 88, 132, 133, 134, 138, 148, 150, 170, 210, 227, 256, 267, 268, 302, 447, 476, 544, 716, 738, 742, 771, 789, 804, 805, 807, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 857, 859, 861, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 901, 906, 1075, 1292, 1300, 1301], "global": [67, 72, 90, 91, 139, 148, 154, 261, 302, 596, 789, 957, 959, 1165, 1292, 1300], "scope": [67, 70, 155, 800, 906, 1300], "map": [67, 68, 73, 109, 110, 118, 119, 120, 121, 124, 125, 130, 131, 132, 135, 161, 171, 180, 206, 212, 231, 237, 238, 239, 257, 302, 312, 422, 436, 541, 542, 543, 544, 564, 566, 567, 569, 571, 572, 581, 596, 700, 752, 789, 807, 818, 853, 901, 906, 982, 1022, 1036, 1140, 1141, 1165, 1280, 1292, 1300], "recent": [67, 141, 142, 143, 144, 582, 789, 1155, 1292, 1300], "df1": [67, 69, 70, 81, 89, 141, 142, 172, 175, 219, 273, 302, 847, 901], "df2": [67, 69, 70, 81, 89, 141, 142, 172, 175, 273, 302], "join": [67, 72, 81, 87, 88, 89, 91, 178, 209, 270, 302, 453, 470, 581, 789, 810, 811, 819, 821, 824, 837, 851, 863, 873, 878, 901], "named_fram": [68, 1300], "lf1": [68, 70], "o": [68, 124, 135, 360, 383, 639, 695, 789, 954, 980, 1212, 1241, 1276, 1292], "lf2": [68, 70, 901], "p": [68, 83, 226, 302, 585, 771, 789, 850, 901, 1216], "q": [68, 239, 302, 771], "r": [68, 118, 119, 132, 302, 585, 635, 639, 640, 641, 642, 656, 657, 789, 906, 1208, 1212, 1213, 1214, 1215, 1229, 1230], "lf3": [68, 901], "lf4": [68, 901], "either": [68, 73, 148, 204, 208, 209, 210, 213, 215, 220, 225, 236, 237, 252, 261, 302, 589, 596, 601, 673, 704, 713, 771, 789, 836, 837, 839, 855, 901, 905, 906, 1159, 1165, 1246, 1292, 1301], "tbl1": [68, 70], "tbl2": [68, 70], "tbl3": 68, "tbl4": 68, "statement": [69, 779], "hello_world": 69, "baz": [69, 199, 200, 227, 268, 302, 642, 663, 665, 739, 748, 785, 835, 872, 901, 906, 1215, 1238], "hello_data": 69, "foo_bar": [69, 548, 551, 663, 750], "registr": [70, 801], "lifetim": [70, 155, 800], "context": [70, 72, 90, 91, 152, 223, 302, 311, 317, 453, 502, 542, 544, 552, 627, 628, 700, 708, 719, 721, 739, 742, 748, 749, 753, 765, 768, 788, 789, 800, 801, 878, 901, 1103, 1280, 1292, 1300], "manag": [70, 72, 90, 91, 800, 801, 1300], "often": [70, 121, 155, 189, 190, 192, 193, 236, 302, 335, 498, 499, 595, 601, 789, 828, 829, 831, 832, 855, 901, 930, 1099, 1100], "want": [70, 88, 110, 112, 175, 212, 223, 302, 453, 542, 544, 604, 605, 606, 607, 608, 610, 611, 612, 633, 647, 658, 722, 731, 740, 762, 765, 780, 789, 811, 833, 840, 901, 906, 1050, 1141, 1206, 1220, 1231, 1292], "df0": [70, 219, 302, 847, 901], "exit": [70, 72, 90, 155, 1300], "construct": [70, 72, 90, 91, 107, 109, 110, 111, 112, 113, 114, 120, 302, 459, 762, 765, 780, 785, 789, 815, 901, 957, 1292], "persist": 70, "through": [70, 108, 120, 785, 906, 1292], "tbl0": 70, "remain": [70, 118, 119, 132, 170, 173, 178, 227, 302, 389, 390, 453, 501, 596, 664, 665, 789, 817, 824, 841, 842, 901, 985, 986, 1044, 1054, 1102, 1165, 1237, 1238, 1292], "text": [70, 120, 647, 648, 656, 657, 659, 662, 769, 1220, 1221, 1232, 1235, 1301], "misc": 70, "testing1234": 70, "test1": 70, "test2": 70, "test3": 70, "disabl": [72, 90, 91, 206, 302, 810, 901], "cach": [72, 87, 88, 90, 91, 124, 132, 135, 137, 141, 142, 143, 144, 154, 596, 604, 605, 606, 607, 608, 610, 611, 612, 673, 674, 675, 679, 789, 800, 810, 811, 819, 821, 851, 863, 901, 957, 1165, 1246, 1247, 1248, 1252, 1292], "under": [72, 82, 83, 84, 85, 90, 91, 781, 782, 784, 785, 790, 791, 794, 796, 797, 798, 1284, 1286, 1288, 1293, 1297, 1298, 1299], "equal": [72, 91, 118, 119, 120, 132, 141, 142, 143, 144, 160, 182, 189, 192, 209, 219, 265, 302, 384, 436, 442, 443, 462, 489, 532, 576, 589, 595, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 653, 654, 682, 766, 767, 779, 785, 789, 805, 828, 831, 837, 847, 865, 870, 901, 981, 1022, 1133, 1159, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1186, 1226, 1227, 1255, 1292, 1301], "concaten": [72, 89, 90, 91, 181, 226, 302, 585, 631, 716, 717, 789, 850, 901, 963, 1147, 1204, 1292], "introduc": [72, 91, 673, 674, 675, 1246, 1247, 1248], "overhead": [72, 91, 132, 135, 136, 137], "depend": [72, 86, 91, 120, 140, 332, 333, 494, 495, 544, 552, 589, 592, 736, 739, 742, 748, 789, 927, 928, 1095, 1096, 1159, 1161, 1292, 1301], "nest": [72, 114, 130, 173, 302, 801, 1044, 1292, 1300, 1301], "clear": [72, 90, 163, 302, 809, 901, 968, 1292], "outermost": 72, "s1": [72, 90, 91, 143, 144, 181, 302, 946, 1043, 1089, 1097, 1133, 1283, 1292], "color": [72, 90, 91, 288, 355, 356, 357, 358, 359, 636, 700, 789, 889, 949, 950, 951, 952, 953, 1209, 1280, 1292], "red": [72, 90, 91, 288, 700, 789, 889, 1280, 1292], "green": [72, 90, 91, 288, 700, 789, 889, 1280, 1292], "blue": [72, 90, 91, 355, 356, 357, 358, 359, 700, 789, 1280, 1292], "concat": [72, 90, 91, 119, 963, 1147, 1292], "cat": [72, 90, 91, 384, 589, 632, 635, 678, 681, 694, 717, 784, 789, 906, 981, 1063, 1159, 1205, 1208, 1251, 1254, 1288, 1292], "decor": [72, 82, 83, 84, 85, 148, 150, 212, 302, 544, 789, 800, 801, 1141, 1292], "dure": [72, 118, 119, 132, 155, 175, 302, 1050, 1292], "afterward": [72, 779], "construct_categor": 72, "schemadict": [73, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 129, 132, 302, 771, 841, 842, 883, 889, 901], "composit": [73, 147, 1301], "nanosecond": [74, 189, 209, 236, 271, 302, 418, 422, 423, 434, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1023, 1034, 1036], "midnight": 74, "unsign": [75, 76, 77, 78, 594, 789, 906, 1077, 1163, 1292], "static": [79, 883, 889], "frametyp": [81, 1300], "joinstrategi": [81, 208, 302, 836, 901], "outer": [81, 89, 208, 270, 302, 836, 873, 901], "descend": [81, 160, 244, 250, 265, 302, 327, 347, 526, 592, 617, 627, 628, 700, 713, 789, 805, 860, 865, 870, 901, 922, 942, 1085, 1127, 1161, 1189, 1201, 1280, 1292], "fill": [81, 89, 162, 176, 177, 246, 247, 269, 302, 354, 374, 377, 451, 452, 458, 470, 604, 605, 607, 611, 618, 619, 650, 660, 741, 762, 765, 780, 789, 822, 823, 861, 862, 878, 901, 1052, 1053, 1066, 1152, 1172, 1173, 1175, 1178, 1179, 1180, 1191, 1192, 1223, 1233, 1292], "sort": [81, 82, 141, 142, 147, 160, 189, 190, 192, 193, 209, 219, 226, 227, 236, 244, 265, 271, 285, 296, 302, 327, 363, 453, 544, 581, 601, 604, 605, 606, 607, 608, 610, 611, 612, 617, 628, 700, 702, 713, 753, 789, 805, 819, 828, 829, 831, 832, 837, 847, 850, 851, 855, 860, 863, 870, 886, 897, 901, 906, 922, 958, 1085, 1189, 1277, 1280, 1292, 1301], "origin": [81, 118, 119, 132, 170, 178, 267, 302, 389, 390, 421, 422, 436, 453, 486, 501, 543, 564, 581, 594, 595, 596, 597, 599, 634, 635, 640, 646, 711, 712, 789, 817, 824, 871, 901, 981, 985, 986, 1021, 1022, 1036, 1054, 1102, 1140, 1159, 1165, 1166, 1168, 1207, 1208, 1213, 1219, 1292], "In": [81, 88, 120, 122, 133, 134, 137, 148, 150, 155, 173, 175, 189, 190, 192, 193, 212, 223, 236, 261, 302, 542, 544, 601, 731, 789, 811, 828, 829, 831, 832, 855, 901, 1044, 1050, 1162, 1292], "duplic": [81, 95, 201, 208, 209, 267, 270, 302, 312, 472, 486, 564, 589, 789, 836, 837, 871, 873, 901, 1069, 1159, 1292], "suitabl": [81, 89, 120, 146, 212, 302, 544, 616, 789, 1141, 1185, 1292, 1301], "get": [81, 88, 125, 131, 138, 160, 164, 171, 180, 184, 186, 189, 190, 192, 193, 195, 196, 201, 203, 204, 211, 214, 221, 222, 227, 236, 237, 241, 245, 249, 254, 262, 265, 274, 285, 296, 302, 311, 325, 326, 327, 329, 337, 340, 352, 362, 374, 375, 376, 377, 378, 379, 380, 381, 382, 401, 454, 460, 466, 485, 488, 491, 504, 510, 533, 545, 546, 547, 552, 554, 559, 573, 574, 583, 584, 590, 600, 601, 626, 630, 688, 689, 697, 701, 713, 739, 744, 748, 753, 754, 755, 756, 758, 759, 760, 770, 774, 778, 789, 805, 810, 811, 812, 818, 825, 828, 829, 831, 832, 833, 838, 840, 855, 856, 864, 868, 870, 875, 886, 897, 901, 905, 920, 921, 922, 923, 924, 932, 935, 947, 956, 963, 972, 973, 974, 975, 976, 977, 978, 979, 997, 1041, 1055, 1059, 1062, 1067, 1069, 1087, 1092, 1105, 1111, 1134, 1142, 1144, 1145, 1147, 1149, 1150, 1151, 1156, 1157, 1160, 1169, 1200, 1203, 1263, 1269, 1274, 1277, 1281, 1282, 1292], "speedup": [81, 206, 212, 302, 544, 789, 1141, 1292], "receiv": [81, 120, 132, 212, 226, 288, 302, 544, 585, 789, 850, 901, 1301], "now": [81, 236, 302, 422, 436, 855, 901, 1022, 1036, 1248], "One": [81, 167, 223, 227, 302, 314, 580, 709, 719, 739, 745, 748, 756, 758, 761, 769, 789, 814, 901, 906, 982, 1292], "whose": [81, 209, 227, 302, 447, 738, 789, 837, 901, 906], "uniqu": [81, 145, 146, 147, 150, 159, 203, 208, 223, 227, 239, 293, 302, 318, 329, 344, 384, 485, 517, 563, 589, 673, 674, 675, 679, 698, 700, 709, 761, 789, 804, 836, 894, 901, 905, 924, 939, 981, 1087, 1118, 1148, 1159, 1246, 1247, 1248, 1252, 1278, 1280, 1292], "post": 81, "constrain": [81, 170, 302, 817, 901], "newli": 81, "boolean": [81, 160, 178, 181, 210, 250, 265, 302, 313, 314, 315, 330, 331, 334, 355, 358, 359, 404, 453, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 492, 493, 497, 578, 580, 583, 584, 628, 644, 702, 703, 713, 714, 771, 779, 789, 805, 809, 824, 839, 865, 870, 901, 906, 910, 911, 923, 925, 926, 929, 949, 1000, 1054, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1093, 1094, 1098, 1153, 1156, 1157, 1187, 1205, 1273, 1283, 1292], "know": [81, 120, 227, 302, 532, 542, 789, 1282, 1292], "2022": [81, 161, 167, 187, 302, 394, 422, 436, 673, 731, 732, 734, 735, 736, 742, 807, 814, 901, 906, 990, 1001, 1022, 1036, 1246], "df3": [81, 302], "set_tbl_format": 81, "09": [81, 118, 148, 167, 236, 302, 394, 414, 415, 601, 676, 731, 777, 789, 814, 855, 901, 906, 1249], "02": [81, 161, 167, 187, 189, 236, 271, 302, 392, 394, 401, 414, 415, 418, 421, 427, 430, 433, 435, 439, 601, 604, 605, 607, 610, 611, 612, 613, 673, 674, 675, 679, 731, 732, 734, 735, 736, 789, 807, 814, 828, 855, 901, 906, 946, 988, 990, 992, 993, 997, 998, 1004, 1005, 1011, 1014, 1015, 1016, 1021, 1022, 1026, 1027, 1030, 1033, 1035, 1036, 1133, 1246, 1247, 1248, 1252], "03": [81, 114, 118, 161, 189, 209, 236, 271, 302, 392, 394, 395, 401, 414, 415, 418, 421, 422, 425, 427, 428, 429, 430, 433, 435, 436, 439, 601, 604, 605, 607, 610, 611, 612, 674, 679, 731, 732, 734, 735, 736, 789, 807, 828, 855, 901, 988, 990, 991, 997, 998, 1004, 1005, 1014, 1015, 1016, 1021, 1022, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1247, 1252], "af1": 81, "af2": 81, "af3": 81, "keep": [81, 118, 119, 132, 267, 270, 271, 302, 459, 486, 543, 557, 565, 596, 715, 789, 871, 873, 901, 1140, 1165, 1292], "easili": [81, 242, 275, 280, 302, 771, 857, 876, 881, 901], "dot": [81, 789, 863, 901, 1292], "product": [81, 165, 208, 302, 376, 381, 388, 789, 821, 836, 901, 974, 978, 984, 1292], "fill_nul": [81, 176, 302, 789, 822, 878, 901, 1292], "sum_horizont": [81, 252, 302, 772], "167": 81, "47": [81, 167, 302, 814, 901], "callabl": [82, 83, 84, 85, 132, 158, 181, 212, 226, 231, 282, 288, 302, 317, 351, 532, 540, 541, 542, 544, 565, 566, 585, 602, 603, 708, 722, 723, 726, 727, 740, 751, 752, 753, 764, 789, 841, 842, 850, 853, 883, 889, 901, 913, 946, 1133, 1141, 1170, 1171, 1292], "by_first_letter_of_column_nam": 82, "f": [82, 119, 120, 187, 207, 256, 266, 269, 302, 310, 351, 532, 620, 639, 673, 675, 708, 716, 751, 789, 946, 1133, 1212, 1246, 1248], "fromkei": [82, 84], "by_first_letter_of_column_valu": 82, "starts_with": [82, 355, 358, 632, 638, 906, 1211], "to_seri": [82, 184, 302, 673, 714, 765, 1246], "xy": [82, 84], "yz": [82, 84], "b1": [82, 84], "b2": [82, 84], "pow_n": 83, "powersofn": 83, "next": [83, 189, 209, 236, 271, 302, 354, 418, 422, 436, 592, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 958, 1018, 1022, 1036, 1161, 1292], "ceil": [83, 789, 1292], "previou": [83, 155, 564, 565, 567, 569, 571, 572, 582, 587, 685, 687, 789, 1155, 1292], "floor": [83, 789, 1292], "nearest": [83, 167, 209, 229, 294, 302, 365, 456, 470, 590, 608, 763, 789, 814, 837, 852, 895, 901, 962, 982, 1056, 1066, 1160, 1176, 1292], "24": [83, 140, 189, 209, 212, 236, 271, 302, 376, 383, 398, 418, 419, 422, 430, 436, 438, 562, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 980, 1018, 1022, 1030, 1036, 1089, 1292], "001": [83, 682, 736, 1031, 1032, 1034, 1255], "next_pow2": 83, "prev_pow2": 83, "nearest_pow2": 83, "split_by_column_dtyp": 84, "collect_al": [84, 88, 810, 811, 901], "31": [85, 148, 167, 302, 393, 394, 398, 408, 414, 418, 429, 673, 730, 733, 742, 750, 814, 901, 906, 987, 989, 990, 994, 1007, 1014, 1029, 1246, 1301], "42": [85, 167, 194, 219, 236, 302, 601, 789, 814, 847, 855, 901, 1061, 1292], "961": 85, "1764": 85, "4160": 85, "detail": [86, 108, 120, 121, 141, 143, 157, 189, 302, 828, 901, 1301], "build": [86, 108, 906, 1301], "info": [86, 122, 133, 134, 140, 302, 305, 1292, 1296], "host": [86, 118, 124, 126, 135, 137], "git": 86, "wa": [86, 141, 225, 261, 279, 302, 596, 658, 736, 789, 1165, 1231, 1273, 1292], "compil": [86, 332, 333, 494, 495, 927, 928, 1095, 1096], "flag": [86, 145, 302, 617, 632, 640, 641, 643, 656, 657, 789, 819, 841, 842, 901, 1189, 1205, 1213, 1214, 1216, 1229, 1230, 1292], "pyo3": 86, "built": 86, "lazy_fram": [87, 88], "comm_subplan_elim": [87, 88, 810, 811, 819, 821, 851, 863, 901], "comm_subexpr_elim": [87, 88, 810, 811, 819, 821, 851, 863, 901], "graph": [87, 120, 210, 302, 810, 834, 878, 901], "parallel": [87, 89, 116, 121, 130, 137, 189, 192, 209, 210, 226, 243, 276, 302, 383, 502, 700, 779, 789, 801, 828, 831, 836, 837, 858, 877, 889, 901, 980, 1103, 1280, 1292], "threadpool": 87, "Will": [87, 88, 810, 811, 819, 821, 851, 863, 901, 1292], "try": [87, 88, 104, 118, 119, 124, 130, 132, 135, 137, 810, 811, 819, 821, 851, 863, 901], "branch": [87, 88, 810, 811, 819, 821, 851, 863, 901], "subplan": [87, 88, 810, 811, 819, 821, 851, 863, 901], "union": [87, 88, 89, 523, 810, 811, 819, 821, 851, 863, 901, 906, 1124], "subexpress": [87, 88, 810, 811, 819, 821, 851, 863, 901], "reus": [87, 88, 810, 811, 819, 821, 851, 863, 901], "explain": [87, 88, 810, 811, 901], "gevent": [88, 140, 811, 901], "await": [88, 120, 811, 901], "_geventdataframeresult": [88, 811, 901], "asynchron": [88, 120, 811, 901], "them": [88, 107, 109, 110, 111, 113, 120, 121, 127, 128, 129, 130, 132, 136, 137, 174, 175, 189, 209, 219, 236, 271, 302, 339, 471, 509, 573, 574, 581, 601, 716, 731, 732, 734, 735, 776, 777, 789, 811, 820, 828, 837, 847, 855, 901, 906, 934, 1050, 1110, 1150, 1151, 1292], "schedul": [88, 811, 901], "insid": [88, 811, 901], "almost": [88, 212, 288, 302, 673, 674, 675, 811, 901, 1141, 1246, 1247, 1248, 1292], "instantli": [88, 811, 901], "asyncio": [88, 120, 811, 901], "releas": [88, 317, 544, 789, 811, 901, 1292, 1301], "greenlet": [88, 811, 901], "task": [88, 811, 901], "wrapper": [88, 811, 901], "event": [88, 811, 901], "asyncresult": [88, 811, 901], "timeout": [88, 811, 901], "collect_async": [88, 901], "set_except": [88, 811, 901], "rerais": [88, 811, 901], "polarstyp": 89, "concatmethod": 89, "vertic": [89, 175, 213, 215, 220, 252, 269, 273, 302, 631, 1204], "rechunk": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 175, 302, 789, 963, 1050, 1147, 1292], "combin": [89, 178, 189, 194, 209, 236, 271, 302, 314, 328, 436, 580, 596, 601, 651, 661, 667, 668, 669, 670, 731, 732, 734, 735, 776, 777, 779, 789, 828, 837, 855, 863, 901, 1022, 1036, 1165, 1224, 1234, 1240, 1241, 1242, 1243, 1292], "vertical_relax": 89, "diagon": [89, 266, 302], "diagonal_relax": 89, "vstack": [89, 175, 302], "addition": [89, 237, 302], "coerc": [89, 595, 789], "supertyp": [89, 177, 302, 316, 789, 823, 901, 905, 1292], "mismatch": [89, 102, 128, 136, 141, 143], "find": [89, 179, 185, 302, 616, 632, 633, 789, 1185, 1206, 1292], "miss": [89, 118, 119, 132, 176, 302, 354, 444, 445, 446, 458, 480, 482, 532, 789, 822, 901, 1045, 1046, 1047, 1282, 1292], "stack": [89, 197, 273, 302], "don": [89, 189, 209, 212, 267, 269, 302, 317, 383, 502, 544, 581, 789, 828, 871, 901, 906, 980, 1043, 1103, 1141, 1186, 1282, 1292], "auto": [89, 107, 109, 110, 111, 113, 127, 128, 130, 136, 137, 266, 302, 422, 436, 901, 1022, 1036, 1301], "logic": [89, 212, 288, 302, 305, 313, 315, 544, 694, 704, 705, 706, 707, 753, 789, 815, 836, 859, 889, 901, 910, 911, 1141, 1275, 1292, 1296], "align_fram": 89, "pattern": [89, 118, 119, 132, 135, 136, 137, 206, 302, 550, 632, 633, 634, 635, 640, 641, 642, 643, 656, 657, 658, 889, 906, 1184, 1187, 1205, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1229, 1230, 1231, 1292], "collis": 89, "need": [89, 114, 118, 119, 121, 189, 190, 192, 193, 236, 239, 248, 302, 532, 601, 620, 676, 736, 762, 765, 780, 789, 828, 829, 831, 832, 855, 901, 1193, 1249, 1292, 1301], "sure": [89, 107, 112, 118, 119, 124, 126, 130, 189, 190, 192, 193, 230, 236, 302, 601, 789, 828, 829, 831, 832, 855, 901, 905], "contigu": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 230, 302], "relev": 89, "df_h1": 89, "l1": 89, "l2": 89, "df_h2": 89, "r1": 89, "r2": 89, "r3": 89, "df_d1": 89, "df_d2": 89, "df_a1": 89, "df_a2": 89, "df_a3": 89, "enable_string_cach": 90, "stringcach": [90, 91, 208, 302, 801, 957, 959], "reliabl": [90, 91], "wai": [90, 91, 107, 109, 110, 111, 113, 127, 128, 136, 188, 207, 226, 250, 280, 302, 581, 585, 628, 640, 719, 785, 789, 827, 850, 865, 881, 889, 901, 1213], "until": [90, 189, 192, 210, 302, 653, 654, 682, 828, 831, 901, 1226, 1227, 1255], "19": [91, 123, 158, 179, 182, 189, 190, 191, 192, 193, 198, 209, 213, 215, 220, 233, 236, 247, 252, 255, 282, 302, 317, 367, 368, 378, 379, 380, 381, 382, 393, 399, 403, 407, 410, 412, 417, 421, 422, 424, 436, 474, 478, 481, 486, 498, 512, 530, 540, 541, 543, 587, 601, 602, 604, 605, 607, 619, 634, 645, 649, 650, 651, 652, 655, 660, 661, 667, 673, 675, 676, 687, 690, 691, 708, 728, 729, 731, 733, 751, 789, 828, 829, 830, 831, 832, 837, 841, 855, 862, 869, 883, 901, 913, 958, 966, 967, 976, 977, 978, 979, 981, 989, 995, 999, 1006, 1009, 1012, 1017, 1021, 1022, 1024, 1036, 1068, 1072, 1074, 1077, 1078, 1084, 1086, 1088, 1099, 1113, 1131, 1140, 1159, 1170, 1186, 1188, 1192, 1207, 1218, 1222, 1223, 1224, 1225, 1228, 1233, 1234, 1240, 1246, 1248, 1249, 1264, 1265, 1272, 1282, 1292], "longer": [91, 118, 132], "accept": [91, 117, 118, 119, 122, 124, 126, 130, 160, 168, 188, 191, 242, 243, 246, 250, 265, 275, 276, 280, 302, 310, 366, 447, 471, 543, 581, 596, 628, 703, 705, 707, 713, 715, 716, 717, 725, 729, 738, 755, 757, 760, 768, 771, 773, 779, 789, 805, 816, 827, 830, 857, 858, 861, 865, 870, 876, 877, 881, 901, 905, 965, 1067, 1165, 1191, 1292], "disable_string_cach": 91, "least": [98, 148, 582, 640, 642, 789, 1155, 1213, 1215, 1292], "unexpect": [100, 102, 120, 542, 544, 789, 1141, 1292], "caus": [100, 102, 108, 118, 119, 132, 141, 157, 175, 261, 302, 542, 789, 1050, 1273, 1292], "panic": 100, "incompat": 104, "arrai": [107, 111, 118, 119, 130, 173, 174, 256, 261, 262, 302, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 496, 513, 514, 515, 516, 518, 527, 528, 531, 534, 536, 542, 604, 605, 607, 611, 617, 737, 789, 820, 901, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 966, 967, 972, 973, 974, 975, 976, 977, 978, 979, 984, 1044, 1097, 1114, 1115, 1116, 1117, 1119, 1127, 1128, 1129, 1132, 1135, 1137, 1138, 1172, 1173, 1175, 1178, 1179, 1180, 1189, 1194, 1268, 1273, 1274, 1282, 1292], "chunkedarrai": [107, 222, 302], "recordbatch": [107, 207, 302], "schemadefinit": [107, 109, 110, 111, 113, 127, 128, 136, 302, 901], "schema_overrid": [107, 109, 110, 111, 112, 113, 120, 121, 123, 127, 128, 129, 207, 261, 302, 901, 906], "copi": [107, 108, 157, 162, 163, 207, 256, 261, 262, 275, 302, 450, 789, 808, 809, 876, 901, 964, 968, 1051, 1268, 1272, 1273, 1274, 1292], "part": [107, 123, 148, 641, 664, 665, 819, 821, 851, 863, 878, 901, 1214, 1237, 1238], "closest": [107, 209, 302], "pair": [107, 109, 110, 111, 113, 127, 128, 136, 147, 231, 302, 853, 901, 1301], "sever": [107, 109, 110, 111, 113, 127, 128, 136, 302, 901, 1301], "form": [107, 109, 110, 111, 113, 127, 128, 136, 206, 238, 269, 302, 582, 789, 901, 1155, 1292], "dimens": [107, 109, 111, 113, 127, 128, 136, 302, 597, 789, 901, 1166, 1292], "supportsinterchang": 108, "allow_copi": [108, 157, 261, 302, 1273, 1292], "interchang": [108, 157], "__dataframe__": 108, "convers": [108, 123, 157, 206, 207, 238, 239, 258, 261, 262, 302, 395, 673, 674, 675, 679, 801, 991, 1060, 1246, 1247, 1248, 1252, 1272, 1273, 1274, 1292], "latest": [108, 122, 133, 157, 421, 422, 436, 458, 553, 673, 675, 733, 789, 1021, 1022, 1036, 1246, 1248], "from_panda": 108, "from_arrow": 108, "effici": [108, 120, 123, 205, 207, 302, 542, 789], "convert": [108, 112, 122, 123, 129, 133, 157, 257, 258, 259, 260, 261, 262, 264, 302, 350, 351, 385, 395, 425, 428, 531, 532, 541, 542, 565, 591, 642, 655, 673, 674, 675, 676, 677, 679, 684, 789, 901, 905, 945, 946, 959, 991, 1025, 1028, 1132, 1133, 1215, 1228, 1246, 1247, 1248, 1249, 1250, 1252, 1258, 1261, 1271, 1272, 1273, 1274, 1282, 1292], "panda": [108, 112, 140, 189, 262, 302, 414, 415, 694, 789, 828, 901, 1014, 1015, 1274, 1275, 1292], "pd": [108, 112, 694, 789, 1274, 1275, 1292], "df_pd": 108, "dfi": [108, 157], "strict": [109, 110, 113, 161, 302, 356, 361, 632, 636, 643, 655, 673, 674, 675, 677, 679, 789, 807, 901, 950, 955, 1043, 1186, 1205, 1209, 1216, 1228, 1246, 1247, 1248, 1250, 1252, 1292], "clone": [109, 110, 111, 112, 113, 162, 261, 302, 808, 901, 964, 1273, 1282, 1292], "dimension": [109, 111, 113, 261, 302, 901, 1292], "exactli": [109, 110, 113, 141, 142, 143, 144, 147, 148, 150, 302, 664, 665, 671, 672, 736, 901, 1194, 1237, 1238, 1244, 1245, 1292], "infer_schema_length": [110, 113, 118, 119, 120, 123, 127, 132, 136, 302, 644, 645, 901, 1217, 1218], "NOT": [110, 205, 302, 532, 551, 1300], "typic": [110, 120, 137, 212, 302, 400, 906, 996, 1141, 1292], "clearer": 110, "partial": [110, 118, 132, 302, 901], "scan": [110, 113, 118, 119, 120, 127, 132, 133, 134, 135, 136, 137, 138, 189, 190, 192, 193, 236, 302, 644, 645, 821, 828, 829, 831, 832, 833, 840, 855, 901, 1217, 1218], "slow": [110, 113, 118, 119, 120, 127, 132, 136, 302, 317, 383, 544, 603, 644, 645, 789, 889, 901, 980, 1171, 1217, 1218, 1292], "present": [110, 148, 476, 543, 669, 670, 789, 821, 901, 1140, 1282, 1292], "np": [111, 178, 261, 302, 460, 690, 789, 824, 901, 1057, 1071, 1076, 1080, 1081, 1184, 1185, 1264, 1292], "ndarrai": [111, 178, 261, 302, 460, 690, 789, 824, 901, 1057, 1184, 1185, 1188, 1264, 1273, 1292], "numpi": [111, 140, 165, 206, 238, 239, 258, 261, 262, 302, 542, 573, 574, 603, 789, 901, 1071, 1076, 1080, 1081, 1150, 1151, 1171, 1273, 1274, 1282, 1292], "columnar": [111, 113, 206, 238, 302], "interpret": [111, 113, 118, 119, 132, 302, 901], "yield": [111, 113, 118, 119, 120, 132, 173, 175, 205, 266, 302, 542, 581, 789, 901, 1044, 1050, 1292], "conclus": [111, 113, 302, 901], "datetimeindex": 112, "nan_to_nul": [112, 302, 901, 1292], "include_index": 112, "instal": [112, 118, 119, 121, 124, 126, 165, 262, 302, 863, 901, 1274, 1292], "nan": [112, 148, 157, 176, 262, 302, 389, 390, 442, 443, 451, 462, 464, 470, 480, 482, 483, 484, 489, 539, 545, 559, 573, 574, 575, 576, 603, 696, 718, 789, 822, 901, 915, 919, 985, 986, 1052, 1080, 1081, 1150, 1151, 1171, 1273, 1274, 1292, 1301], "nameless": 112, "enumer": [112, 118, 119, 132, 207, 302], "regardless": [112, 188, 191, 209, 302, 395, 646, 779, 991, 1219], "pleas": [112, 120, 121, 189, 302, 305, 719, 731, 736, 828, 901, 1292, 1296], "reset_index": [112, 189, 302, 828, 901], "prior": 112, "pd_df": 112, "pd_seri": 112, "its": [114, 140, 173, 302, 394, 422, 436, 599, 628, 779, 789, 959, 990, 1022, 1036, 1044, 1168, 1292], "repr": [114, 148, 150], "trim": 114, "whitespac": [114, 651, 661, 667, 668, 669, 670, 1224, 1234, 1240, 1241, 1242, 1243], "prompt": 114, "extract": [114, 393, 396, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 585, 641, 642, 644, 645, 646, 662, 664, 789, 989, 992, 993, 994, 995, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1214, 1215, 1217, 1218, 1219, 1235], "to_init_repr": [114, 302, 1292], "truncat": [114, 118, 132, 187, 189, 192, 206, 238, 239, 258, 302, 828, 831, 851, 901], "identifi": [114, 120, 218, 225, 267, 279, 302, 846, 871, 901], "compound": [114, 239, 302, 906], "neither": [114, 123, 129, 240, 302, 351, 532, 946, 1133], "source_ac": 114, "source_cha": 114, "ident": [114, 162, 163, 302, 425, 599, 600, 789, 808, 809, 901, 964, 968, 1025, 1168, 1169, 1292], "timestamp": [114, 189, 192, 302, 421, 422, 436, 742, 828, 831, 901, 1021, 1022, 1036], "tor_id": 114, "nnel_id": 114, "\u03bc": [114, 148, 161, 189, 206, 236, 238, 239, 258, 271, 302, 391, 392, 394, 395, 396, 397, 400, 402, 406, 409, 411, 414, 415, 416, 418, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 601, 604, 605, 607, 610, 611, 612, 673, 675, 734, 735, 736, 742, 789, 807, 828, 837, 855, 901, 906, 987, 988, 990, 991, 992, 993, 996, 997, 998, 1004, 1005, 1011, 1014, 1015, 1016, 1018, 1021, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1246, 1248], "asia": [114, 906, 992, 993, 1026], "tokyo": [114, 906], "123456780": 114, "9876543210": 114, "56": [114, 692, 789], "59": [114, 147, 167, 302, 394, 411, 423, 733, 775, 776, 777, 814, 901, 906, 990, 1011, 1023], "663053": 114, "jst": [114, 906], "803065983": 114, "2055938745": 114, "38": [114, 148], "18": [114, 167, 219, 236, 302, 377, 422, 436, 439, 470, 486, 564, 601, 605, 607, 789, 814, 847, 851, 855, 901, 906, 1039, 1248], "050545": 114, "source_actor_id": 114, "source_channel_id": 114, "to_list": [114, 236, 302, 1205, 1216, 1292], "uint32": [115, 140, 161, 173, 236, 278, 302, 327, 332, 333, 372, 460, 463, 490, 494, 495, 511, 595, 600, 601, 634, 635, 647, 648, 690, 694, 719, 746, 749, 789, 807, 855, 880, 901, 906, 923, 927, 928, 955, 1043, 1044, 1077, 1095, 1096, 1112, 1169, 1186, 1207, 1208, 1220, 1221, 1275, 1292], "regular": [115, 206, 237, 238, 271, 278, 302, 447, 632, 634, 635, 640, 641, 642, 643, 656, 657, 738, 789, 880, 901, 906, 1205, 1207, 1208, 1213, 1214, 1215, 1216, 1229, 1230], "uint64": [115, 194, 236, 278, 302, 332, 333, 465, 494, 495, 594, 601, 789, 855, 880, 901, 927, 928, 1061, 1095, 1096, 1163, 1292], "bigidx": 115, "read": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 175, 302, 386, 459, 542, 779, 789, 815, 821, 901, 1050, 1292], "over": [116, 118, 119, 120, 122, 132, 148, 158, 175, 205, 206, 207, 212, 237, 238, 239, 266, 279, 282, 288, 302, 317, 383, 386, 452, 541, 542, 544, 552, 554, 555, 556, 557, 565, 566, 592, 604, 605, 606, 607, 608, 610, 611, 612, 708, 722, 723, 726, 727, 740, 751, 752, 753, 764, 789, 883, 889, 906, 913, 980, 1050, 1141, 1172, 1173, 1175, 1179, 1292], "fetch": [116, 132, 210, 302, 808, 810, 833, 840, 901], "ideal": 116, "read_csv_batch": 116, "tpch": [116, 119], "tables_scale_100": [116, 119], "lineitem": [116, 119, 121], "tbl": [116, 119], "try_parse_d": [116, 118, 119, 132], "n_row": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 207, 302, 821, 901], "handler": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 386, 789, 815, 901], "builtin": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 386, 789, 815, 901], "stop": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 604, 605, 607, 610, 611, 612, 789, 988, 991, 997, 998, 1005, 1008, 1011, 1016, 1022, 1027], "has_head": [118, 119, 123, 132], "new_column": [118, 119, 123, 132, 232, 233, 302], "comment_prefix": [118, 119, 132], "skip_row": [118, 119, 132], "missing_utf8_is_empty_str": [118, 119, 132], "ignore_error": [118, 119, 128, 132, 136], "n_thread": [118, 119], "8192": 118, "csvencod": [118, 119, 132], "low_memori": [118, 119, 130, 132, 136, 137], "skip_rows_after_head": [118, 119, 132], "row_index_nam": [118, 119, 124, 126, 130, 132, 135, 136, 137], "row_index_offset": [118, 119, 124, 126, 130, 132, 135, 136, 137], "sample_s": [118, 119], "eol_char": [118, 119, 132], "raise_if_empti": [118, 119, 123, 129, 132], "truncate_ragged_lin": [118, 132], "fsspec": [118, 119, 124, 126, 130, 133, 134, 135, 137, 140], "remot": [118, 119, 124, 126], "autogener": [118, 119, 132], "column_x": [118, 119, 132], "shorter": [118, 119, 132, 532, 746, 747], "comment": [118, 119, 132], "instanc": [118, 119, 130, 132, 135, 137, 148, 150, 155, 161, 175, 181, 302, 361, 553, 604, 605, 606, 607, 608, 610, 611, 612, 722, 726, 740, 785, 789, 807, 842, 879, 880, 901, 955, 1050, 1292], "escap": [118, 119, 121, 132], "complet": [118, 120, 132, 1273, 1292], "wherea": [118, 132, 236, 302, 422, 436, 573, 574, 601, 789, 833, 840, 855, 901, 1022, 1036, 1150, 1151, 1292], "would": [118, 119, 132, 327, 338, 507, 542, 544, 552, 592, 713, 789, 922, 933, 1108, 1161, 1273, 1292], "prefer": [118, 119, 122, 132, 151, 175, 206, 212, 237, 238, 288, 302, 447, 544, 789, 901, 1050, 1141, 1292, 1301], "treat": [118, 119, 132, 632, 635, 643, 656, 657, 779, 1205, 1208, 1216, 1229, 1230], "10000": [118, 207, 302], "issu": [118, 119, 120, 123, 132, 302, 376, 377, 688, 789, 974, 975, 1262, 1292], "iso8601": [118, 119, 132], "succe": [118, 119, 132], "cpu": [118, 119], "system": [118, 119, 395, 991], "buffer": [118, 119, 120, 173, 206, 302, 1044, 1292], "modifi": [118, 119, 132, 152, 155, 175, 197, 205, 206, 273, 302, 328, 421, 439, 632, 640, 641, 643, 656, 657, 789, 912, 1021, 1039, 1050, 1205, 1213, 1214, 1216, 1229, 1230, 1251, 1253, 1254, 1292], "upper": [118, 119, 120, 173, 189, 192, 302, 366, 367, 467, 471, 532, 566, 699, 710, 731, 732, 734, 735, 776, 777, 789, 828, 831, 901, 965, 966, 1044, 1063, 1067, 1139, 1279, 1292], "bound": [118, 119, 173, 189, 192, 302, 338, 366, 367, 368, 471, 505, 507, 530, 532, 538, 699, 710, 731, 732, 734, 735, 776, 777, 789, 828, 831, 901, 933, 965, 966, 967, 1044, 1067, 1106, 1108, 1131, 1139, 1279, 1292], "lossi": [118, 119, 132], "decod": [118, 119, 644], "expens": [118, 119, 130, 132, 136, 137, 149, 151, 189, 190, 192, 193, 206, 212, 236, 237, 238, 239, 266, 267, 302, 317, 544, 789, 814, 828, 829, 831, 832, 855, 871, 901, 1050, 1141, 1292, 1301], "aggreg": [118, 119, 130, 181, 188, 189, 191, 192, 213, 215, 217, 220, 223, 227, 228, 229, 236, 251, 252, 269, 272, 280, 281, 284, 286, 302, 311, 453, 468, 540, 542, 544, 581, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 704, 705, 706, 707, 722, 723, 724, 725, 726, 727, 728, 729, 740, 745, 754, 755, 757, 759, 760, 764, 772, 773, 789, 828, 829, 831, 832, 842, 843, 844, 845, 848, 849, 852, 855, 866, 867, 874, 881, 882, 885, 887, 901, 905, 1064, 1170, 1171, 1172, 1173, 1175, 1178, 1179, 1180, 1292], "parser": 118, "regard": [118, 718], "sens": [118, 124, 126, 135, 219, 271, 302, 581, 789, 847, 901], "particular": [118, 124, 126, 135, 173, 302, 1044, 1292], "usernam": [118, 121, 124, 126, 135], "password": [118, 121, 124, 126, 135], "skip": [118, 119, 123, 130, 132, 137, 269, 302, 913, 1141, 1292], "sampl": [118, 119, 288, 302, 625, 789, 889, 1199, 1292], "estim": [118, 119, 159, 173, 302, 318, 445, 446, 487, 709, 789, 804, 901, 1044, 1046, 1047, 1090, 1292], "alloc": [118, 119, 173, 230, 302, 789, 905, 1044, 1292], "encount": [118, 119, 132, 189, 192, 302, 573, 574, 644, 646, 718, 722, 740, 789, 828, 831, 901, 1150, 1151, 1217, 1219, 1292], "window": [118, 119, 132, 189, 190, 192, 193, 236, 302, 383, 422, 436, 444, 445, 446, 542, 544, 555, 581, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 716, 766, 767, 789, 828, 829, 831, 832, 855, 901, 980, 1022, 1036, 1045, 1046, 1047, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292], "rn": [118, 119, 132], "go": [118, 119, 132, 261, 302, 638, 1211], "nodataerror": [118, 119, 123, 129, 132], "lazili": [118, 119, 132, 133, 134, 135, 136, 137, 811, 901], "glob": [118, 119, 132, 135, 136, 137], "incorrectli": [118, 189, 190, 192, 193, 236, 302, 532, 601, 789, 828, 829, 831, 832, 855, 901], "continu": [118, 130, 384, 589, 625, 789, 981, 1159, 1199, 1292], "benchmark": [118, 130], "demonstr": 118, "birthdai": 118, "alic": 118, "1995": 118, "bob": [118, 219, 302, 847, 901], "charli": 118, "2002": [118, 404, 418, 1000, 1018, 1040], "08": [118, 141, 142, 143, 144, 148, 167, 209, 236, 302, 394, 414, 415, 422, 601, 673, 734, 736, 789, 814, 855, 901, 906, 1022, 1036, 1246], "50000": 119, "batchedcsvread": 119, "upon": 119, "creation": 119, "gather": [119, 183, 255, 302, 327, 461, 506, 530, 690, 691, 713, 789, 826, 869, 901, 922, 1058, 1107, 1131, 1264, 1265, 1292], "done": [119, 138, 155, 159, 161, 209, 302, 316, 318, 361, 581, 789, 804, 807, 837, 901, 955, 1292], "next_batch": 119, "big": 119, "interest": [119, 425, 428, 1025, 1028], "seen_group": 119, "big_fil": 119, "df_current_batch": 119, "partition_df": 119, "partition_bi": [119, 207, 302, 555], "as_dict": [119, 225, 302], "fh": 119, "write_csv": [119, 132, 302], "els": [119, 779], "connectionorcursor": 120, "iter_batch": 120, "execute_opt": [120, 121], "cursor": 120, "client": 120, "odbc": 120, "packag": [120, 123, 905], "establish": 120, "async": [120, 811, 901], "though": [120, 189, 302, 785, 828, 901], "aris": 120, "happen": [120, 395, 589, 789, 991, 1159, 1292], "report": 120, "resultset": 120, "manner": 120, "veri": [120, 206, 266, 302, 544, 789, 889], "poor": 120, "mani": [120, 121, 175, 302, 658, 1050, 1231, 1292], "trip": 120, "still": [120, 121], "exact": [120, 146, 148, 150, 209, 248, 302, 318, 671, 672, 673, 674, 675, 696, 789, 1246, 1247, 1248, 1272, 1292], "incom": 120, "read_arrow_batches_from_odbc": 120, "read_database_uri": 120, "wide": [120, 187, 218, 269, 302, 846, 901], "snowflak": [120, 121], "variou": [120, 302, 789, 901, 906, 1292], "facil": 120, "initialis": [120, 155, 901], "flight": 120, "flightsql": 120, "flight_sql": 120, "about": [120, 625, 632, 640, 641, 643, 656, 657, 789, 905, 1199, 1205, 1213, 1214, 1216, 1229, 1230, 1292, 1301], "notabl": 120, "dremio": 120, "influxdb": 120, "notic": [120, 302, 901, 1292], "dbapi2": 120, "connectorx": [120, 121, 140], "optimis": [120, 212, 239, 288, 302, 901, 1141, 1187, 1292, 1301], "translat": 120, "conn": 120, "url": [120, 121, 130, 137, 640, 642, 1213, 1215], "render_as_str": 120, "hide_password": 120, "abl": 120, "relat": [120, 155, 656, 657, 906, 1229, 1230], "k\u00f9zudb": 120, "cypher": 120, "test_data": 120, "user_conn": 120, "normalised_scor": 120, "uint8": [120, 145, 147, 161, 260, 261, 269, 302, 376, 377, 596, 688, 703, 789, 807, 901, 906, 974, 975, 1165, 1262, 1292, 1301], "parameteris": 120, "metric": 120, "alchemy_conn": 120, "qmark": 120, "variad": 120, "1000": [120, 123, 173, 260, 278, 302, 318, 789, 880, 901, 1031, 1137, 1271, 1292, 1301], "localhost": 120, "5432": 120, "uid": 120, "usr": 120, "pwd": 120, "max_text_s": 120, "max_binary_s": 120, "do_someth": 120, "kuzu_db_conn": 120, "session": 120, "ext": 120, "create_async_engin": 120, "async_engin": 120, "aiosqlit": 120, "surrealdb": 120, "surreal": 120, "surrealhttp": 120, "surreal_query_to_fram": 120, "8000": 120, "rpc": 120, "partition_on": 121, "partition_rang": 121, "partition_num": 121, "dbreadengin": 121, "raw": 121, "warehous": 121, "role": 121, "caller": [121, 219, 302, 532, 842, 847, 883, 889, 901], "respons": [121, 219, 302, 847, 901], "come": [121, 189, 302, 414, 415, 487, 532, 789, 828, 900, 901, 1014, 1015, 1090, 1292], "transfer": 121, "document": [121, 123, 302, 305, 425, 428, 646, 673, 674, 675, 679, 785, 959, 1025, 1028, 1219, 1246, 1247, 1248, 1252, 1292, 1296], "redshift": 121, "mysql": 121, "mariadb": 121, "clickhous": 121, "oracl": 121, "bigqueri": 121, "github": [121, 302], "sfu": 121, "connector": 121, "destin": 121, "develop": [121, 148, 150], "read_databas": 121, "usual": [121, 391, 987], "urllib": 121, "quote_plu": 121, "word": [121, 656, 657, 669, 670], "3f": [121, 673, 675, 1246, 1248], "20word": 121, "explicitli": [121, 123, 146, 148, 155, 302, 771, 800], "test_tabl": 121, "compani": 121, "testdb": 121, "public": [121, 302, 789, 801, 901, 1292], "myrol": 121, "delta_table_opt": [122, 133], "root": [122, 133, 364, 486, 541, 554, 564, 565, 567, 569, 571, 572, 587, 629, 687, 788, 789, 961, 1202, 1292], "absolut": [122, 133, 134, 141, 142, 143, 144, 309, 444, 445, 446, 789, 908, 1045, 1046, 1047, 1292], "avoid": [122, 238, 302, 312, 789], "year": [122, 133, 189, 209, 236, 271, 302, 404, 405, 418, 419, 422, 436, 437, 601, 604, 605, 606, 607, 608, 610, 611, 612, 730, 731, 732, 733, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1000, 1001, 1018, 1019, 1022, 1036, 1037], "2021": [122, 133, 161, 167, 187, 189, 271, 302, 673, 750, 807, 814, 828, 901, 906, 992, 993, 1001, 1026, 1086, 1246, 1292], "aw": [122, 130, 133, 137], "googl": [122, 133, 134], "service_account": [122, 133], "service_account_json_absolute_path": [122, 133], "az": [122, 133, 134], "adl": [122, 133, 134], "abf": [122, 133, 134], "azure_storage_account_nam": [122, 133, 134], "azure_storage_account_kei": [122, 133, 134], "without_fil": [122, 133, 134], "track": [122, 133, 134, 212, 302, 532, 1300], "sheet_id": [123, 129], "sheet_nam": [123, 129], "excelspreadsheetengin": 123, "engine_opt": 123, "read_opt": 123, "spreadsheet": [123, 129, 227, 302], "calamin": 123, "fastexcel": [123, 140], "xlsb": 123, "xl": 123, "pyxlsb": [123, 140], "openpyxl": [123, 140], "sheetnam": [123, 129], "nor": [123, 129, 240, 302], "xlsx2csv": [123, 140], "read_csv": [123, 132], "refin": 123, "significantli": [123, 212, 288, 302, 1141, 1292, 1301], "potenti": [123, 132, 135, 136, 206, 237, 239, 302, 564, 814, 901, 905], "unabl": 123, "julian": 123, "major": 123, "dramat": 123, "modul": [123, 788, 906, 1301], "bind": 123, "primari": [123, 1301], "constructor": [123, 150], "load_workbook": 123, "open_workbook": 123, "load_sheet_by_nam": 123, "influenc": [123, 821, 842, 901], "pipelin": 123, "skip_empty_lin": 123, "correct": [123, 129, 445, 446, 487, 605, 606, 607, 608, 609, 610, 612, 625, 789, 841, 842, 901, 905, 1046, 1047, 1090, 1177, 1199, 1292], "known": [123, 148, 351, 532, 604, 605, 606, 607, 608, 610, 611, 612, 789, 883, 889, 946, 1133], "better": [123, 212, 261, 288, 302, 544, 648, 789, 889, 1184, 1187, 1221, 1292], "detect": 123, "memory_map": [124, 130, 135], "greatli": [124, 135], "repeat": [124, 135, 593, 595, 762, 780, 789], "That": [124, 841, 842, 901], "filenam": 124, "my_fil": 124, "write_ipc": [124, 302], "read_ndjson": 127, "becaus": [128, 136, 173, 189, 192, 210, 212, 269, 288, 302, 502, 828, 831, 889, 901, 913, 1044, 1103, 1141, 1292], "openoffic": 129, "od": [129, 801], "parallelstrategi": [130, 137], "use_statist": [130, 137], "hive_partit": [130, 137], "retri": [130, 135, 137], "row_group": [130, 137], "hive": [130, 137], "prune": [130, 137, 842, 901], "gcp": [130, 134, 137], "stabl": [130, 160, 165, 167, 194, 240, 265, 302, 465, 537, 789, 805, 814, 846, 865, 870, 901, 1061, 1292], "read_tabl": 130, "scan_parquet": [130, 138], "scan_pyarrow_dataset": [130, 137], "contribut": [130, 606, 608, 610, 612, 789], "with_column_nam": 132, "push": [132, 135, 136, 137, 138], "down": [132, 135, 136, 137, 138, 456, 789, 1056, 1292], "therebi": [132, 135, 136], "realloc": [132, 135, 136, 175, 302, 1050, 1292], "headerless": 132, "my_long_fil": 132, "thing": [132, 139], "less": [132, 209, 302, 489, 539, 542, 665, 789, 837, 901, 1238, 1301], "breezah": 132, "languag": [132, 189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "hard": [132, 841, 842, 901], "mydf": 132, "lambda": [132, 158, 181, 212, 226, 227, 231, 288, 302, 317, 351, 444, 445, 446, 532, 540, 541, 542, 544, 565, 566, 722, 723, 740, 752, 753, 764, 789, 841, 842, 850, 853, 889, 901, 913, 946, 1045, 1046, 1047, 1133, 1141, 1292], "lower": [132, 167, 189, 192, 229, 294, 302, 366, 368, 471, 538, 541, 565, 590, 594, 608, 710, 731, 732, 734, 735, 763, 776, 777, 789, 814, 828, 831, 852, 895, 901, 965, 967, 982, 1067, 1139, 1160, 1163, 1176, 1279, 1292], "simpli": [132, 581, 722, 740, 789], "idx": [132, 189, 207, 278, 302, 338, 351, 532, 828, 880, 901, 946, 1133, 1216], "uint16": [132, 376, 377, 688, 789, 906, 974, 975, 1262, 1292], "u16": [132, 148, 1301], "eu": [133, 134], "central": [133, 134, 487, 625, 789, 1090, 1199, 1292], "iceberg": [134, 801], "pyiceberg": [134, 140], "secret": [134, 137], "adlf": 134, "my": [134, 138, 680, 1253], "oauth": 134, "token": 134, "ya29": 134, "dr": 134, "afm": 134, "py": 134, "impl": 134, "fsspecfileio": 134, "give": [135, 136, 209, 218, 267, 302, 401, 487, 595, 696, 789, 801, 846, 871, 901, 997, 1090, 1272, 1292], "read_parquet": 137, "east": 137, "allow_pyarrow_filt": 138, "comparison": 138, "dset": 138, "folder": 138, "04": [138, 161, 167, 189, 271, 302, 394, 395, 414, 415, 421, 422, 425, 428, 429, 430, 433, 435, 439, 604, 605, 607, 610, 611, 612, 673, 734, 736, 789, 807, 814, 828, 901, 906, 991, 1005, 1011, 1014, 1015, 1016, 1021, 1025, 1028, 1029, 1030, 1033, 1035, 1039, 1246], "seed": [139, 194, 240, 302, 465, 519, 592, 615, 621, 789, 1061, 1120, 1161, 1183, 1195, 1292], "shuffl": [139, 240, 288, 302, 519, 615, 789, 889, 1120, 1183, 1292], "platform": 140, "maco": 140, "arm64": 140, "arm": 140, "64bit": [140, 594, 789, 1163, 1292], "main": [140, 811, 901], "feb": 140, "2024": [140, 396, 397, 402, 406, 409, 411, 416, 423, 426, 736, 906], "21": [140, 167, 219, 252, 302, 393, 604, 605, 607, 610, 611, 612, 742, 789, 814, 847, 901, 906, 989], "clang": 140, "1500": [140, 149], "adbc_driver_manag": 140, "cloudpickl": 140, "hvplot": [140, 302, 305, 1292, 1296], "matplotlib": [140, 851, 863, 901], "nest_asyncio": 140, "26": [140, 167, 302, 400, 437, 814, 901, 996], "pydant": 140, "28": [140, 257, 302, 310, 421, 439, 789, 1021, 1039, 1301], "check_row_ord": [141, 142], "check_column_ord": [141, 142], "check_dtyp": [141, 142, 143, 144], "check_exact": [141, 142, 143, 144], "rtol": [141, 142, 143, 144], "atol": [141, 142, 143, 144], "categorical_as_str": [141, 142, 143, 144], "assert": [141, 142, 143, 144, 146, 148, 150, 236, 302, 801, 906], "assertionerror": [141, 142, 143, 144], "compar": [141, 142, 143, 144, 172, 182, 302, 442, 443, 462, 464, 471, 489, 539, 575, 576, 789, 959, 1043, 1186, 1292], "unsort": [141, 142], "toler": [141, 142, 143, 144, 209, 302, 837, 901], "inexact": [141, 142, 143, 144], "share": [141, 142, 143, 144, 173, 302, 1044, 1292], "assert_series_equ": [141, 144, 1043, 1292, 1301], "assert_frame_not_equ": [141, 144], "pytest": [141, 143], "worthwhil": [141, 143], "shorten": [141, 143], "traceback": [141, 142, 143, 144], "tb": [141, 143, 173, 302, 1044, 1292], "short": [141, 143], "tend": [141, 143], "unhelpfulli": [141, 143], "assert_frame_equ": [142, 143, 172, 302, 1301], "assert_series_not_equ": [142, 143], "check_nam": [143, 144], "searchstrategi": [145, 147, 148, 150], "null_prob": [145, 148, 150], "percentag": [145, 148, 150, 582, 789, 1155, 1292], "chanc": [145, 148, 150, 1301], "independ": [145, 146, 148, 150], "hypothesi": [145, 146, 147, 148, 149, 150, 1301], "sampled_from": [145, 1301], "unique_small_int": 145, "ccy": [145, 1301], "gbp": [145, 1301], "eur": [145, 187, 302, 1301], "jpy": [145, 1301], "min_col": [146, 148], "max_col": [146, 148], "standalon": [146, 148, 906], "mincol": 146, "assign": [146, 189, 287, 302, 351, 532, 581, 592, 664, 665, 789, 828, 888, 901, 946, 1133, 1161, 1237, 1238, 1292], "minimum": [146, 147, 148, 150, 181, 220, 221, 302, 444, 445, 446, 559, 574, 584, 592, 759, 760, 789, 848, 901, 1010, 1045, 1046, 1047, 1151, 1157, 1161, 1292, 1301], "especi": [146, 600, 789, 821, 901, 1169, 1292], "test_unique_xyz": 146, "assert_someth": 146, "punctuat": 146, "test_special_char_colname_init": 146, "inner_dtyp": [147, 150], "select_from": [147, 150], "min_siz": [147, 148, 150, 1301], "max_siz": [147, 148, 150, 1301], "anoth": [147, 161, 172, 182, 188, 302, 383, 392, 505, 530, 548, 551, 596, 643, 789, 807, 827, 878, 901, 980, 988, 1043, 1050, 1106, 1165, 1186, 1216, 1292], "randomli": 147, "innermost": 147, "2x": 147, "lst": 147, "11330": 147, "24030": 147, "116": 147, "zz": [147, 150, 167, 302, 814, 901], "uint8_pair": [147, 1301], "uint": [147, 1301], "zip": [147, 1301], "131": 147, "176": 147, "149": [147, 1301], "include_col": 148, "allow_infin": [148, 150], "allowed_dtyp": [148, 150, 1301], "excluded_dtyp": [148, 150], "describ": [148, 187, 302, 901, 1292], "desir": [148, 351, 439, 532, 946, 1039, 1133, 1292], "n_chunk": [148, 150, 302, 912, 1050, 1292], "randomis": 148, "onto": 148, "pct": 148, "preced": [148, 906], "disallow": [148, 150], "inf": [148, 150, 324, 384, 467, 473, 477, 589, 696, 789, 919, 971, 981, 1063, 1071, 1076, 1139, 1155, 1159, 1279, 1292], "exclud": [148, 150, 189, 302, 374, 377, 471, 789, 828, 901, 1067, 1086, 1292], "usag": [148, 150, 248, 302, 906, 1194, 1292], "deploi": [148, 150], "characterist": [148, 150], "concret": [148, 150], "test_repr": 148, "isinst": [148, 150], "0x11f561580": 148, "0565": 148, "34715": 148, "5844": 148, "33": [148, 167, 219, 302, 613, 789, 814, 847, 901, 1176, 1292], "076854": 148, "3382": 148, "17": [148, 173, 280, 302, 603, 613, 742, 776, 789, 881, 969, 971, 1022, 1171, 1292, 1301], "48662": 148, "7540": 148, "836271": 148, "4063": 148, "06": [148, 161, 271, 302, 394, 413, 420, 421, 422, 423, 436, 437, 807, 901, 906, 1021, 1022, 1036], "39092": 148, "1889": 148, "13": [148, 162, 163, 167, 176, 177, 186, 199, 210, 222, 236, 275, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 312, 396, 397, 399, 402, 403, 406, 407, 409, 410, 411, 412, 416, 417, 423, 424, 426, 552, 554, 601, 676, 716, 722, 725, 740, 773, 778, 789, 808, 809, 814, 822, 823, 839, 855, 876, 885, 887, 890, 891, 892, 893, 894, 895, 896, 901, 995, 999, 1006, 1009, 1012, 1017, 1022, 1024, 1036, 1037, 1074, 1077, 1084, 1086, 1141, 1249, 1292], "41": [148, 167, 302, 611, 789, 814, 901, 1301], "874455": 148, "15836": 148, "1755e": 148, "575050513": 148, "profil": [149, 151, 810, 901], "balanc": [149, 151, 1301], "set_environ": 149, "polars_hypothesis_profil": [149, 151], "max_data_s": 150, "normal": [150, 189, 302, 441, 487, 625, 789, 828, 901, 1042, 1090, 1199, 1292], "test_repr_is_valid_str": 150, "experi": 150, "create_list_strategi": [150, 1301], "polars_max_thread": 152, "behind": 152, "lock": 152, "reason": [152, 167, 302, 532, 542, 789, 814, 901], "temporarili": [152, 155, 189, 190, 192, 193, 236, 302, 601, 789, 828, 829, 831, 832, 855, 901], "pyspark": 152, "udf": [152, 158, 212, 226, 282, 288, 302, 317, 544, 585, 708, 753, 789, 850, 883, 889, 901, 913, 1141, 1292], "recommend": [152, 167, 206, 226, 302, 814, 901, 906], "thread_pool_s": 153, "easi": [155, 1301], "restor": 155, "restore_default": 155, "set_tbl_row": 155, "whatev": 155, "were": [155, 213, 215, 220, 252, 302, 596, 785, 789, 1165, 1292], "enter": 155, "advantag": [155, 226, 302], "set_": 155, "set_verbos": 155, "do_various_th": 155, "cleaner": 155, "breviti": 155, "vein": 155, "durat": [155, 209, 271, 302, 391, 399, 400, 403, 407, 410, 412, 417, 424, 429, 430, 431, 432, 433, 434, 435, 439, 694, 731, 732, 734, 735, 776, 777, 789, 837, 901, 906, 987, 995, 996, 999, 1006, 1009, 1012, 1017, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1275, 1292], "set_ascii_t": 155, "write_ascii_frame_to_stdout": 155, "sy": 155, "stdout": [155, 187, 302, 556], "nan_as_nul": 157, "polarsdatafram": 157, "notimplementederror": 157, "num_row": 157, "get_column": [157, 263, 302], "dtypekind": 157, "inference_s": [158, 212, 302], "256": [158, 212, 302, 1155, 1292], "map_row": [158, 302], "tri": [158, 212, 302], "approxim": [159, 302, 318, 709, 789, 804, 901, 1301], "hyperloglog": [159, 302, 318, 709, 789, 804, 901], "algorithm": [159, 302, 318, 633, 658, 709, 789, 804, 901, 1206, 1231], "cardin": [159, 302, 318, 709, 789, 804, 901], "k": [160, 239, 265, 266, 302, 360, 373, 487, 695, 789, 805, 870, 901, 954, 1090, 1276, 1292], "intoexpr": [160, 188, 189, 190, 191, 192, 193, 236, 242, 243, 246, 250, 265, 275, 276, 280, 302, 316, 335, 355, 358, 359, 450, 467, 471, 498, 499, 520, 521, 522, 523, 581, 596, 616, 618, 619, 628, 633, 658, 663, 664, 665, 671, 672, 705, 707, 713, 715, 716, 717, 718, 720, 722, 725, 726, 729, 733, 740, 755, 757, 760, 765, 768, 771, 773, 789, 805, 827, 828, 829, 830, 831, 832, 855, 857, 858, 861, 865, 870, 876, 877, 881, 901, 905, 930, 949, 952, 953, 1051, 1067, 1100, 1165, 1191, 1236, 1237, 1238, 1244, 1245, 1292], "nulls_last": [160, 250, 265, 302, 327, 347, 526, 627, 789, 805, 865, 870, 901, 922, 942, 1127, 1201, 1292], "smallest": [160, 265, 302, 360, 789, 805, 870, 901, 954, 1292], "largest": [160, 265, 302, 695, 789, 805, 870, 901, 1276, 1292], "bottom": [160, 302, 805, 901], "wors": [160, 265, 302, 805, 865, 870, 901], "search": [160, 209, 265, 302, 532, 633, 658, 805, 837, 865, 870, 901, 1206, 1231], "top_k": [160, 302, 360, 789, 805, 901, 954, 1292], "columnnameorselector": [161, 168, 170, 218, 225, 227, 239, 259, 267, 268, 269, 302, 807, 816, 817, 846, 871, 872, 901], "due": [161, 189, 209, 236, 239, 271, 302, 312, 361, 400, 418, 422, 436, 486, 564, 565, 567, 569, 571, 572, 587, 601, 604, 605, 606, 607, 608, 610, 611, 612, 687, 731, 732, 734, 735, 776, 777, 789, 807, 828, 837, 855, 901, 955, 996, 1018, 1022, 1036, 1292], "overflow": [161, 302, 361, 376, 377, 655, 677, 688, 789, 807, 901, 955, 974, 975, 1228, 1250, 1262, 1292], "2020": [161, 167, 187, 209, 236, 302, 305, 395, 400, 421, 425, 428, 429, 430, 431, 432, 433, 434, 435, 601, 673, 674, 675, 789, 807, 814, 855, 901, 906, 991, 996, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1246, 1247, 1248], "u8": [161, 259, 260, 269, 302, 596, 703, 789, 807, 901, 906, 1165, 1269, 1292, 1301], "tempor": [161, 189, 190, 192, 193, 206, 236, 238, 239, 258, 302, 366, 471, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 789, 801, 807, 828, 829, 831, 832, 855, 901, 906, 965, 1067, 1086, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "to_dict": [161, 302, 807, 901], "as_seri": [161, 257, 302, 807, 901, 981, 1159, 1292], "greater": [162, 209, 302, 462, 464, 471, 625, 653, 654, 665, 682, 789, 837, 901, 1067, 1199, 1226, 1227, 1238, 1255, 1292], "cheap": [162, 163, 243, 276, 302, 808, 809, 858, 877, 901, 964, 968, 1292], "deepcopi": [162, 302, 808, 901, 964, 1292], "appl": [164, 197, 208, 231, 234, 257, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 302, 598, 638, 666, 789, 836, 853, 884, 885, 887, 888, 890, 891, 892, 893, 894, 895, 896, 901, 1211, 1239], "banana": [164, 257, 284, 286, 289, 290, 291, 292, 293, 294, 295, 302, 598, 638, 666, 789, 885, 887, 890, 891, 892, 893, 894, 895, 896], "orang": [164, 283, 284, 286, 287, 289, 290, 292, 294, 295, 302, 884, 885, 887, 888, 890, 891, 893, 895, 896], "pairwis": [165, 302], "pearson": [165, 302, 487, 625, 718, 789, 1090, 1199, 1292], "correl": [165, 302, 718, 766], "coeffici": [165, 302, 625, 789, 1199, 1292], "corrcoef": [165, 302], "percentil": [167, 302, 814, 901, 982, 1292], "interpol": [167, 229, 294, 302, 452, 547, 590, 608, 763, 789, 814, 852, 895, 901, 982, 1160, 1176, 1292], "rollinginterpolationmethod": [167, 229, 294, 302, 590, 608, 763, 789, 814, 852, 895, 901, 982, 1160, 1176, 1292], "summari": [167, 302, 814, 901, 982, 1292], "midpoint": [167, 229, 294, 302, 590, 608, 763, 789, 814, 852, 895, 901, 982, 1160, 1176, 1292], "linear": [167, 200, 229, 294, 302, 470, 496, 547, 590, 608, 716, 717, 763, 789, 814, 835, 852, 895, 901, 982, 1066, 1097, 1160, 1176, 1292], "deem": [167, 302, 814, 901], "programmat": [167, 302, 814, 901], "versu": [167, 302, 814, 901], "interact": [167, 302, 814, 901], "explor": [167, 302, 814, 901], "glimps": [167, 195, 302], "median": [167, 227, 302, 452, 606, 789, 814, 878, 901, 982, 1174, 1292], "null_count": [167, 170, 302, 383, 789, 814, 901, 980, 982, 1060, 1292], "266667": [167, 302, 814, 901], "666667": [167, 200, 272, 290, 302, 444, 756, 789, 814, 835, 874, 891, 901, 1045, 1292], "std": [167, 302, 610, 789, 814, 901, 982, 1178, 1292], "101514": [167, 302, 814, 901], "071068": [167, 302, 814, 901], "36": [167, 302, 814, 901], "34": [167, 302, 673, 814, 901, 1246], "43": [167, 236, 302, 377, 601, 611, 789, 814, 855, 901], "70": [167, 302, 703, 789, 814, 901, 1090, 1292], "88": [167, 302, 814, 901], "90": [167, 302, 676, 814, 901, 1249], "49": [167, 302, 814, 901], "subset": [170, 223, 267, 302, 817, 871, 901], "preserv": [170, 178, 188, 191, 208, 212, 261, 262, 302, 389, 390, 453, 501, 622, 789, 817, 824, 836, 901, 985, 986, 1054, 1102, 1196, 1274, 1292], "behavior": [170, 302, 459, 505, 530, 543, 739, 748, 789, 817, 901, 981, 1106, 1131, 1140, 1159, 1292], "all_horizont": [170, 302, 704, 817, 901], "is_nul": [170, 302, 789, 817, 901, 1292], "null_equ": [172, 182, 302, 1043, 1186, 1292], "sizeunit": [173, 302, 1044, 1292], "heap": [173, 302, 789, 905, 1044, 1292], "bitmap": [173, 302, 1044, 1292], "therefor": [173, 302, 544, 779, 789, 1044, 1292], "structarrai": [173, 302, 1044, 1292], "constant": [173, 236, 302, 391, 450, 789, 855, 901, 987, 1044, 1051, 1292], "unchang": [173, 302, 543, 596, 694, 789, 841, 842, 883, 889, 901, 1044, 1140, 1165, 1275, 1292], "capac": [173, 248, 302, 1044, 1194, 1292], "ffi": [173, 302, 1044, 1292], "kb": [173, 302, 1044, 1292], "mb": [173, 302, 1044, 1292], "gb": [173, 302, 1044, 1292], "revers": [173, 302, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 541, 565, 567, 569, 587, 687, 721, 789, 901, 972, 973, 974, 975, 976, 977, 978, 979, 1292], "1_000_000": [173, 302, 1044, 1292], "17888890": [173, 302], "0601749420166": [173, 302], "more_column": [174, 244, 268, 302, 447, 738, 789, 820, 860, 872, 901], "long": [174, 218, 269, 302, 820, 846, 901], "letter": [174, 285, 296, 302, 447, 633, 641, 658, 738, 789, 820, 886, 897, 901, 906, 1206, 1214, 1231], "onlin": [175, 302, 1050, 1292], "rerun": [175, 302, 1050, 1292], "finish": [175, 302, 1050, 1292], "conveni": [175, 302, 912, 1050, 1292], "Not": [176, 302, 480, 482, 789, 822, 901], "fillnullstrategi": [177, 302, 452, 789, 823, 901, 1053, 1292], "matches_supertyp": [177, 302, 823, 901], "forward": [177, 209, 246, 302, 346, 414, 452, 458, 524, 618, 789, 823, 837, 861, 901, 941, 1014, 1053, 1125, 1191, 1292], "consecut": [177, 302, 354, 452, 458, 631, 789, 823, 901, 1053, 1204, 1292], "fill_nan": [177, 302, 789, 901, 1292], "intoexprcolumn": [178, 302, 334, 338, 339, 346, 360, 366, 367, 368, 450, 453, 497, 506, 509, 519, 524, 582, 586, 615, 618, 640, 662, 668, 669, 670, 682, 695, 710, 731, 732, 734, 735, 746, 747, 776, 777, 779, 789, 824, 861, 901, 929, 933, 934, 941, 954, 965, 966, 967, 1051, 1098, 1107, 1110, 1120, 1125, 1155, 1213, 1235, 1241, 1242, 1243, 1255, 1276, 1292], "constraint": [178, 302, 453, 486, 564, 565, 567, 569, 571, 572, 587, 687, 779, 789, 824, 901], "behav": [178, 302, 453, 544, 669, 670, 789, 824, 901], "eq": [178, 302, 443, 453, 789, 824, 901, 1292], "implicitli": [178, 302, 453, 779, 789, 824, 901], "is_in": [178, 302, 789, 1292], "get_column_index": [179, 302], "reduct": [181, 302], "supercast": [181, 302], "parent": [181, 302], "rule": [181, 302, 633, 658, 1206, 1231], "arithmet": [181, 302], "zip_with": [181, 302, 1292], "foo11": [181, 302], "bar22": [181, 302], "nth": [183, 255, 302, 461, 665, 691, 789, 826, 869, 901, 1058, 1238, 1265, 1292], "th": [183, 255, 302, 461, 506, 520, 625, 691, 789, 826, 869, 901, 1058, 1107, 1121, 1199, 1265, 1292], "retriev": [184, 302, 332, 333, 494, 495, 683, 927, 928, 1095, 1096, 1256], "max_items_per_column": [187, 302], "max_colname_length": [187, 302], "return_as_str": [187, 302, 556], "preview": [187, 302], "few": [187, 302], "exce": [187, 302], "ellipsi": [187, 302], "head": [187, 211, 254, 302, 316, 491, 789, 840, 901, 1092, 1263, 1292], "tail": [187, 195, 302, 316, 625, 789, 901, 1062, 1199, 1292], "usd": [187, 302, 1301], "named_bi": [188, 302, 827, 901], "groupbi": [188, 227, 302, 317, 544, 708, 753, 789, 901], "consist": [188, 191, 225, 302, 673, 827, 830, 901, 912, 1050, 1246, 1292], "agg": [188, 189, 192, 227, 236, 302, 311, 453, 455, 460, 463, 542, 544, 555, 627, 628, 702, 753, 789, 810, 811, 819, 821, 827, 828, 829, 831, 832, 851, 855, 859, 863, 901, 906], "Or": [188, 189, 209, 236, 250, 271, 280, 302, 581, 601, 628, 731, 732, 734, 735, 776, 777, 779, 789, 827, 828, 837, 855, 865, 881, 901], "index_column": [189, 190, 192, 193, 236, 302, 601, 789, 828, 829, 831, 832, 855, 901], "timedelta": [189, 190, 192, 193, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 837, 855, 901, 906, 1002, 1010, 1018, 1022, 1036, 1150, 1151, 1203, 1281, 1292], "period": [189, 190, 192, 193, 236, 302, 422, 436, 444, 445, 446, 582, 601, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 855, 901, 1022, 1036, 1045, 1046, 1047, 1155, 1292], "include_boundari": [189, 192, 302, 828, 831, 901], "closedinterv": [189, 190, 192, 193, 236, 302, 471, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 855, 901, 1067, 1292], "label": [189, 302, 384, 589, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 789, 828, 851, 901, 981, 1159, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "group_bi": [189, 191, 223, 227, 236, 271, 301, 302, 311, 453, 455, 460, 463, 542, 544, 627, 628, 702, 753, 789, 810, 811, 819, 821, 828, 830, 851, 855, 863, 900, 901, 906], "start_bi": [189, 192, 302, 828, 831, 901], "startbi": [189, 192, 302, 828, 831, 901], "check_sort": [189, 190, 192, 193, 236, 302, 601, 789, 828, 829, 831, 832, 855, 901], "dynamicgroupbi": [189, 192, 302], "member": [189, 302, 828, 901, 1075, 1292], "earliest": [189, 192, 302, 421, 422, 436, 673, 675, 733, 828, 831, 901, 1021, 1022, 1036, 1246, 1248], "datapoint": [189, 192, 302, 828, 831, 901], "descript": [189, 302, 828, 901], "ascend": [189, 190, 192, 193, 236, 302, 601, 605, 606, 607, 608, 610, 612, 789, 828, 829, 831, 832, 855, 901], "dynam": [189, 192, 302, 351, 532, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 789, 828, 831, 901, 905, 946, 1133, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "matter": [189, 190, 192, 193, 206, 236, 238, 239, 258, 302, 601, 669, 670, 789, 828, 829, 831, 832, 855, 901], "interv": [189, 190, 192, 193, 236, 271, 302, 384, 422, 436, 467, 471, 589, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 829, 831, 832, 855, 901, 981, 994, 997, 998, 1005, 1008, 1011, 1013, 1016, 1019, 1020, 1022, 1027, 1036, 1037, 1063, 1067, 1159, 1292], "_lower_boundari": [189, 302, 828, 901], "_upper_boundari": [189, 302, 828, 901], "harder": [189, 192, 302, 828, 831, 901], "inclus": [189, 190, 192, 193, 236, 302, 471, 601, 604, 605, 606, 607, 608, 610, 611, 612, 663, 664, 710, 731, 732, 734, 735, 746, 747, 776, 777, 789, 828, 829, 831, 832, 855, 901, 1067, 1236, 1237, 1292], "boundari": [189, 302, 366, 367, 368, 467, 789, 828, 901, 965, 966, 967, 1063, 1292], "mondai": [189, 192, 302, 436, 438, 828, 831, 901, 1036, 1038], "tuesdai": [189, 192, 302, 828, 831, 901], "wednesdai": [189, 192, 302, 425, 428, 828, 831, 901, 1025, 1028], "thursdai": [189, 192, 302, 828, 831, 901], "fridai": [189, 192, 302, 425, 428, 828, 831, 901, 1025, 1028], "saturdai": [189, 192, 302, 828, 831, 901], "sundai": [189, 192, 302, 425, 428, 438, 828, 831, 901, 1025, 1028, 1038], "weekli": [189, 192, 302, 436, 828, 831, 901, 1036], "week": [189, 192, 209, 236, 271, 302, 418, 422, 436, 438, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 831, 837, 855, 901, 906, 1018, 1022, 1036, 1038], "shift": [189, 192, 247, 302, 387, 500, 582, 619, 716, 789, 828, 831, 862, 901, 983, 1101, 1155, 1192, 1292], "front": [189, 192, 302, 828, 831, 901], "sorted": [189, 190, 192, 193, 236, 302, 828, 829, 831, 832, 855, 901], "verifi": [189, 190, 192, 193, 236, 302, 828, 829, 831, 832, 855, 901], "incorrect": [189, 190, 192, 193, 236, 302, 439, 542, 601, 617, 789, 828, 829, 831, 832, 855, 883, 889, 901, 1039, 1189, 1292], "roll": [189, 190, 193, 302, 414, 415, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 716, 766, 767, 789, 828, 829, 832, 901, 1014, 1015, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292], "re": [189, 205, 302, 414, 415, 425, 428, 828, 901, 1014, 1015, 1025, 1028, 1300], "1d": [189, 209, 236, 271, 302, 392, 418, 422, 430, 433, 436, 439, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 750, 776, 777, 789, 828, 837, 855, 901, 906, 988, 997, 1004, 1018, 1022, 1027, 1030, 1033, 1036], "set_index": [189, 302, 828, 901], "resampl": [189, 302, 828, 901], "unlik": [189, 302, 828, 901], "evenli": [189, 302, 828, 901], "upsampl": [189, 302, 828, 901], "1n": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "1u": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "1m": [189, 209, 236, 271, 302, 418, 422, 435, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1031, 1032, 1034, 1035, 1036], "millisecond": [189, 209, 236, 271, 302, 402, 411, 418, 422, 432, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 906, 1018, 1022, 1032, 1036], "minut": [189, 209, 236, 271, 302, 402, 406, 409, 416, 418, 422, 423, 433, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 733, 734, 735, 736, 775, 776, 777, 789, 828, 837, 855, 901, 906, 1018, 1022, 1033, 1036], "1h": [189, 209, 236, 271, 302, 400, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 996, 998, 1018, 1022, 1036], "hour": [189, 209, 236, 271, 302, 406, 409, 411, 416, 418, 422, 423, 430, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 733, 734, 735, 736, 775, 776, 777, 789, 828, 837, 855, 901, 906, 1018, 1022, 1030, 1036], "1w": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "1mo": [189, 209, 236, 271, 302, 395, 414, 415, 418, 421, 422, 429, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 991, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1029, 1036, 1037], "month": [189, 209, 236, 271, 302, 398, 414, 415, 418, 422, 425, 428, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 730, 731, 732, 733, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 994, 1014, 1015, 1018, 1022, 1025, 1028, 1036], "1q": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "quarter": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "1y": [189, 209, 236, 271, 302, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1018, 1022, 1036], "1i": [189, 209, 236, 271, 302, 418, 601, 604, 605, 606, 607, 608, 610, 611, 612, 789, 828, 837, 855, 901, 1018], "3d12h4m25": [189, 209, 236, 271, 302, 422, 436, 601, 731, 732, 734, 735, 776, 777, 789, 828, 837, 855, 901, 1022, 1036], "correspond": [189, 209, 236, 261, 271, 302, 405, 418, 422, 436, 544, 592, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 776, 777, 789, 810, 828, 837, 855, 901, 1001, 1018, 1022, 1036, 1161, 1292], "daylight": [189, 209, 236, 271, 302, 391, 400, 418, 422, 436, 601, 604, 605, 606, 607, 608, 610, 611, 612, 731, 732, 734, 735, 736, 776, 777, 789, 828, 837, 855, 901, 996, 1018, 1022, 1036], "10i": [189, 302, 828, 901], "datetime_rang": [189, 302, 392, 395, 414, 415, 418, 421, 422, 429, 430, 431, 432, 433, 434, 435, 436, 439, 604, 605, 607, 610, 611, 612, 731, 789, 828, 901, 987, 988, 991, 996, 997, 998, 1004, 1005, 1008, 1011, 1014, 1015, 1016, 1018, 1021, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "30m": [189, 302, 422, 436, 828, 901, 1022, 1036], "lower_bound": [189, 302, 366, 368, 471, 789, 828, 901, 965, 967, 1067, 1279, 1292], "upper_bound": [189, 302, 366, 367, 471, 532, 789, 828, 901, 965, 966, 1067, 1139, 1292], "bys": [189, 302, 828, 901], "int_rang": [189, 269, 278, 288, 302, 710, 749, 828, 842, 880, 889, 901], "2i": [189, 302, 828, 901], "3i": [189, 302, 828, 901], "a_agg_list": [189, 302, 828, 901], "rollinggroupbi": [190, 193, 236, 302], "more_bi": [191, 225, 250, 302, 628, 789, 830, 865, 901], "group_by_dynam": [192, 236, 302, 831, 855, 901], "_lower_bound": [192, 302, 831, 901], "_upper_bound": [192, 302, 831, 901], "seed_1": [194, 302, 465, 789, 1061, 1292], "seed_2": [194, 302, 465, 789, 1061, 1292], "seed_3": [194, 302, 465, 789, 1061, 1292], "hash": [194, 302, 789, 1292], "Its": [194, 302, 465, 789, 1061, 1292], "u64": [194, 278, 302, 465, 594, 789, 851, 880, 901, 1061, 1292], "10783150408545073287": [194, 302], "1438741209321515184": [194, 302], "10047419486152048166": [194, 302], "2047317070637311557": [194, 302], "ab": [195, 211, 254, 275, 302, 683, 685, 789, 876, 901, 1062, 1092, 1263, 1292], "in_plac": [197, 248, 273, 302, 1162, 1194, 1201, 1292], "grown": [197, 302], "insert_column": [198, 302], "intermedi": [200, 302, 835, 901, 1301], "333333": [200, 302, 486, 564, 789, 835, 901, 1155, 1180, 1292], "mask": [201, 203, 302, 356, 472, 474, 475, 478, 479, 485, 583, 584, 632, 636, 643, 789, 950, 1054, 1060, 1067, 1069, 1072, 1073, 1078, 1079, 1087, 1156, 1157, 1187, 1205, 1209, 1216, 1283, 1292], "visual": [201, 203, 302], "scalar": [204, 212, 237, 302, 616, 648, 662, 708, 750, 753, 789, 905, 1089, 1185, 1221, 1235, 1292], "With": [204, 246, 302, 346, 524, 618, 789, 861, 901, 941, 1089, 1125, 1191, 1292], "buffer_s": [206, 302], "fit": [206, 248, 269, 302, 620, 765, 789, 1193, 1194, 1292], "signific": [206, 212, 302, 317, 544, 614, 789, 1141, 1182, 1292], "4x": [206, 302], "materialis": [206, 207, 237, 238, 302], "rows_by_kei": [206, 238, 302], "iter_row": [207, 237, 238, 239, 302], "17_500": [207, 302], "klmnoopqrstuvwxyz": [207, 302], "__name__": [207, 302], "7500": [207, 302], "15_000": [207, 302], "record_batch": [207, 302], "to_arrow": [207, 302, 1292], "to_batch": [207, 302], "date32": [207, 302], "large_str": [207, 256, 262, 302], "15000": [207, 302], "2500": [207, 302], "left_on": [208, 209, 270, 302, 836, 837, 873, 901], "right_on": [208, 209, 270, 302, 836, 837, 873, 901], "suffix": [208, 209, 242, 275, 280, 302, 312, 358, 480, 482, 483, 484, 541, 565, 567, 570, 571, 572, 581, 587, 598, 638, 669, 672, 789, 836, 837, 857, 876, 878, 881, 901, 906, 952, 1211, 1245], "_right": [208, 209, 302, 836, 837, 901], "joinvalid": [208, 302, 836, 901], "join_nul": [208, 302, 836, 901], "fashion": [208, 302, 819, 821, 851, 863, 901], "semi": [208, 302, 836, 901], "anti": [208, 302, 836, 889, 901, 1184, 1187, 1292], "cross": [208, 302, 836, 901], "outer_coalesc": [208, 302, 836, 901], "coalesc": [208, 270, 302, 673, 836, 873, 901, 1246], "cartesian": [208, 302, 836, 901], "many_to_mani": [208, 302, 836, 901], "one_to_on": [208, 302, 836, 901], "one_to_mani": [208, 302, 836, 901], "many_to_on": [208, 302, 836, 901], "join_asof": [208, 302, 836, 901], "other_df": [208, 302], "ham_right": [208, 302, 836, 901], "by_left": [209, 302, 837, 901], "by_right": [209, 302, 837, 901], "asofjoinstrategi": [209, 302, 837, 901], "allow_parallel": [209, 302, 836, 837, 901], "force_parallel": [209, 302, 836, 837, 901], "asof": [209, 302, 837, 901], "rather": [209, 302, 459, 542, 556, 589, 600, 682, 789, 837, 901, 1159, 1169, 1255, 1292], "asof_join": [209, 302], "distanc": [209, 302, 467, 789, 837, 901, 1063, 1292], "plan": [209, 210, 302, 806, 810, 815, 819, 836, 837, 859, 863, 901], "forc": [209, 212, 261, 288, 302, 532, 836, 837, 889, 901, 1141, 1273, 1292], "gdp": [209, 302, 837, 901], "date_rang": [209, 271, 302, 398, 401, 419, 427, 438, 994, 1013, 1019, 1020, 1037, 1038], "2016": [209, 302, 837, 901], "4164": [209, 302, 837, 901], "4411": [209, 302, 837, 901], "4566": [209, 302, 837, 901], "4696": [209, 302, 837, 901], "4827": [209, 302], "2017": [209, 302, 837, 901], "2018": [209, 302, 421, 837, 901, 1021], "2019": [209, 302, 837, 901], "popul": [209, 302, 837, 901], "82": [209, 302, 837, 901], "66": [209, 270, 302, 611, 703, 789, 837, 873, 901, 1090, 1176, 1292], "83": [209, 302, 837, 901], "quit": [209, 302], "earlier": [209, 302], "later": [209, 302, 555, 859, 901], "request": [210, 302], "describe_plan": [210, 302], "unoptim": [210, 302], "describe_optimized_plan": [210, 302], "show_graph": [210, 302, 901], "un": [210, 302], "graphviz": [210, 302, 863, 901], "much": [212, 269, 288, 302, 383, 505, 530, 544, 647, 648, 753, 789, 889, 980, 1106, 1131, 1141, 1220, 1221, 1292], "intens": [212, 288, 302, 581, 789, 1141, 1292], "materi": [212, 239, 288, 302, 810, 851, 889, 901, 906, 1141, 1292], "parallelis": [212, 288, 302, 1141, 1292], "achiev": [212, 288, 302, 544, 648, 789, 981, 1141, 1159, 1221, 1292], "best": [212, 288, 302, 544, 789, 1141, 1292], "black": [212, 302, 355, 356, 357, 358, 359], "arbitrarili": [212, 302], "rearrang": [212, 302], "transform": [212, 302, 542, 678, 680, 681, 789], "lru_cach": [212, 302, 544, 789, 1141, 1292], "column_1": [212, 266, 302], "axi": [213, 215, 218, 220, 252, 302, 711, 712, 846, 901], "max_horizont": [213, 302, 754], "null_strategi": [215, 252, 302], "nullstrategi": [215, 252, 302], "mean_horizont": [215, 302, 756], "propag": [215, 252, 302, 339, 443, 509, 573, 574, 576, 631, 717, 789, 934, 1110, 1150, 1151, 1204, 1292], "spam": [215, 302, 641, 1214], "ignore_nul": [216, 253, 302, 313, 315, 339, 444, 445, 446, 509, 631, 704, 706, 717, 789, 910, 911, 934, 1045, 1046, 1047, 1110, 1204, 1282, 1292], "id_var": [218, 302, 846, 901], "value_var": [218, 302, 846, 901], "variable_nam": [218, 302, 846, 901], "value_nam": [218, 302, 846, 901], "unpivot": [218, 302, 846, 901], "massag": [218, 302, 846, 901], "measur": [218, 302, 846, 901], "steve": [219, 302, 847, 901], "elis": [219, 302, 847, 901], "ag": [219, 302, 847, 901], "anna": [219, 302, 847, 901], "megan": [219, 302, 847, 901], "thoma": [219, 302, 847, 901], "min_horizont": [220, 302, 759, 768], "what": [223, 302, 305, 542, 633, 658, 789, 1206, 1231, 1282, 1292, 1296], "pack": [223, 302], "expr_unique_subset": [223, 302], "df_nuniqu": [223, 302], "df_agg_nuniqu": [223, 302], "include_kei": [225, 239, 302], "offer": [226, 302, 585, 789, 850, 901], "fulli": [226, 240, 302], "cast_str_to_int": [226, 302, 850, 901], "col_nam": [226, 302, 779, 850, 901], "tdf": [226, 302, 850, 901], "aggregate_funct": [227, 302], "pivotagg": [227, 302], "sort_column": [227, 302], "section": [227, 302, 632, 640, 641, 643, 656, 657, 731, 732, 734, 735, 776, 777, 1205, 1213, 1214, 1216, 1229, 1230], "predefin": [227, 302], "predict": [227, 230, 271, 302], "transpos": [227, 302], "discoveri": [227, 302], "col1": [227, 302, 901, 1301], "col2": [227, 302, 901, 1301], "col3": [227, 302, 1301], "tanh": [227, 302, 789, 1292], "998347": [227, 302], "964028": [227, 302], "999954": [227, 302], "unique_column_valu": [227, 302], "column_nam": [231, 266, 302, 853, 901], "coo": [231, 302, 853, 901], "car": [231, 257, 302, 598, 789, 853, 901], "cam": [231, 302, 853, 901], "replace_column": [233, 302], "t_0": [236, 302, 601, 604, 605, 606, 607, 608, 610, 611, 612, 789, 855, 901], "t_1": [236, 302, 601, 604, 605, 606, 607, 608, 610, 611, 612, 789, 855, 901], "t_n": [236, 302, 601, 604, 605, 606, 607, 608, 610, 611, 612, 789, 855, 901], "strptime": [236, 302, 421, 601, 789, 855, 901, 1021], "set_sort": [236, 271, 302, 601, 789, 837, 855, 901, 1292], "2d": [236, 261, 302, 418, 601, 750, 789, 855, 901, 987, 994], "sum_a": [236, 302, 601, 789, 855, 901], "min_a": [236, 302, 601, 789, 855, 901], "max_a": [236, 302, 601, 789, 855, 901], "by_pred": [237, 302], "accord": [237, 302, 543, 589, 731, 732, 734, 735, 776, 777, 789, 1001, 1159, 1292], "mutual": [237, 302], "exclus": [237, 302, 703, 710, 746, 747, 789], "clariti": [237, 302], "toomanyrowsreturnederror": [237, 302], "norowsreturnederror": [237, 302], "inherit": [237, 302], "rowserror": [237, 302], "littl": [238, 302], "peak": [238, 302, 583, 584, 789, 1156, 1157, 1292], "flat": [239, 302, 503, 597, 789, 1104, 1166, 1292], "high": [239, 302, 589, 789, 801, 1159, 1292], "cost": [239, 302], "reoconstruct": [239, 302], "defaultdict": [239, 302], "assum": [239, 302, 841, 842, 883, 889, 901], "with_replac": [240, 302, 519, 615, 789, 1120, 1183, 1292], "ordereddict": [241, 302, 566, 568, 570, 771, 856, 901], "named_expr": [242, 243, 275, 276, 302, 768, 771, 857, 858, 876, 877, 901], "threshold": [242, 302, 857, 901], "set_auto_structifi": [242, 275, 302, 857, 876, 901], "auto_structifi": [242, 275, 302, 857, 876, 901], "is_odd": [242, 302, 857, 901], "_is_odd": [242, 302, 857, 901], "sequenti": [243, 276, 302, 858, 877, 901], "fill_valu": [246, 247, 269, 302, 618, 619, 789, 861, 862, 901, 1191, 1192, 1292], "opposit": [246, 302, 346, 524, 618, 789, 861, 901, 941, 1125, 1191, 1292], "lag": [246, 302, 346, 524, 618, 716, 789, 861, 901, 941, 1125, 1191, 1292], "shrink": [248, 302, 620, 789, 1193, 1194, 1292], "hold": [248, 302], "ddof": [251, 272, 302, 348, 353, 527, 534, 610, 612, 630, 701, 718, 720, 766, 767, 770, 778, 789, 866, 874, 901, 943, 948, 1128, 1135, 1178, 1180, 1203, 1281, 1292], "deviat": [251, 302, 445, 610, 630, 770, 789, 866, 901, 1046, 1203, 1292], "degre": [251, 272, 302, 527, 534, 591, 610, 612, 630, 701, 712, 718, 720, 766, 767, 770, 778, 789, 866, 874, 901, 1178, 1180, 1203, 1281, 1292], "freedom": [251, 272, 302, 527, 534, 610, 612, 630, 701, 718, 720, 766, 767, 770, 778, 789, 866, 874, 901, 1178, 1180, 1203, 1281, 1292], "divisor": [251, 272, 302, 527, 534, 610, 612, 630, 701, 718, 720, 766, 767, 770, 778, 789, 866, 874, 901, 1178, 1180, 1203, 1281, 1292], "816497": [251, 302], "gather_everi": [255, 302, 691, 789, 869, 901, 1265, 1292], "mostli": [256, 302, 453, 789], "categoricaltyp": [256, 302], "fruit": [257, 302, 598, 638, 666, 789, 1211, 1239], "beetl": [257, 302, 598, 789], "audi": [257, 302, 598, 789], "300": [257, 302, 579, 789, 1172, 1173, 1175, 1292], "drop_first": [259, 302, 1269, 1292], "dummi": [259, 302, 1269, 1292], "foo_1": [259, 302], "foo_2": [259, 302], "bar_3": [259, 302], "bar_4": [259, 302], "ham_a": [259, 302], "ham_b": [259, 302], "instantiat": [260, 302, 1271, 1292], "from_repr": [260, 302, 1271, 1292], "df_from_str_repr": [260, 302], "eval": [260, 302, 737, 1271, 1292], "indexord": [261, 302], "fortran": [261, 302], "downstream": [261, 302, 617, 789, 1189, 1292], "applic": [261, 302, 544, 604, 605, 606, 607, 608, 610, 611, 612, 789], "prevent": [261, 302, 312, 376, 377, 486, 564, 688, 789, 901, 974, 975, 1262, 1292], "reshap": [261, 302, 503, 789, 1104, 1292], "immut": [261, 302, 1273, 1292], "u1": [261, 302], "f4": [261, 302], "view": [261, 302, 544, 789, 1292], "recarrai": [261, 302], "rec": [261, 302], "use_pyarrow_extension_arrai": [262, 302, 1274, 1292], "extens": [262, 302, 1274, 1292], "na": [262, 302, 666, 1274, 1292], "doubl": [262, 302], "four": [264, 302], "five": [264, 302, 1301], "bottom_k": [265, 302, 695, 789, 870, 901, 1276, 1292], "header_nam": [266, 302], "perhap": [266, 302], "column_2": [266, 302], "name_gener": [266, 302], "base_nam": [266, 302], "my_column_": [266, 302], "my_column_0": [266, 302], "my_column_1": [266, 302], "my_column_2": [266, 302], "j": [266, 302], "new_id": [266, 302], "uniquekeepstrategi": [267, 302, 871, 901], "kept": [267, 302, 871, 901], "decompos": [268, 302, 872, 901], "t_a": [268, 302, 872, 901], "t_b": [268, 302, 872, 901], "t_c": [268, 302, 872, 901], "t_d": [268, 302, 872, 901], "womp": [268, 302, 872, 901], "t_": [268, 302, 872, 901], "t_struct": [268, 302, 872, 901], "step": [269, 302, 710, 746, 747], "unstackdirect": [269, 302], "pivot": [269, 302], "phase": [269, 302], "ascii_uppercas": [269, 302], "h": [269, 302, 310, 425, 428, 620, 656, 657, 673, 675, 679, 789, 1229, 1230, 1246, 1248, 1252], "x_0": [269, 302, 444, 445, 446, 789, 1045, 1046, 1047, 1292], "x_1": [269, 302], "y_0": [269, 302, 444, 445, 446, 789, 1045, 1046, 1047, 1292], "y_1": [269, 302], "z_0": [269, 302], "z_1": [269, 302], "include_nul": [270, 302, 873, 901], "implicit": [270, 302, 873, 901], "syntact": [270, 302, 596, 704, 706, 709, 719, 721, 724, 738, 739, 743, 744, 745, 748, 754, 756, 758, 759, 761, 762, 763, 768, 770, 772, 774, 778, 780, 789, 873, 901, 1165, 1202, 1292], "sugar": [270, 302, 596, 704, 706, 709, 719, 721, 724, 738, 739, 743, 744, 745, 748, 754, 756, 758, 759, 761, 762, 763, 768, 770, 772, 774, 778, 780, 789, 873, 901, 1165, 1202, 1292], "400": [270, 302, 431, 432, 434, 873, 901, 1172, 1173, 1175, 1292], "600": [270, 302, 431, 432, 434, 873, 901, 906], "700": [270, 302, 873, 901], "new_df": [270, 302, 873, 901], "time_column": [271, 302], "frequenc": [271, 302], "forward_fil": [271, 302, 374, 377, 789], "varianc": [272, 302, 446, 487, 612, 701, 778, 789, 874, 901, 1047, 1090, 1180, 1281, 1292], "grow": [273, 302], "not_": [275, 302, 481, 789, 876, 901, 1292], "not_c": [275, 302, 876, 901], "52": [275, 302, 437, 613, 789, 837, 876, 901], "diff": [275, 302, 429, 430, 431, 432, 433, 434, 435, 520, 789, 876, 901, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1121, 1292], "_diff": [275, 302, 876, 901], "row_nr": [277, 302, 879, 901], "1001": [278, 302, 880, 901], "1002": [278, 302, 880, 901], "named_agg": [280, 881], "_sum": [280, 881], "_mean_squar": [280, 881], "b_sum": [280, 881], "c_mean_squar": [280, 881], "sub": [282, 288, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 353, 509, 517, 789, 927, 928, 929, 932, 933, 934, 935, 936, 937, 938, 939, 943, 944, 948, 1110, 1118], "map_group": [282, 708, 883], "toward": [283, 490, 511, 721, 789, 884, 1091, 1112, 1292], "nr": [285, 296, 886, 897], "triangl": [288, 889], "group_df": [288, 889], "maxim": [289, 325, 789, 890, 920, 1292], "833333": [290, 891], "minim": [292, 326, 333, 495, 620, 628, 789, 893, 921, 928, 1096, 1145, 1193, 1292], "overview": [302, 789, 801, 901, 1292, 1301], "frameinittyp": [302, 901], "entri": [302, 901, 1300], "workaround": 302, "pola": 302, "2846": 302, "df4": 302, "df5": 302, "df6": 302, "approx_n_uniqu": [302, 789, 901], "corr": 302, "drop_in_plac": 302, "drop_nul": [302, 389, 789, 901, 985, 1292], "estimated_s": [302, 1292], "explod": [302, 455, 581, 597, 789, 901, 905, 1166, 1292], "find_idx_by_nam": 302, "fold": [302, 553, 715, 722, 723, 726, 727, 764], "frame_equ": 302, "group_by_rol": [302, 901], "groupby_dynam": [302, 901], "groupby_rol": [302, 901], "hash_row": 302, "hstack": 302, "insert_at_idx": 302, "is_dupl": [302, 789, 1292], "is_empti": [302, 1292], "is_uniqu": [302, 789, 1292], "iter_column": 302, "iter_slic": 302, "melt": [302, 901], "merge_sort": [302, 901], "n_uniqu": [302, 318, 789, 1292], "pipe": [302, 789, 901], "plot": [302, 851, 863, 901, 1292], "hvplottabularpolar": [302, 1292], "defer": [302, 305, 1292, 1296], "galleri": [302, 305, 1292, 1296], "scatter": [302, 305, 1188, 1292], "speci": [302, 305], "setosa": [302, 305], "versicolor": [302, 305], "stock_1": [302, 305], "stock_2": [302, 305], "quantil": [302, 589, 608, 789, 901, 1159, 1176, 1292], "replace_at_idx": 302, "select_seq": [302, 901], "shift_and_fil": [302, 789, 901, 1292], "shrink_to_fit": [302, 1292], "take_everi": [302, 789, 901, 1292], "to_dummi": [302, 1292], "to_numpi": [302, 542, 789, 1292], "to_panda": [302, 1292], "to_struct": [302, 641], "unnest": [302, 384, 589, 599, 641, 642, 664, 665, 685, 789, 901, 946, 981, 1133, 1159, 1168, 1237, 1238, 1292], "unstack": 302, "with_columns_seq": [302, 901], "with_row_count": [302, 901], "write_avro": 302, "write_databas": 302, "write_delta": 302, "write_excel": 302, "write_ipc_stream": 302, "write_json": 302, "write_parquet": 302, "cum_prod": [310, 381, 789, 978, 1292], "ghi": [310, 641, 789, 906, 1214], "94": [311, 789], "to_uppercas": [312, 571, 642, 789], "confus": [313, 480, 482, 658, 789], "kleen": [313, 315, 704, 705, 706, 707, 789, 910, 911, 1292], "bitwis": [314, 580, 703, 704, 705, 706, 707, 789], "upcast": [316, 789], "skip_nul": [317, 544, 789, 913, 1141, 1292], "pass_nam": [317, 544, 789], "mapelementsstrategi": [317, 544, 789], "thread_loc": [317, 544, 789], "map_el": [317, 542, 703, 789, 913, 1292], "unknown": [317, 640, 750, 789, 1213], "alpha": [317, 444, 445, 446, 789, 819, 821, 851, 863, 901, 1045, 1046, 1047, 1292], "stage": [317, 789], "code": [317, 355, 356, 357, 358, 359, 544, 617, 789, 821, 839, 901, 1189, 1292], "gil": [317, 544, 789], "approx": [318, 789], "1005": [318, 789], "invers": [319, 320, 321, 322, 323, 324, 789, 914, 915, 916, 917, 918, 919, 1273, 1292], "cosin": [319, 320, 369, 370, 542, 789, 914, 915, 969, 970, 1292], "570796": [319, 321, 789, 914, 916, 1292], "hyperbol": [320, 322, 324, 370, 624, 693, 789, 915, 917, 919, 970, 1198, 1267, 1292], "sine": [321, 322, 542, 623, 624, 789, 916, 917, 1197, 1198, 1292], "881374": [322, 789, 917, 1292], "tangent": [323, 324, 692, 693, 789, 918, 919, 1266, 1267, 1292], "785398": [323, 711, 712, 789, 918, 1292], "rank": [327, 502, 713, 718, 737, 789, 922, 1103, 1292], "arg_wher": [328, 789], "subarrai": [330, 331, 925, 926], "membership": [334, 497, 929, 1098], "number_of_two": [335, 499], "sublist": [338, 494, 495, 497, 500, 504, 505, 506, 507, 508, 509, 510, 520, 525, 529, 530, 532, 933, 1075, 1095, 1096, 1098, 1101, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1121, 1126, 1130, 1131, 1133, 1292], "x_y": [339, 509], "707107": [348, 445, 610, 789, 943, 1046, 1292], "i8": [350, 351, 398, 402, 406, 409, 411, 413, 416, 419, 420, 423, 437, 438, 531, 620, 762, 765, 780, 789, 945, 946, 983, 994, 998, 1011, 1013, 1020, 1023, 1037, 1038, 1132, 1167, 1279, 1292], "field_0": [351, 532, 946, 1133], "field_1": [351, 532, 946, 1133], "field_n": [351, 532, 946, 1133], "n0": [351, 532], "n1": [351, 532], "c1": 351, "c2": 351, "c3": 351, "seen": [354, 458, 789], "substr": [355, 358, 359, 632, 638, 643, 656, 657, 662, 663, 664, 665, 666, 906, 949, 952, 953, 1205, 1211, 1216, 1229, 1230, 1235, 1236, 1237, 1238, 1239], "ends_with": [355, 359, 632, 666, 906, 1239], "yellow": [355, 356, 357, 358, 359], "x00": [355, 356, 357, 358, 359, 636, 949, 950, 951, 952, 953, 1209], "xff": [355, 356, 357, 358, 359, 636, 949, 950, 951, 952, 953, 1209], "contains_with_lit": 355, "contains_with_expr": 355, "transferencod": [356, 357, 636, 637, 950, 951, 1209, 1210], "hex": [356, 357, 636, 637, 677, 950, 951, 1209, 1210, 1250], "base64": [356, 357, 636, 637, 950, 951, 1209, 1210], "000000": [356, 357, 636, 950, 951, 1209], "ffff00": [356, 357, 636, 950, 951, 1209], "0000ff": [356, 357, 636, 950, 951, 1209], "anywher": [358, 359, 673, 674, 675, 1246, 1247, 1248], "ends_with_lit": 358, "ends_with_expr": 358, "starts_with_lit": 359, "starts_with_expr": 359, "complex": [360, 383, 695, 789, 954, 980, 1276, 1292], "frac": [360, 444, 445, 446, 625, 695, 789, 954, 1045, 1046, 1047, 1199, 1276, 1292], "to_fram": [362, 401, 422, 427, 436, 673, 981, 1159, 1184, 1187, 1237, 1238, 1246, 1292], "259921": [364, 789, 961, 1292], "587401": [364, 789], "numericliter": [366, 367, 368, 789, 965, 966, 967, 1292], "temporalliter": [366, 367, 368, 789, 965, 966, 967, 1003, 1004, 1292], "outsid": [366, 789, 965, 1292], "clip": [367, 368, 789, 966, 967, 1292], "543081": [370, 789, 970, 1292], "cotang": [371, 789, 971, 1292], "cumul": [373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 721, 722, 723, 724, 725, 726, 727, 728, 729, 789, 972, 973, 974, 975, 976, 977, 978, 979, 1292], "cum_count_revers": [373, 789], "cum_max_revers": [374, 789], "cum_max_all_fil": [374, 789], "cum_min_revers": [375, 789], "cum_prod_revers": [376, 789], "cum_sum_revers": [377, 789], "value_cum_sum": [377, 789], "value_cum_sum_all_fil": [377, 789], "cum_count": [378, 789, 1292], "cum_max": [379, 789, 976, 1292], "cum_min": [380, 789, 977, 1292], "cum_sum": [382, 469, 686, 725, 728, 789, 834, 901, 979, 1089, 1292], "min_period": [383, 444, 445, 446, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 766, 767, 789, 980, 1045, 1046, 1047, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "slide": [383, 789, 980, 1292], "slot": [383, 387, 500, 789, 980, 983, 1101, 1292], "realli": [383, 633, 658, 789, 980, 1206, 1231, 1292], "visit": [383, 789, 980, 1292], "left_clos": [384, 589, 789, 981, 1159, 1292], "include_break": [384, 589, 789, 981, 1159, 1292], "bin": [384, 467, 589, 677, 703, 782, 789, 981, 1063, 1159, 1250, 1286, 1292], "discret": [384, 387, 441, 467, 500, 520, 589, 789, 981, 983, 1042, 1063, 1101, 1121, 1159, 1292], "plu": [384, 537, 789, 981, 1138, 1159, 1292], "endpoint": [384, 589, 789, 981, 1159, 1292], "observ": [384, 444, 445, 446, 589, 789, 981, 1045, 1046, 1047, 1159, 1292], "fall": [384, 589, 789, 981, 1159, 1292], "qcut": [384, 789, 981, 1292], "breakpoint": [384, 467, 589, 789, 981, 1063, 1159, 1292], "brk": [384, 589, 789], "foo_bin": [384, 589, 789], "radian": [385, 711, 789], "720": [385, 591, 789], "540": [385, 591, 789], "360": [385, 591, 789], "180": [385, 591, 789], "meta": [386, 789], "stringio": [386, 459, 555, 789, 815, 859, 901], "ba": [386, 447, 555, 666, 738, 789, 906], "null_behavior": [387, 500, 789, 983, 1101, 1292], "nullbehavior": [387, 500, 789, 983, 1101, 1292], "drop_nan": [390, 789, 986, 1292], "utc": [391, 395, 397, 400, 421, 673, 675, 906, 987, 991, 996, 1021, 1246, 1248], "vari": [391, 987, 1301], "rare": [391, 987], "countri": [391, 987], "switch": [391, 987], "samoa": [391, 987], "apia": [391, 987], "did": [391, 987], "2011": [391, 987], "dst_offset": [391, 987], "2012": [391, 987], "replace_time_zon": [391, 397, 400, 992, 993, 1026], "pacif": [391, 987], "11h": [391, 987], "13h": [391, 987], "lose": [392, 988], "time_unit_m": [392, 988], "time_unit_n": [392, 988], "999": [393, 408, 906, 989, 1007, 1301], "1897": [393, 408, 989, 1007], "3002": [393, 408, 989, 1007], "cent": 393, "0999": [393, 408], "naiv": [394, 395, 990, 991, 1248], "compon": [394, 423, 673, 675, 736, 990, 1023, 1246, 1248], "resolv": 394, "tm": [394, 906], "456000": [394, 990], "101000": 394, "d1": 394, "d2": 394, "d3": 394, "europ": [395, 400, 421, 991, 996, 1021], "london": [395, 400, 421, 991, 996, 1021], "gmt": [395, 400, 421, 991, 996, 1021], "bst": [395, 400, 421, 991, 996, 1021], "1978": [396, 397, 402, 405, 406, 409, 411, 416, 423, 426, 440], "500_000": [396, 397, 402, 406, 409, 411, 416, 423, 426], "2065": [396, 397, 402, 406, 409, 411, 416, 423, 426], "60_000": [396, 397, 402, 406, 409, 411, 416, 423, 426], "060": [396, 397, 402, 406, 409, 411, 416, 423, 426], "weekdai": [398, 419], "ordinal_dai": [398, 438], "day_of_month": [398, 419, 438], "day_of_year": [398, 419, 438], "356": [398, 419, 438], "357": [398, 419, 438], "358": [398, 419, 438], "359": [398, 419, 438], "total_dai": [399, 995], "base_utc_offset": [400, 996], "0m": [400, 996], "epochtimeunit": [401, 742, 997], "epoch_n": [401, 997], "epoch_": [401, 997], "978307200000000": [401, 427, 997, 1027], "978307200": [401, 997], "978393600000000": [401, 427, 997, 1027], "978393600": [401, 997], "978480000000000": [401, 427, 997, 1027], "978480000": [401, 997], "total_hour": [403, 999], "leap": [404, 418, 1000, 1018], "leap_year": 404, "iso": [405, 437, 438, 1001, 1037, 1038], "1977": [405, 440], "1979": [405, 440], "calendar_year": [405, 440], "1976": [405, 440], "500000": [406, 1005], "60000": 406, "total_microsecond": [407, 1006], "mlnm": 408, "total_millisecond": [410, 1009], "total_minut": [412, 1012], "think": [414, 415, 1014, 1015], "vectoris": [414, 415, 1014, 1015], "tseri": [414, 415, 1014, 1015], "monthend": [414, 1014], "rollforward": [414, 1014], "monthbegin": [415, 1015], "rollback": [415, 1015], "500000000": [416, 1016], "60000000": 416, "total_nanosecond": [417, 1017], "minu": [418, 577, 789, 1018], "dictat": [418, 789, 905, 1018], "2005": [418, 1018], "date_plus_1i": [418, 1018], "1y2mo": [418, 1018], "date_min": 418, "1998": [418, 1018], "1999": [418, 906, 1018], "2003": [418, 742, 1018], "2004": [418, 1018], "2006": [418, 1018], "new_dat": 418, "ordin": [419, 592, 789, 1019, 1161, 1292], "366": [419, 1019], "use_earliest": [421, 436, 673, 675, 733, 1021, 1036, 1246, 1248], "ambigu": [421, 422, 436, 673, 675, 733, 1021, 1022, 1036, 1246, 1248], "non_exist": [421, 1021], "nonexist": [421, 1021], "convert_time_zon": [421, 1021], "london_timezon": [421, 1021], "amsterdam": [421, 1021], "london_to_amsterdam": [421, 1021], "cet": [421, 1021], "cest": [421, 1021], "ts_local": [421, 1021], "brussel": [421, 1021], "half": [422, 444, 445, 446, 789, 1022, 1045, 1046, 1047, 1292], "localis": [422, 436, 1036], "dst": [422, 436, 1022, 1036], "cst": [422, 436, 1022, 1036], "cdt": [422, 436, 1022, 1036], "safe": [422, 436, 594, 789, 1022, 1036, 1163, 1248, 1272, 1273, 1292], "225": [422, 436], "10m": [422, 436, 1022, 1036], "milli": [423, 1023], "micro": [423, 1023], "total_second": [424, 1024], "to_str": [425, 1025], "datetime_str": [425, 428], "day_nam": [425, 428], "month_nam": [425, 428], "march": [425, 428, 1025, 1028], "april": [425, 428, 1025, 1028], "timestamp_u": [427, 1027], "timestamp_m": 427, "978307200000": 427, "978393600000": 427, "978480000000": 427, "strftime": [428, 1028], "days_diff": 429, "hours_diff": 430, "200m": [431, 432, 434], "milliseconds_diff": [431, 432, 434], "200": [431, 432, 434, 596, 789, 1165, 1172, 1173, 1175, 1292], "200000": [431, 842, 901], "800": [431, 432, 434], "minutes_diff": 433, "1440": [433, 1033], "200000000": 434, "seconds_diff": 435, "truncate_str": 436, "truncate_td": 436, "53": [437, 1037], "time_unit_u": 439, "32971": [439, 1039], "32974": [439, 1039], "32976": [439, 1039], "iso_year": 440, "pk": [441, 789, 1042, 1292], "probabl": [441, 589, 789, 1042, 1159, 1292], "459148": [441, 789], "754888": [441, 789], "span": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "half_lif": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "adjust": [444, 445, 446, 625, 789, 1045, 1046, 1047, 1199, 1292], "exponenti": [444, 445, 446, 448, 586, 789, 1045, 1046, 1047, 1048, 1292], "weight": [444, 445, 446, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 625, 789, 1045, 1046, 1047, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1199, 1292], "decai": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "term": [444, 445, 446, 662, 789, 1045, 1046, 1047, 1235, 1292], "mass": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "gamma": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "foral": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "geq": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "theta": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "life": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "exp": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "ln": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "smooth": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "factor": [444, 445, 446, 694, 789, 1045, 1046, 1047, 1275, 1292], "leq": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "imbal": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "ew": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "w_i": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "recurs": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "y_t": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "y_": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "x_t": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "x_2": [444, 445, 446, 789, 1045, 1046, 1047, 1292], "428571": [444, 789, 1045, 1292], "bia": [445, 446, 487, 609, 625, 789, 1046, 1047, 1090, 1177, 1199, 1292], "unbias": [445, 446, 789, 1046, 1047, 1292], "963624": [445, 789, 1046, 1292], "928571": [446, 789, 1047, 1292], "wildcard": [447, 722, 723, 726, 727, 740, 764, 789, 905], "regex": [447, 550, 632, 634, 635, 638, 640, 641, 642, 643, 656, 657, 666, 738, 789, 906, 1205, 1207, 1208, 1211, 1213, 1214, 1215, 1216, 1229, 1230, 1239], "aa": [447, 632, 643, 738, 789, 982, 1205, 1216, 1292], "cc": [447, 738, 789, 982, 1292], "718282": [448, 789, 1048, 1292], "389056": [448, 789, 1048, 1292], "54": [448, 789, 1090, 1292, 1301], "59815": [448, 789], "expand": [449, 549, 550, 595, 789, 905, 906, 1049, 1292], "extrem": [450, 603, 789, 1051, 1171, 1292], "expressioin": [450, 789, 1051, 1292], "group_col": [453, 702, 789], "g1": [453, 702, 789], "g2": [453, 702, 789], "lt": [453, 702, 789, 1292], "gte": [453, 702, 789], "n_1": [453, 789], "n_2": [453, 789], "n_3": [453, 789], "exprlistnamespac": [455, 789], "divis": [457, 696, 789], "truediv": [457, 789], "deseri": [459, 555, 789, 859, 901], "enclos": [459, 789], "9774092659964970114": [465, 789], "13614470193936745724": [465, 789], "1101441246220388612": [465, 789], "11638928888656214026": [465, 789], "13382926553367784577": [465, 789], "bin_count": [467, 789, 1063, 1292], "include_categori": [467, 789, 1063, 1292], "include_breakpoint": [467, 789, 1063, 1292], "occurr": [467, 474, 475, 478, 479, 700, 789, 1063, 1072, 1073, 1078, 1079, 1280, 1292], "interpolationmethod": [470, 789, 1066, 1292], "regrid": [470, 789], "grid": [470, 789], "df_original_grid": [470, 789], "grid_point": [470, 789], "df_new_grid": [470, 789], "satisfi": [471, 789, 1067, 1292], "conflat": [471, 789], "between_ab": [471, 789], "finit": [473, 696, 718, 789, 1071, 1292], "is_first_distinct": [474, 789, 1072, 1292], "optional_memb": [476, 789, 1075, 1292], "infinit": [477, 696, 789, 1076, 1292], "is_last_distinct": [478, 789, 1078, 1292], "_isnan": [480, 789], "b_isnan": [480, 789], "negat": [481, 578, 789, 1153, 1292], "_is_not_nan": [482, 789], "b_is_not_nan": [482, 789], "_not_nul": [483, 789], "a_not_nul": [483, 789], "b_not_nul": [483, 789], "_isnul": [484, 789], "a_isnul": [484, 789], "b_isnul": [484, 789], "chain": [486, 564, 565, 567, 569, 571, 572, 587, 687, 779, 789], "undo": [486, 557, 564, 565, 567, 569, 571, 572, 587, 687, 789], "fisher": [487, 625, 789, 1090, 1199, 1292], "fourth": [487, 789, 1090, 1292], "subtract": [487, 686, 789, 1090, 1292], "distribut": [487, 625, 789, 1090, 1199, 1292], "elimin": [487, 789, 1090, 1292], "bias": [487, 625, 789, 1090, 1199, 1292], "scipi": [487, 625, 789, 1090, 1199, 1292, 1296], "stat": [487, 625, 789, 1090, 1199, 1292], "153061": [487, 789], "blindli": [502, 1103], "worth": [502, 1103], "enough": [502, 625, 789, 1103, 1199, 1292], "concat_list": [502, 737], "exprnamespac": 503, "null_on_oob": [505, 530, 1106, 1131], "cheaper": [505, 530, 1106, 1131], "symmetr": [522, 1123], "sdiff": 522, "taken": [525, 662, 1126, 1235], "363961": [527, 1128], "n_field_strategi": [532, 1133], "tostructstrategi": [532, 1133], "first_non_nul": [532, 1133], "max_width": [532, 1133], "pre": [532, 544, 589, 762, 765, 780, 789, 1159, 1292], "obtain": 532, "ok": 532, "longest": 532, "logarithm": [535, 536, 537, 789, 1136, 1137, 1138, 1292], "584963": [535, 789], "30103": [536, 789], "60206": [536, 789], "natur": [537, 789, 1138, 1292], "693147": [537, 789, 1136, 1138, 1292], "098612": [537, 789, 1136, 1138, 1292], "386294": [537, 789, 1138, 1292], "lowest": [538, 789], "9223372036854775808": [538, 789], "agg_list": [540, 542, 789], "map_batch": [540, 751, 789, 841, 901], "keep_nam": [541, 789], "a_revers": [541, 565, 569, 598, 687, 789], "b_revers": [541, 565, 569, 598, 687, 789], "rstrip": [541, 565, 789], "_revers": [541, 565, 569, 598, 687, 789], "is_elementwis": [542, 789, 905], "whole": [542, 627, 628, 640, 789, 889, 901, 1213], "elementwis": [542, 602, 603, 604, 605, 607, 611, 789, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "third": [542, 789], "parti": [542, 789], "book": [542, 789], "invok": [542, 789], "bug": [542, 544, 789, 841, 842, 883, 889, 901, 1141, 1292], "argmax": [542, 789], "remap": [543, 789, 1140, 1292], "lookup": [543, 785, 789, 1140, 1292], "discourag": [544, 789], "loop": [544, 789], "a_times_2": [544, 789], "tip": [544, 789], "again": [544, 789], "exprmetanamespac": [548, 551], "foo_bar2": [548, 551], "raise_if_undetermin": 552, "computeerror": [552, 655, 677, 1228, 1250], "e_filt": [552, 554], "e_sum_ov": [552, 554], "e_sum_slic": [552, 554], "groupstorow": 555, "tree": [556, 819, 901], "modulu": [560, 789], "xlog2": [562, 586, 789], "purpos": [563, 789, 810, 821, 901], "x_uniqu": [563, 789], "y_uniqu": [563, 789], "reverse_": [567, 587, 789], "reverse_a": [567, 587, 789], "reverse_b": [567, 587, 789], "prefix_": 568, "prefix_a": 568, "prefix_b": 568, "_suffix": 570, "a_suffix": 570, "b_suffix": 570, "lowercas": [571, 678, 1251], "uppercas": [572, 681, 1254], "to_lowercas": 572, "poison": [573, 574, 789, 1150, 1151, 1292], "nanmax": [573, 574, 789, 1150, 1151, 1292], "inequ": [575, 789], "ne": [576, 789, 1292], "unari": [577, 789], "350": [579, 789, 1173, 1292], "650": [579, 789], "850": [579, 789], "more_expr": [581, 713, 715, 716, 717, 789], "mapping_strategi": [581, 789], "windowmappingstrategi": [581, 789], "group_to_row": [581, 789], "outcom": [581, 789], "group_dtyp": [581, 789], "warn": [581, 604, 605, 606, 607, 608, 610, 611, 612, 789, 1292], "flatten": [581, 789], "_max": [581, 789], "c_max": [581, 789], "_min": [581, 789], "c_min": [581, 789], "percent": [582, 789, 1155, 1292], "090909": [582, 789], "extract_numb": [585, 789], "scale_negative_even": [585, 789], "expon": [586, 789, 1292], "allow_dupl": [589, 789, 1159, 1292], "duplicateerror": [589, 789, 1159, 1292], "cut": [589, 789, 1159, 1292], "566371": [591, 789], "424778": [591, 789], "283185": [591, 789], "141593": [591, 789, 914, 1292], "rankmethod": [592, 789, 1161, 1292], "ti": [592, 789, 1161, 1292], "competit": [592, 789, 1161, 1292], "highest": [592, 699, 718, 789, 901, 1161, 1292], "immedi": [592, 710, 714, 731, 732, 734, 735, 746, 747, 762, 765, 771, 776, 777, 780, 789, 1161, 1292], "nodefault": [596, 789, 1165, 1292], "_nodefault": [596, 789, 1165, 1292], "no_default": [596, 789, 1165, 1292], "fruits_revers": [598, 789], "cars_revers": [598, 789], "rle_id": [599, 789, 1292], "rle": [600, 789, 1169, 1292], "rle_id_a": [600, 789], "rle_id_ab": [600, 789], "window_s": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 766, 767, 789, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1292], "rolling_map": [602, 789, 1170, 1292], "multipli": [602, 603, 604, 605, 607, 610, 611, 612, 789, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1292], "rolling_sum": [603, 789, 1171, 1292], "nansum": [603, 789, 1171, 1292], "warn_if_unsort": [604, 605, 606, 607, 608, 610, 611, 612, 789], "travers": [604, 605, 607, 611, 789, 1172, 1173, 1175, 1178, 1179, 1180, 1292], "vector": [604, 605, 607, 611, 789, 1172, 1173, 1175, 1178, 1179, 1180, 1292], "5h": [604, 605, 606, 607, 608, 610, 611, 612, 789], "df_tempor": [604, 605, 607, 610, 611, 612, 789], "closur": [604, 605, 610, 611, 612, 789], "rolling_row_max": [604, 789], "2h": [604, 605, 607, 610, 611, 612, 789], "rolling_row_mean": [605, 789], "rolling_row_min": [607, 789], "625": [608, 789], "skew": [609, 789, 1177, 1292], "381802": [609, 789, 1177, 1292], "47033": [609, 789, 1177, 1292], "38180177416060584": [609, 789, 1177, 1292], "47033046033698594": [609, 789, 1177, 1292], "433013": [610, 789, 866, 901], "rolling_row_std": [610, 789], "rolling_row_sum": [611, 789], "39": [611, 742, 789], "57": [611, 789, 1181, 1292, 1301], "63": [611, 789], "69": [611, 789, 1090, 1292], "1875": [612, 789, 874, 901], "rolling_row_var": [612, 789], "figur": [614, 789, 863, 901, 1182, 1292], "01234": [614, 789, 1182, 1292], "012": [614, 789, 1182, 1292], "1200": [614, 789, 1182, 1292], "searchsortedsid": [616, 789, 1185, 1292], "leftmost": [616, 789, 1185, 1292], "rightmost": [616, 789, 1185, 1292], "six": [616, 789], "extrema": [620, 789, 1193, 1292], "112": [620, 789, 1301], "129": [620, 789], "8589934592": [620, 789], "1073741824": [620, 789], "175201": [624, 789, 1198, 1292], "unimod": [625, 789, 1199, 1292], "skewtest": [625, 789, 1199, 1292], "speak": [625, 789, 1199, 1292], "g_1": [625, 789, 1199, 1292], "m_3": [625, 789, 1199, 1292], "m_2": [625, 789, 1199, 1292], "m_i": [625, 789, 1199, 1292], "sum_": [625, 789, 1199, 1292], "texttt": [625, 789, 1199, 1292], "k_3": [625, 789, 1199, 1292], "k_2": [625, 789, 1199, 1292], "sqrt": [625, 711, 712, 789, 1199, 1292], "343622": [625, 789], "value1": [628, 789], "value2": [628, 789], "attain": [628, 789], "414214": [629, 789, 1202, 1292], "sensit": [632, 641, 643, 656, 657, 1205, 1214, 1216, 1229, 1230], "ilmsuxu": [632, 640, 641, 643, 656, 657, 1205, 1213, 1214, 1216, 1229, 1230], "default_match": [632, 643], "insensitive_match": [632, 643], "crab": [632, 643, 1205, 1216], "dog": [632, 678, 681, 717, 1205, 1251, 1254], "rab": [632, 659, 1205, 1232], "ascii_case_insensit": [633, 658, 1206, 1231], "aho": [633, 658, 1206, 1231], "corasick": [633, 658, 1206, 1231], "insensit": [633, 641, 656, 657, 658, 906, 1205, 1206, 1214, 1216, 1229, 1230, 1231], "set_fmt_str_length": [633, 658, 1206, 1231], "lyric": [633, 658, 1206, 1231], "everybodi": [633, 658, 1206, 1231], "tell": [633, 658, 1206, 1231], "me": [633, 658, 1206, 1231], "feel": [633, 658, 1206, 1231], "love": [633, 658, 1206, 1231], "tonight": [633, 658, 1206, 1231], "success": [634, 635, 641, 1207, 1208, 1214], "overlap": [634, 635, 641, 1207, 1208, 1214], "bla": [635, 641, 1208, 1214], "asd": [635, 641, 1208, 1214], "678": [635, 641, 1208, 1214], "910t": [635, 641, 1208, 1214], "count_digit": 635, "dbc": [635, 1208], "3xy": [635, 1208], "1zy3": [635, 1208], "strings_hex": 637, "666f6f": [637, 1210], "626172": [637, 1210], "mango": [638, 666, 1211, 1239], "has_suffix": 638, "le": [638, 789, 1292], "nu": 638, "group_index": [640, 1213], "captur": [640, 642, 656, 657, 1213, 1215, 1229, 1230], "nthose": [640, 1213], "nodd": [640, 1213], "nthe": [640, 1213], "odd": 640, "vote": [640, 642, 1213, 1215], "ballon_dor": [640, 642, 1213, 1215], "404": [640, 642, 1213, 1215], "ref": [640, 642, 1213, 1215], "candid": [640, 642, 1213, 1215], "messi": [640, 642, 1213, 1215], "ronaldo": [640, 1213], "haystack": [641, 1214], "email": [641, 1214], "real": [641, 1214], "some_account": [641, 1214], "somewher": [641, 1214], "net": [641, 1214], "jkl": [641, 1214], "uvw": [641, 1214], "co": [641, 789, 1214, 1292], "uk": [641, 1214], "address": 641, "xi": [641, 1214], "quantifi": [641, 1214], "email_part": [641, 1214], "extracted_nr": 641, "910": [641, 1214], "unnam": [642, 1215], "weghorst": [642, 1215], "candi": 642, "lobster": [643, 1216], "crustaceon": [643, 1216], "pat": [643, 1216], "bc": [643, 657, 772, 1216], "aeiuo": [643, 1216], "find_pat": 643, "json_path_match": [644, 1217], "jsonpath": [644, 646, 1217, 1219], "json_decod": [645, 1218], "json_path": [646, 1219], "json_val": [646, 1219], "len_char": [647, 652, 1220, 1225], "_o": [647, 648, 1220, 1221], "caf\u00e9": [647, 648, 1220, 1221], "345": [647, 648, 1220, 1221], "\u6771\u4eac": [647, 648, 1220, 1221], "n_byte": [647, 648], "n_char": [647, 648], "fill_char": [650, 653, 654, 660, 1223, 1226, 1227, 1233], "justifi": [650, 660, 1223, 1233], "pad_end": [650, 654, 1223, 1227], "strip_chars_start": [651, 669, 671, 1224], "pad": [653, 654, 682, 1226, 1227, 1255], "reach": [653, 654, 682, 1226, 1227, 1255], "pad_start": [653, 660, 682, 1226, 1233, 1255], "cow": [653, 654, 1226, 1227], "monkei": [653, 654, 1226, 1227], "hippopotamu": [653, 654, 1226, 1227], "zfill": [654, 703, 789, 1227], "radix": [655, 677, 1228, 1250], "parseerror": [655, 677, 1228, 1250], "becom": 655, "to_integ": [655, 1228], "silent": [655, 677, 1228, 1250], "replace_al": [656, 1229], "dollar": [656, 657, 1229, 1230], "123abc": [656, 1229, 1230], "abc456": [656, 1229, 1230], "hat": [656, 657, 1229, 1230], "hut": [656, 657, 1229, 1230], "vowel": [656, 657, 1229, 1230], "bad": [656, 657, 1229, 1230], "bud": [656, 657, 1229, 1230], "citi": [656, 657], "philadelphia": [656, 657], "season": [656, 657], "spring": [656, 657], "summer": [656, 657], "autumn": [656, 657], "winter": [656, 657], "weather": [656, 657, 1229, 1230], "raini": [656, 657, 1229, 1230], "sunni": [656, 657, 1229, 1230], "cloudi": [656, 657], "snowi": [656, 657], "foggi": [656, 657, 1229, 1230], "abcabc": 657, "123a123": 657, "replace_with": [658, 1231], "broadcast": [658, 906, 1231], "removes_pronoun": 658, "man": [659, 1232], "ana": [659, 1232], "oof": [659, 1232], "anan": [659, 1232], "am": [659, 1232], "strip_chars_end": [661, 670, 672, 1234], "pear": [662, 1235], "papaya": [662, 1235], "dragonfruit": [662, 1235], "ear": [662, 1235], "aya": [662, 1235], "uit": [662, 1235], "ya": [662, 1235], "onf": [662, 1235], "foo_bar_baz": 663, "split_inclus": 663, "foo_": [663, 741], "bar_": 663, "a_1": [664, 1237, 1269, 1292], "d_4": [664, 1237], "rename_field": [664, 665, 981, 1159, 1237, 1238, 1292], "first_part": [664, 665, 1237, 1238], "second_part": [664, 665, 1237, 1238], "remaind": [665, 1238], "app": [666, 1239], "has_prefix": 666, "strip_char": [667, 1240], "nworld": 668, "foo_strip": 668, "ow": 668, "hell": [668, 1241], "rld": [668, 670, 1243], "strip_suffix": [669, 671], "foo_strip_end": 669, "oldw": 669, "he": 669, "abcdeff": 669, "fed": 669, "strip_prefix": [670, 672], "tworld": [670, 1241, 1243], "foo_strip_start": 670, "wod": [670, 1243], "aabcdef": 670, "cba": 670, "foobar": [671, 672, 1244, 1245], "foofoobar": [671, 1244], "foobarbar": [672, 1245], "polarstemporaltyp": [673, 1246], "penalti": [673, 674, 675, 1246, 1247, 1248], "clean": [673, 674, 675, 1246, 1247, 1248], "beforehand": [673, 674, 675, 1246, 1247, 1248], "certainli": [673, 674, 675, 1246, 1247, 1248], "00z": [673, 675, 1246, 1248], "sun": [673, 1246], "jul": [673, 1246], "inference_length": [676, 1249], "3420": [676, 1249], "120134": [676, 1249], "3212": [676, 1249], "143": [676, 1249, 1301], "numbers_decim": 676, "110": [677, 1250], "fa1e": [677, 1250], "ff00": [677, 1250], "cafe": [677, 1250], "64030": [677, 1250], "65280": [677, 1250], "51966": [677, 1250], "variant": [678, 680, 681, 1077, 1292], "foo_low": 678, "titlecas": [680, 1253], "sing": [680, 1253], "welcom": [680, 1253], "THERE": [680, 1253], "NO": [680, 906, 1253], "foo_titl": 680, "There": [680, 1253], "foo_upp": 681, "999999": [682, 733, 775, 776, 777, 906, 1255], "0123": [682, 1255], "cd": [683, 685], "struct_col": [683, 685], "www": 685, "xxx": 685, "yyi": 685, "zzz": 685, "obvious": 685, "structfieldnotfounderror": 685, "761594": [693, 789, 1267, 1292], "replic": [694, 789, 1275, 1292], "vals_phys": [694, 789], "floordiv": [696, 789], "ieee": [696, 789], "754": [696, 789], "mathemat": [696, 737, 789], "undefin": [696, 789], "On": [696, 789], "operand": [696, 789], "infin": [696, 789], "value_count": [698, 789, 1292], "9223372036854775807": [699, 789], "binary_str": [703, 789], "250": [703, 789, 1173, 1292, 1301], "bin_x": [703, 789], "bin_i": [703, 789], "xor_xi": [703, 789], "bin_xor_xi": [703, 789], "00001010": [703, 789], "00001011": [703, 789], "00001000": [703, 789], "00000010": [703, 789], "11111010": [703, 789], "00000011": [703, 789], "249": [703, 789], "11111001": [703, 789], "01000010": [703, 789], "00000100": [703, 789], "01000110": [703, 789], "AND": [704, 705, 906, 1273, 1292], "OR": [706, 707, 824, 901, 906], "any_horizont": 706, "returns_scalar": [708, 753, 789, 905], "polarsintegertyp": [710, 746, 747], "arctan": [711, 712, 789, 1292], "angl": [711, 712], "plane": [711, 712], "rai": [711, 712], "tworoottwo": [711, 712], "arctan2d": 711, "atan2d": [711, 712], "atan2": [711, 712], "135": [711, 712], "356194": [711, 712], "arctan2": 712, "arg_tru": [714, 789, 1292], "mimic": 716, "a_lag_": 716, "a_rol": 716, "swim": 717, "walk": 717, "full_sent": 717, "correlationmethod": 718, "propagate_nan": 718, "spearman": 718, "544705": 718, "covari": [720, 767, 789, 905], "acc": [722, 723, 726, 727, 740, 764], "include_init": [722, 726], "accumul": [722, 723, 726, 727, 740, 764], "fn": [722, 723, 726, 727, 740, 764], "new_valu": [722, 723, 726, 727, 740, 764], "cum_reduc": 722, "cumsum_horizont": 724, "cum_sum_horizont": 729, "granular": 731, "finer": 731, "permut": 731, "1985": [731, 734], "america": 734, "new_york": 734, "est": 734, "contrast": 736, "offset_bi": 736, "sometim": [736, 788], "tbl_width_char": 736, "120": 736, "add_week": 736, "add_dai": 736, "add_second": 736, "add_milli": 736, "add_hour": 736, "002": [736, 1031, 1032, 1034], "add_calendar_dai": 736, "add_calendar_month": 736, "mo": 736, "add_calendar_year": 736, "a_b_doubl": 737, "f_string": 741, "placehold": 741, "hello_": 741, "_world": 741, "_bar_": 741, "foo_a_bar_1": 741, "foo_b_bar_2": 741, "foo_c_bar_3": 741, "util": [742, 821, 901, 905], "timestep": 742, "1666683077": 742, "1666683099": 742, "12345": [742, 962, 1056, 1181, 1292], "12346": 742, "agg_group": [743, 789], "allow_object": 750, "valueexcept": 750, "test_func": 752, "list_of_seri": 753, "my_custom_aggreg": 753, "understood": 753, "power": [769, 1292], "a_a": 769, "a_txt": 769, "605551": 770, "605551275463989": 770, "my_struct": 771, "elif": 779, "pick": 779, "met": 779, "own": [779, 1301], "isn": 779, "arr": [781, 1273, 1284, 1292], "technic": 785, "further": 785, "columnfactori": 785, "more_nam": 785, "__call__": 785, "helper": 785, "__getattr__": 785, "idiomat": [785, 889], "quick": [785, 982, 1292, 1301], "prototyp": 785, "keystrok": 785, "drawback": 785, "readabl": 785, "and_": 789, "arcco": [789, 1292], "arccosh": [789, 1292], "arcsin": [789, 1292], "arcsinh": [789, 1292], "arctanh": [789, 1292], "arg_max": [789, 1292], "arg_min": [789, 1292], "arg_sort": [789, 1292], "arg_uniqu": [789, 1292], "backward_fil": 789, "cbrt": [789, 1292], "clip_max": [789, 1292], "clip_min": [789, 1292], "cosh": [789, 1292], "cot": [789, 1292], "cumcount": 789, "cummax": [789, 1292], "cummin": [789, 1292], "cumprod": [789, 1292], "cumsum": [789, 1292], "cumulative_ev": [789, 1292], "entropi": [789, 1292], "eq_miss": [789, 1292], "ewm_mean": [789, 1292], "ewm_std": [789, 1292], "ewm_var": [789, 1292], "extend_const": [789, 1292], "from_json": 789, "ge": [789, 1292], "gt": [789, 1292], "hist": [789, 1292, 1296], "implod": [789, 1292], "inspect": [789, 901], "is_between": [789, 1292], "is_finit": [789, 1292], "is_first": [789, 1292], "is_infinit": [789, 1292], "is_last": [789, 1292], "is_nan": [789, 1292], "is_not": 789, "is_not_nan": [789, 1292], "is_not_nul": [789, 1292], "kurtosi": [789, 1292], "log10": [789, 1292], "log1p": [789, 1292], "map_alia": 789, "map_dict": [789, 1292], "mod": 789, "mul": 789, "nan_max": [789, 1292], "nan_min": [789, 1292], "ne_miss": [789, 1292], "or_": 789, "pct_chang": [789, 1292], "peak_max": [789, 1292], "peak_min": [789, 1292], "pow": [789, 1292], "register_plugin": 789, "lib": [789, 1268, 1292], "input_wildcard_expans": [789, 905], "cast_to_supertyp": [789, 905], "pass_name_to_appli": [789, 905], "changes_length": [789, 905], "register_plugin_funct": [789, 801, 905], "guid": [789, 905, 1301], "serializ": [789, 905], "ran": [789, 905], "highli": [789, 905], "unsaf": [789, 905], "reinterpret": [789, 1292], "repeat_bi": 789, "rolling_appli": [789, 1292], "rolling_max": [789, 1292], "rolling_mean": [789, 1292], "rolling_median": [789, 1292], "rolling_min": [789, 1292], "rolling_quantil": [789, 1292], "rolling_skew": [789, 1292], "rolling_std": [789, 1292], "rolling_var": [789, 1292], "round_sig_fig": [789, 1292], "search_sort": [789, 1292], "shrink_dtyp": [789, 1292], "sin": [789, 1292], "sinh": [789, 1292], "sort_bi": 789, "tan": [789, 1292], "to_phys": [789, 959, 1292], "unique_count": [789, 1292], "xor": 789, "expos": 801, "miscellan": 801, "sqlcontext": [801, 1300], "parametr": 801, "hit": [806, 901], "node": [806, 810, 834, 841, 842, 846, 851, 853, 901], "background": [810, 901], "_eager": [810, 901], "inprocessqueri": [810, 901], "cancel": [810, 901], "set_streaming_chunk_s": [810, 901], "collect_all_async": [811, 901], "snippet": [817, 901], "tree_format": [819, 901], "Be": [821, 901], "fewer": [821, 901], "suscept": [821, 901], "lazygroupbi": [827, 828, 829, 830, 831, 832, 855, 901], "other_lf": [836, 901], "jan": [837, 901], "1st": [837, 901], "12th": [837, 901], "validate_output_schema": [841, 842, 901], "streamabl": [841, 842, 846, 901], "past": [841, 842, 901], "paramount": [841, 842, 901], "elig": [841, 842, 901], "invari": [842, 901], "upheld": [842, 901], "100_000": [842, 901], "199998": [842, 901], "199996": [842, 901], "199994": [842, 901], "199992": [842, 901], "show_plot": [851, 901], "truncate_nod": [851, 901], "figsiz": [851, 863, 901], "gantt": [851, 901], "group_by_partit": [851, 901], "470": [851, 901], "475": [851, 901], "1964": [851, 901], "swap": [853, 901], "dynamic_group_bi": [855, 901], "dataframescan": [859, 901], "output_schema": [859, 901], "run_parallel": [859, 901], "duplicate_check": [859, 901], "output_path": [863, 901], "raw_output": [863, 901], "290994": [866, 901], "118034": [866, 901], "new_lf": [873, 901], "extern": [878, 901], "lf_other": [878, 901], "afoo": [878, 901], "cfoo": [878, 901], "train_lf": [878, 901], "feature_0": [878, 901], "feature_1": [878, 901], "test_lf": [878, 901], "_train": [878, 901], "feature_0_train": [878, 901], "opaqu": 889, "my_column": 889, "struct_seri": 889, "lf5": 901, "lf6": 901, "sink_csv": 901, "sink_ipc": 901, "sink_ndjson": 901, "sink_parquet": 901, "with_context": 901, "resourc": 905, "plugin_path": 905, "function_nam": 905, "intuit": 906, "emploi": 906, "complement": 906, "plenti": 906, "cde": 906, "fgg": 906, "jjk": 906, "lmn": 906, "opp": 906, "qqr": 906, "by_dtyp": 906, "as_expr": 906, "dispatch": 906, "1_234_500": 906, "5_000_555": 906, "1234500": 906, "5000555": 906, "by_nam": 906, "2010": 906, "4_500_000": 906, "4500000": 906, "3265500": 906, "zap": 906, "2031": 906, "tstamp_tokyo": 906, "123465": 906, "tstamp_utc": 906, "999000": 906, "2025": 906, "666000": 906, "tstamp": 906, "600000": 906, "123000": 906, "666": 906, "td1": 906, "987000": 906, "td2": 906, "456789": [906, 1023], "td3": 906, "2m": [906, 1011], "456m": 906, "7d": 906, "456789\u00b5": 906, "18d": 906, "999999\u00b5": 906, "23h": 906, "987m": 906, "14d": 906, "16h": 906, "39m": 906, "21d": 906, "456001\u00b5": 906, "expand_selector": 906, "colz": [906, 1301], "everyth": 906, "signed_integ": 906, "unsigned_integ": 906, "is_selector": 906, "obj": 906, "include_categor": 906, "2345": 906, "3456": 906, "292432": [915, 1292], "549306": [919, 1292], "innter": 933, "field_2": [946, 1133], "n00": [946, 1133], "n01": [946, 1133], "n02": [946, 1133], "hexadecim": [950, 951], "aaaa": [950, 951], "8a": [950, 951], "aad": [950, 951], "invalid_valu": 950, "44225": [961, 1292], "56789": [962, 1056, 1181, 1292], "901234": [962, 1056, 1181, 1292], "1232e": [969, 971, 1292], "1656e15": [971, 1292], "break_point_label": [981, 1159, 1292], "break_point": [981, 1063, 1159, 1292], "category_label": [981, 1159, 1292], "581139": [982, 1292], "bb": [982, 1292], "arraylik": [984, 1292], "ser": [992, 993, 1026], "kathmandu": [992, 993, 1026], "0545": [992, 993, 1026], "500m": [1005, 1008, 1016], "date_minus_1y_2mon": 1018, "165": [1022, 1036], "round_str": 1022, "round_td": 1022, "111110": 1023, "765431": 1023, "11111": 1023, "timestamp_n": 1027, "978307200000000000": 1027, "978393600000000000": 1027, "978480000000000000": 1027, "005": [1042, 1292], "06293300616044681": [1042, 1292], "65": [1042, 1292], "8568409950394724": [1042, 1292], "4000000": [1044, 1292], "814697265625": [1044, 1292], "085537": [1048, 1292], "bitmask": [1060, 1292], "absenc": [1060, 1292], "presenc": [1060, 1292], "confirm": [1060, 1292], "10734580197236529959": [1061, 1292], "3022416320763508302": [1061, 1292], "13756996518000038261": [1061, 1292], "is_signed_integ": [1077, 1292], "is_unsigned_integ": [1077, 1292], "grade": [1090, 1292], "79": [1090, 1292], "93": [1090, 1292], "0522623626787952": [1090, 1292], "9477376373212048": [1090, 1292], "1040361802642726": [1090, 1292], "2147483648": [1139, 1292], "pythonliter": [1142, 1143, 1144, 1145, 1184, 1292], "166667": [1155, 1292], "142857": [1155, 1292], "150": [1173, 1292], "450": [1173, 1292], "dev": [1178, 1292], "527525": [1178, 1292], "frequent": [1184, 1187, 1292], "2246e": [1197, 1266, 1292], "34776706224699483": [1199, 1292], "732051": [1202, 1292], "idx_rx": 1216, "idx_lit": 1216, "orld": 1242, "tur": 1253, "6331e16": [1266, 1292], "int64arrai": [1268, 1292], "a_2": [1269, 1292], "a_3": [1269, 1292], "s_from_str_repr": [1271, 1292], "zero_copy_onli": [1273, 1292], "127": [1279, 1292], "seriesview": [1282, 1292], "dtype_if_empti": 1292, "position": 1292, "scenario": 1292, "chunk_length": 1292, "get_chunk": 1292, "has_valid": 1292, "is_boolean": 1292, "is_float": 1292, "is_integ": 1292, "is_numer": [1292, 1301], "is_sort": 1292, "is_tempor": 1292, "is_utf8": 1292, "new_from_index": 1292, "histogram": [1292, 1296], "kde": [1292, 1296], "series_equ": 1292, "set_at_idx": 1292, "two_a": 1300, "__enter__": 1300, "__exit__": 1300, "exc_typ": 1300, "baseexcept": 1300, "exc_val": 1300, "exc_tb": 1300, "tracebacktyp": 1300, "machin": 1301, "xdist": 1301, "hardwar": 1301, "setup": 1301, "sec": 1301, "numeric_dtyp": 1301, "null_probabililti": 1301, "test_numer": 1301, "col0": 1301, "col4": 1301, "29096": 1301, "485": 1301, "2147483647": 1301, "8257e14": 1301, "7508": 1301, "37338": 1301, "7264": 1301, "16996": 1301, "121": 1301, "361": 1301, "63204": 1301, "1443e235": 1301, "conform": 1301, "ascii_lett": 1301, "id_char": 1301, "alphabet": 1301, "price": 1301, "min_valu": 1301, "max_valu": 1301, "test_price_calcul": 1301, "a101": 1301, "8nin": 1301, "qhoo": 1301, "714": 1301, "544": 1301, "i0e0": 1301, "0000": 1301, "test_miscellan": 1301, "235": 1301, "87": 1301, "186": 1301, "174": 1301, "179": 1301, "213": 1301, "221": 1301, "86": 1301, "255": 1301}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [62, 0, 1, "", "List"], [63, 0, 1, "", "Null"], [64, 0, 1, "", "Object"], [1300, 0, 1, "", "SQLContext"], [71, 0, 1, "", "String"], [72, 0, 1, "", "StringCache"], [73, 0, 1, "", "Struct"], [74, 0, 1, "", "Time"], [75, 0, 1, "", "UInt16"], [76, 0, 1, "", "UInt32"], [77, 0, 1, "", "UInt64"], [78, 0, 1, "", "UInt8"], [79, 0, 1, "", "Unknown"], [80, 3, 1, "", "Utf8"], [81, 4, 1, "", "align_frames"], [704, 4, 1, "", "all"], [705, 4, 1, "", "all_horizontal"], [706, 4, 1, "", "any"], [707, 4, 1, "", "any_horizontal"], [708, 4, 1, "", "apply"], [709, 4, 1, "", "approx_n_unique"], [710, 4, 1, "", "arange"], [711, 4, 1, "", "arctan2"], [712, 4, 1, "", "arctan2d"], [713, 4, 1, "", "arg_sort_by"], [714, 4, 1, "", "arg_where"], [86, 4, 1, "", "build_info"], [715, 4, 1, "", "coalesce"], [87, 4, 1, "", "collect_all"], [88, 4, 1, "", "collect_all_async"], [89, 4, 1, "", "concat"], [716, 4, 1, "", "concat_list"], [717, 4, 1, "", "concat_str"], [718, 4, 1, "", "corr"], [719, 4, 1, "", "count"], [720, 4, 1, "", "cov"], [721, 4, 1, "", "cum_count"], [722, 4, 1, "", "cum_fold"], [723, 4, 1, "", "cum_reduce"], [724, 4, 1, "", "cum_sum"], [725, 4, 1, "", "cum_sum_horizontal"], [726, 4, 1, "", "cumfold"], [727, 4, 1, "", "cumreduce"], [728, 4, 1, "", "cumsum"], [729, 4, 1, "", "cumsum_horizontal"], [730, 4, 1, "", "date"], [731, 4, 1, "", "date_range"], [732, 4, 1, "", "date_ranges"], [733, 4, 1, "", "datetime"], [734, 4, 1, "", "datetime_range"], [735, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [736, 4, 1, "", "duration"], [737, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [738, 4, 1, "", "exclude"], [739, 4, 1, "", "first"], [740, 4, 1, "", "fold"], [741, 4, 1, "", "format"], [107, 4, 1, "", "from_arrow"], [108, 4, 1, "", "from_dataframe"], [109, 4, 1, "", "from_dict"], [110, 4, 1, "", "from_dicts"], [742, 4, 1, "", "from_epoch"], [111, 4, 1, "", "from_numpy"], [112, 4, 1, "", "from_pandas"], [113, 4, 1, "", "from_records"], [114, 4, 1, "", "from_repr"], [115, 4, 1, "", "get_index_type"], [743, 4, 1, "", "groups"], [744, 4, 1, "", "head"], [745, 4, 1, "", "implode"], [746, 4, 1, "", "int_range"], [747, 4, 1, "", "int_ranges"], [748, 4, 1, "", "last"], [749, 4, 1, "", "len"], [750, 4, 1, "", "lit"], [751, 4, 1, "", "map"], [752, 4, 1, "", "map_batches"], [753, 4, 1, "", "map_groups"], [754, 4, 1, "", "max"], [755, 4, 1, "", "max_horizontal"], [756, 4, 1, "", "mean"], [757, 4, 1, "", "mean_horizontal"], [758, 4, 1, "", "median"], [759, 4, 1, "", "min"], [760, 4, 1, "", "min_horizontal"], [761, 4, 1, "", "n_unique"], [762, 4, 1, "", "ones"], [905, 6, 0, "-", "plugins"], [763, 4, 1, "", "quantile"], [117, 4, 1, "", "read_avro"], [118, 4, 1, "", "read_csv"], [119, 4, 1, "", "read_csv_batched"], [120, 4, 1, "", "read_database"], [121, 4, 1, "", "read_database_uri"], [122, 4, 1, "", "read_delta"], [123, 4, 1, "", "read_excel"], [124, 4, 1, "", "read_ipc"], [125, 4, 1, "", "read_ipc_schema"], [126, 4, 1, "", "read_ipc_stream"], [127, 4, 1, "", "read_json"], [128, 4, 1, "", "read_ndjson"], [129, 4, 1, "", "read_ods"], [130, 4, 1, "", "read_parquet"], [131, 4, 1, "", "read_parquet_schema"], [764, 4, 1, "", "reduce"], [765, 4, 1, "", "repeat"], [766, 4, 1, "", "rolling_corr"], [767, 4, 1, "", "rolling_cov"], [132, 4, 1, "", "scan_csv"], [133, 4, 1, "", "scan_delta"], [134, 4, 1, "", "scan_iceberg"], [135, 4, 1, "", "scan_ipc"], [136, 4, 1, "", "scan_ndjson"], [137, 4, 1, "", "scan_parquet"], [138, 4, 1, "", "scan_pyarrow_dataset"], [768, 4, 1, "", "select"], [906, 6, 0, "-", "selectors"], [139, 4, 1, "", "set_random_seed"], [140, 4, 1, "", "show_versions"], [769, 4, 1, "", "sql_expr"], [770, 4, 1, "", "std"], [771, 4, 1, "", "struct"], [772, 4, 1, "", "sum"], [773, 4, 1, "", "sum_horizontal"], [774, 4, 1, "", "tail"], [152, 4, 1, "", "thread_pool_size"], [153, 4, 1, "", "threadpool_size"], [775, 4, 1, "", "time"], [776, 4, 1, "", "time_range"], [777, 4, 1, "", "time_ranges"], [154, 4, 1, "", "using_string_cache"], [778, 4, 1, "", "var"], [779, 4, 1, "", "when"], [780, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[157, 1, 1, "", "__dataframe__"], [158, 1, 1, "", "apply"], [159, 1, 1, "", "approx_n_unique"], [160, 1, 1, "", "bottom_k"], [161, 1, 1, "", "cast"], [162, 1, 1, "", "clear"], [163, 1, 1, "", "clone"], [164, 2, 1, "", "columns"], [165, 1, 1, "", "corr"], [166, 1, 1, "", "count"], [167, 1, 1, "", "describe"], [168, 1, 1, "", "drop"], [169, 1, 1, "", "drop_in_place"], [170, 1, 1, "", "drop_nulls"], [171, 2, 1, "", "dtypes"], [172, 1, 1, "", "equals"], [173, 1, 1, "", "estimated_size"], [174, 1, 1, "", "explode"], [175, 1, 1, "", "extend"], [176, 1, 1, "", "fill_nan"], [177, 1, 1, "", "fill_null"], [178, 1, 1, "", "filter"], [179, 1, 1, "", "find_idx_by_name"], [180, 2, 1, "", "flags"], [181, 1, 1, "", "fold"], [182, 1, 1, "", "frame_equal"], [183, 1, 1, "", "gather_every"], [184, 1, 1, "", "get_column"], [185, 1, 1, "", "get_column_index"], [186, 1, 1, "", "get_columns"], [187, 1, 1, "", "glimpse"], [188, 1, 1, "", "group_by"], [189, 1, 1, "", "group_by_dynamic"], [190, 1, 1, "", "group_by_rolling"], [191, 1, 1, "", "groupby"], [192, 1, 1, "", "groupby_dynamic"], [193, 1, 1, "", "groupby_rolling"], [194, 1, 1, "", "hash_rows"], [195, 1, 1, "", "head"], [196, 2, 1, "", "height"], [197, 1, 1, "", "hstack"], [198, 1, 1, "", "insert_at_idx"], [199, 1, 1, "", "insert_column"], [200, 1, 1, "", "interpolate"], [201, 1, 1, "", "is_duplicated"], [202, 1, 1, "", "is_empty"], [203, 1, 1, "", "is_unique"], [204, 1, 1, "", "item"], [205, 1, 1, "", "iter_columns"], [206, 1, 1, "", "iter_rows"], [207, 1, 1, "", "iter_slices"], [208, 1, 1, "", "join"], [209, 1, 1, "", "join_asof"], [210, 1, 1, "", "lazy"], [211, 1, 1, "", "limit"], [212, 1, 1, "", "map_rows"], [213, 1, 1, "", "max"], [214, 1, 1, "", "max_horizontal"], [215, 1, 1, "", "mean"], [216, 1, 1, "", "mean_horizontal"], [217, 1, 1, "", "median"], [218, 1, 1, "", "melt"], [219, 1, 1, "", "merge_sorted"], [220, 1, 1, "", "min"], [221, 1, 1, "", "min_horizontal"], [222, 1, 1, "", "n_chunks"], [223, 1, 1, "", "n_unique"], [224, 1, 1, "", "null_count"], [225, 1, 1, "", "partition_by"], [226, 1, 1, "", "pipe"], [227, 1, 1, "", "pivot"], [228, 1, 1, "", "product"], [229, 1, 1, "", "quantile"], [230, 1, 1, "", "rechunk"], [231, 1, 1, "", "rename"], [232, 1, 1, "", "replace"], [233, 1, 1, "", "replace_at_idx"], [234, 1, 1, "", "replace_column"], [235, 1, 1, "", "reverse"], [236, 1, 1, "", "rolling"], [237, 1, 1, "", "row"], [238, 1, 1, "", "rows"], [239, 1, 1, "", "rows_by_key"], [240, 1, 1, "", "sample"], [241, 2, 1, "", "schema"], [242, 1, 1, "", "select"], [243, 1, 1, "", "select_seq"], [244, 1, 1, "", "set_sorted"], [245, 2, 1, "", "shape"], [246, 1, 1, "", "shift"], [247, 1, 1, "", "shift_and_fill"], [248, 1, 1, "", "shrink_to_fit"], [249, 1, 1, "", "slice"], [250, 1, 1, "", "sort"], [251, 1, 1, "", "std"], [252, 1, 1, "", "sum"], [253, 1, 1, "", "sum_horizontal"], [254, 1, 1, "", "tail"], [255, 1, 1, "", "take_every"], [256, 1, 1, "", "to_arrow"], [257, 1, 1, "", "to_dict"], [258, 1, 1, "", "to_dicts"], [259, 1, 1, "", "to_dummies"], [260, 1, 1, "", "to_init_repr"], [261, 1, 1, "", "to_numpy"], [262, 1, 1, "", "to_pandas"], [263, 1, 1, "", "to_series"], [264, 1, 1, "", "to_struct"], [265, 1, 1, "", "top_k"], [266, 1, 1, "", "transpose"], [267, 1, 1, "", "unique"], [268, 1, 1, "", "unnest"], [269, 1, 1, "", "unstack"], [270, 1, 1, "", "update"], [271, 1, 1, "", "upsample"], [272, 1, 1, "", "var"], [273, 1, 1, "", "vstack"], [274, 2, 1, "", "width"], [275, 1, 1, "", "with_columns"], [276, 1, 1, "", "with_columns_seq"], [277, 1, 1, "", "with_row_count"], [278, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[309, 1, 1, "", "abs"], [310, 1, 1, "", "add"], [311, 1, 1, "", "agg_groups"], [312, 1, 1, "", "alias"], [313, 1, 1, "", "all"], [314, 1, 1, "", "and_"], [315, 1, 1, "", "any"], [316, 1, 1, "", "append"], [317, 1, 1, "", "apply"], [318, 1, 1, "", "approx_n_unique"], [319, 1, 1, "", "arccos"], [320, 1, 1, "", "arccosh"], [321, 1, 1, "", "arcsin"], [322, 1, 1, "", "arcsinh"], [323, 1, 1, "", "arctan"], [324, 1, 1, "", "arctanh"], [325, 1, 1, "", "arg_max"], [326, 1, 1, "", "arg_min"], [327, 1, 1, "", "arg_sort"], [328, 1, 1, "", "arg_true"], [329, 1, 1, "", "arg_unique"], [354, 1, 1, "", "backward_fill"], [360, 1, 1, "", "bottom_k"], [361, 1, 1, "", "cast"], [364, 1, 1, "", "cbrt"], [365, 1, 1, "", "ceil"], [366, 1, 1, "", "clip"], [367, 1, 1, "", "clip_max"], [368, 1, 1, "", "clip_min"], [369, 1, 1, "", "cos"], [370, 1, 1, "", "cosh"], [371, 1, 1, "", "cot"], [372, 1, 1, "", "count"], [373, 1, 1, "", "cum_count"], [374, 1, 1, "", "cum_max"], [375, 1, 1, "", "cum_min"], [376, 1, 1, "", "cum_prod"], [377, 1, 1, "", "cum_sum"], [378, 1, 1, "", "cumcount"], [379, 1, 1, "", "cummax"], [380, 1, 1, "", "cummin"], [381, 1, 1, "", "cumprod"], [382, 1, 1, "", "cumsum"], [383, 1, 1, "", "cumulative_eval"], [384, 1, 1, "", "cut"], [385, 1, 1, "", "degrees"], [386, 1, 1, "", "deserialize"], [387, 1, 1, "", "diff"], [388, 1, 1, "", "dot"], [389, 1, 1, "", "drop_nans"], [390, 1, 1, "", "drop_nulls"], [441, 1, 1, "", "entropy"], [442, 1, 1, "", "eq"], [443, 1, 1, "", "eq_missing"], [444, 1, 1, "", "ewm_mean"], [445, 1, 1, "", "ewm_std"], [446, 1, 1, "", "ewm_var"], [447, 1, 1, "", "exclude"], [448, 1, 1, "", "exp"], [449, 1, 1, "", "explode"], [450, 1, 1, "", "extend_constant"], [451, 1, 1, "", "fill_nan"], [452, 1, 1, "", "fill_null"], [453, 1, 1, "", "filter"], [454, 1, 1, "", "first"], [455, 1, 1, "", "flatten"], [456, 1, 1, "", "floor"], [457, 1, 1, "", "floordiv"], [458, 1, 1, "", "forward_fill"], [459, 1, 1, "", "from_json"], [460, 1, 1, "", "gather"], [461, 1, 1, "", "gather_every"], [462, 1, 1, "", "ge"], [463, 1, 1, "", "get"], [464, 1, 1, "", "gt"], [465, 1, 1, "", "hash"], [466, 1, 1, "", "head"], [467, 1, 1, "", "hist"], [468, 1, 1, "", "implode"], [469, 1, 1, "", "inspect"], [470, 1, 1, "", "interpolate"], [471, 1, 1, "", "is_between"], [472, 1, 1, "", "is_duplicated"], [473, 1, 1, "", "is_finite"], [474, 1, 1, "", "is_first"], [475, 1, 1, "", "is_first_distinct"], [476, 1, 1, "", "is_in"], [477, 1, 1, "", "is_infinite"], [478, 1, 1, "", "is_last"], [479, 1, 1, "", "is_last_distinct"], [480, 1, 1, "", "is_nan"], [481, 1, 1, "", "is_not"], [482, 1, 1, "", "is_not_nan"], [483, 1, 1, "", "is_not_null"], [484, 1, 1, "", "is_null"], [485, 1, 1, "", "is_unique"], [486, 1, 1, "", "keep_name"], [487, 1, 1, "", "kurtosis"], [488, 1, 1, "", "last"], [489, 1, 1, "", "le"], [490, 1, 1, "", "len"], [491, 1, 1, "", "limit"], [535, 1, 1, "", "log"], [536, 1, 1, "", "log10"], [537, 1, 1, "", "log1p"], [538, 1, 1, "", "lower_bound"], [539, 1, 1, "", "lt"], [540, 1, 1, "", "map"], [541, 1, 1, "", "map_alias"], [542, 1, 1, "", "map_batches"], [543, 1, 1, "", "map_dict"], [544, 1, 1, "", "map_elements"], [545, 1, 1, "", "max"], [546, 1, 1, "", "mean"], [547, 1, 1, "", "median"], [559, 1, 1, "", "min"], [560, 1, 1, "", "mod"], [561, 1, 1, "", "mode"], [562, 1, 1, "", "mul"], [563, 1, 1, "", "n_unique"], [573, 1, 1, "", "nan_max"], [574, 1, 1, "", "nan_min"], [575, 1, 1, "", "ne"], [576, 1, 1, "", "ne_missing"], [577, 1, 1, "", "neg"], [578, 1, 1, "", "not_"], [579, 1, 1, "", "null_count"], [580, 1, 1, "", "or_"], [581, 1, 1, "", "over"], [582, 1, 1, "", "pct_change"], [583, 1, 1, "", "peak_max"], [584, 1, 1, "", "peak_min"], [585, 1, 1, "", "pipe"], [586, 1, 1, "", "pow"], [587, 1, 1, "", "prefix"], [588, 1, 1, "", "product"], [589, 1, 1, "", "qcut"], [590, 1, 1, "", "quantile"], [591, 1, 1, "", "radians"], [592, 1, 1, "", "rank"], [593, 1, 1, "", "rechunk"], [594, 1, 1, "", "reinterpret"], [595, 1, 1, "", "repeat_by"], [596, 1, 1, "", "replace"], [597, 1, 1, "", "reshape"], [598, 1, 1, "", "reverse"], [599, 1, 1, "", "rle"], [600, 1, 1, "", "rle_id"], [601, 1, 1, "", "rolling"], [602, 1, 1, "", "rolling_apply"], [603, 1, 1, "", "rolling_map"], [604, 1, 1, "", "rolling_max"], [605, 1, 1, "", "rolling_mean"], [606, 1, 1, "", "rolling_median"], [607, 1, 1, "", "rolling_min"], [608, 1, 1, "", "rolling_quantile"], [609, 1, 1, "", "rolling_skew"], [610, 1, 1, "", "rolling_std"], [611, 1, 1, "", "rolling_sum"], [612, 1, 1, "", "rolling_var"], [613, 1, 1, "", "round"], [614, 1, 1, "", "round_sig_figs"], [615, 1, 1, "", "sample"], [616, 1, 1, "", "search_sorted"], [617, 1, 1, "", "set_sorted"], [618, 1, 1, "", "shift"], [619, 1, 1, "", "shift_and_fill"], [620, 1, 1, "", "shrink_dtype"], [621, 1, 1, "", "shuffle"], [622, 1, 1, "", "sign"], [623, 1, 1, "", "sin"], [624, 1, 1, "", "sinh"], [625, 1, 1, "", "skew"], [626, 1, 1, "", "slice"], [627, 1, 1, "", "sort"], [628, 1, 1, "", "sort_by"], [629, 1, 1, "", "sqrt"], [630, 1, 1, "", "std"], [686, 1, 1, "", "sub"], [687, 1, 1, "", "suffix"], [688, 1, 1, "", "sum"], [689, 1, 1, "", "tail"], [690, 1, 1, "", "take"], [691, 1, 1, "", "take_every"], [692, 1, 1, "", "tan"], [693, 1, 1, "", "tanh"], [694, 1, 1, "", "to_physical"], [695, 1, 1, "", "top_k"], [696, 1, 1, "", "truediv"], [697, 1, 1, "", "unique"], [698, 1, 1, "", "unique_counts"], [699, 1, 1, "", "upper_bound"], [700, 1, 1, "", "value_counts"], [701, 1, 1, "", "var"], [702, 1, 1, "", "where"], [703, 1, 1, "", "xor"]], "polars.Expr.arr": [[330, 1, 1, "", "all"], [331, 1, 1, "", "any"], [332, 1, 1, "", "arg_max"], [333, 1, 1, "", "arg_min"], [334, 1, 1, "", "contains"], [335, 1, 1, "", "count_matches"], [336, 1, 1, "", "explode"], [337, 1, 1, "", "first"], [338, 1, 1, "", "get"], [339, 1, 1, "", "join"], [340, 1, 1, "", "last"], [341, 1, 1, "", "max"], [342, 1, 1, "", "median"], [343, 1, 1, "", "min"], [344, 1, 1, "", "n_unique"], [345, 1, 1, "", "reverse"], [346, 1, 1, "", "shift"], [347, 1, 1, "", "sort"], [348, 1, 1, "", "std"], [349, 1, 1, "", "sum"], [350, 1, 1, "", "to_list"], [351, 1, 1, "", "to_struct"], [352, 1, 1, "", "unique"], [353, 1, 1, "", "var"]], "polars.Expr.bin": [[355, 1, 1, "", "contains"], [356, 1, 1, "", "decode"], [357, 1, 1, "", "encode"], [358, 1, 1, "", "ends_with"], [359, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[362, 1, 1, "", "get_categories"], [363, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[391, 1, 1, "", "base_utc_offset"], [392, 1, 1, "", "cast_time_unit"], [393, 1, 1, "", "century"], [394, 1, 1, "", "combine"], [395, 1, 1, "", "convert_time_zone"], [396, 1, 1, "", "date"], [397, 1, 1, "", "datetime"], [398, 1, 1, "", "day"], [399, 1, 1, "", "days"], [400, 1, 1, "", "dst_offset"], [401, 1, 1, "", "epoch"], [402, 1, 1, "", "hour"], [403, 1, 1, "", "hours"], [404, 1, 1, "", "is_leap_year"], [405, 1, 1, "", "iso_year"], [406, 1, 1, "", "microsecond"], [407, 1, 1, "", "microseconds"], [408, 1, 1, "", "millennium"], [409, 1, 1, "", "millisecond"], [410, 1, 1, "", "milliseconds"], [411, 1, 1, "", "minute"], [412, 1, 1, "", "minutes"], [413, 1, 1, "", "month"], [414, 1, 1, "", "month_end"], [415, 1, 1, "", "month_start"], [416, 1, 1, "", "nanosecond"], [417, 1, 1, "", "nanoseconds"], [418, 1, 1, "", "offset_by"], [419, 1, 1, "", "ordinal_day"], [420, 1, 1, "", "quarter"], [421, 1, 1, "", "replace_time_zone"], [422, 1, 1, "", "round"], [423, 1, 1, "", "second"], [424, 1, 1, "", "seconds"], [425, 1, 1, "", "strftime"], [426, 1, 1, "", "time"], [427, 1, 1, "", "timestamp"], [428, 1, 1, "", "to_string"], [429, 1, 1, "", "total_days"], [430, 1, 1, "", "total_hours"], [431, 1, 1, "", "total_microseconds"], [432, 1, 1, "", "total_milliseconds"], [433, 1, 1, "", "total_minutes"], [434, 1, 1, "", "total_nanoseconds"], [435, 1, 1, "", "total_seconds"], [436, 1, 1, "", "truncate"], [437, 1, 1, "", "week"], [438, 1, 1, "", "weekday"], [439, 1, 1, "", "with_time_unit"], [440, 1, 1, "", "year"]], "polars.Expr.list": [[492, 1, 1, "", "all"], [493, 1, 1, "", "any"], [494, 1, 1, "", "arg_max"], [495, 1, 1, "", "arg_min"], [496, 1, 1, "", "concat"], [497, 1, 1, "", "contains"], [498, 1, 1, "", "count_match"], [499, 1, 1, "", "count_matches"], [500, 1, 1, "", "diff"], [501, 1, 1, "", "drop_nulls"], [502, 1, 1, "", "eval"], [503, 1, 1, "", "explode"], [504, 1, 1, "", "first"], [505, 1, 1, "", "gather"], [506, 1, 1, "", "gather_every"], [507, 1, 1, "", "get"], [508, 1, 1, "", "head"], [509, 1, 1, "", "join"], [510, 1, 1, "", "last"], [511, 1, 1, "", "len"], [512, 1, 1, "", "lengths"], [513, 1, 1, "", "max"], [514, 1, 1, "", "mean"], [515, 1, 1, "", "median"], [516, 1, 1, "", "min"], [517, 1, 1, "", "n_unique"], [518, 1, 1, "", "reverse"], [519, 1, 1, "", "sample"], [520, 1, 1, "", "set_difference"], [521, 1, 1, "", "set_intersection"], [522, 1, 1, "", "set_symmetric_difference"], [523, 1, 1, "", "set_union"], [524, 1, 1, "", "shift"], [525, 1, 1, "", "slice"], [526, 1, 1, "", "sort"], [527, 1, 1, "", "std"], [528, 1, 1, "", "sum"], [529, 1, 1, "", "tail"], [530, 1, 1, "", "take"], [531, 1, 1, "", "to_array"], [532, 1, 1, "", "to_struct"], [533, 1, 1, "", "unique"], [534, 1, 1, "", "var"]], "polars.Expr.meta": [[548, 1, 1, "", "eq"], [549, 1, 1, "", "has_multiple_outputs"], [550, 1, 1, "", "is_regex_projection"], [551, 1, 1, "", "ne"], [552, 1, 1, "", "output_name"], [553, 1, 1, "", "pop"], [554, 1, 1, "", "root_names"], [555, 1, 1, "", "serialize"], [556, 1, 1, "", "tree_format"], [557, 1, 1, "", "undo_aliases"], [558, 1, 1, "", "write_json"]], "polars.Expr.name": [[564, 1, 1, "", "keep"], [565, 1, 1, "", "map"], [566, 1, 1, "", "map_fields"], [567, 1, 1, "", "prefix"], [568, 1, 1, "", "prefix_fields"], [569, 1, 1, "", "suffix"], [570, 1, 1, "", "suffix_fields"], [571, 1, 1, "", "to_lowercase"], [572, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[631, 1, 1, "", "concat"], [632, 1, 1, "", "contains"], [633, 1, 1, "", "contains_any"], [634, 1, 1, "", "count_match"], [635, 1, 1, "", "count_matches"], [636, 1, 1, "", "decode"], [637, 1, 1, "", "encode"], [638, 1, 1, "", "ends_with"], [639, 1, 1, "", "explode"], [640, 1, 1, "", "extract"], [641, 1, 1, "", "extract_all"], [642, 1, 1, "", "extract_groups"], [643, 1, 1, "", "find"], [644, 1, 1, "", "json_decode"], [645, 1, 1, "", "json_extract"], [646, 1, 1, "", "json_path_match"], [647, 1, 1, "", "len_bytes"], [648, 1, 1, "", "len_chars"], [649, 1, 1, "", "lengths"], [650, 1, 1, "", "ljust"], [651, 1, 1, "", "lstrip"], [652, 1, 1, "", "n_chars"], [653, 1, 1, "", "pad_end"], [654, 1, 1, "", "pad_start"], [655, 1, 1, "", "parse_int"], [656, 1, 1, "", "replace"], [657, 1, 1, "", "replace_all"], [658, 1, 1, "", "replace_many"], [659, 1, 1, "", "reverse"], [660, 1, 1, "", "rjust"], [661, 1, 1, "", "rstrip"], [662, 1, 1, "", "slice"], [663, 1, 1, "", "split"], [664, 1, 1, "", "split_exact"], [665, 1, 1, "", "splitn"], [666, 1, 1, "", "starts_with"], [667, 1, 1, "", "strip"], [668, 1, 1, "", "strip_chars"], [669, 1, 1, "", "strip_chars_end"], [670, 1, 1, "", "strip_chars_start"], [671, 1, 1, "", "strip_prefix"], [672, 1, 1, "", "strip_suffix"], [673, 1, 1, "", "strptime"], [674, 1, 1, "", "to_date"], [675, 1, 1, "", "to_datetime"], [676, 1, 1, "", "to_decimal"], [677, 1, 1, "", "to_integer"], [678, 1, 1, "", "to_lowercase"], [679, 1, 1, "", "to_time"], [680, 1, 1, "", "to_titlecase"], [681, 1, 1, "", "to_uppercase"], [682, 1, 1, "", "zfill"]], "polars.Expr.struct": [[683, 1, 1, "", "field"], [684, 1, 1, "", "json_encode"], [685, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[804, 1, 1, "", "approx_n_unique"], [805, 1, 1, "", "bottom_k"], [806, 1, 1, "", "cache"], [807, 1, 1, "", "cast"], [808, 1, 1, "", "clear"], [809, 1, 1, "", "clone"], [810, 1, 1, "", "collect"], [811, 1, 1, "", "collect_async"], [812, 2, 1, "", "columns"], [813, 1, 1, "", "count"], [814, 1, 1, "", "describe"], [815, 1, 1, "", "deserialize"], [816, 1, 1, "", "drop"], [817, 1, 1, "", "drop_nulls"], [818, 2, 1, "", "dtypes"], [819, 1, 1, "", "explain"], [820, 1, 1, "", "explode"], [821, 1, 1, "", "fetch"], [822, 1, 1, "", "fill_nan"], [823, 1, 1, "", "fill_null"], [824, 1, 1, "", "filter"], [825, 1, 1, "", "first"], [826, 1, 1, "", "gather_every"], [827, 1, 1, "", "group_by"], [828, 1, 1, "", "group_by_dynamic"], [829, 1, 1, "", "group_by_rolling"], [830, 1, 1, "", "groupby"], [831, 1, 1, "", "groupby_dynamic"], [832, 1, 1, "", "groupby_rolling"], [833, 1, 1, "", "head"], [834, 1, 1, "", "inspect"], [835, 1, 1, "", "interpolate"], [836, 1, 1, "", "join"], [837, 1, 1, "", "join_asof"], [838, 1, 1, "", "last"], [839, 1, 1, "", "lazy"], [840, 1, 1, "", "limit"], [841, 1, 1, "", "map"], [842, 1, 1, "", "map_batches"], [843, 1, 1, "", "max"], [844, 1, 1, "", "mean"], [845, 1, 1, "", "median"], [846, 1, 1, "", "melt"], [847, 1, 1, "", "merge_sorted"], [848, 1, 1, "", "min"], [849, 1, 1, "", "null_count"], [850, 1, 1, "", "pipe"], [851, 1, 1, "", "profile"], [852, 1, 1, "", "quantile"], [853, 1, 1, "", "rename"], [854, 1, 1, "", "reverse"], [855, 1, 1, "", "rolling"], [856, 2, 1, "", "schema"], [857, 1, 1, "", "select"], [858, 1, 1, "", "select_seq"], [859, 1, 1, "", "serialize"], [860, 1, 1, "", "set_sorted"], [861, 1, 1, "", "shift"], [862, 1, 1, "", "shift_and_fill"], [863, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_ndjson"], [61, 1, 1, "", "sink_parquet"], [864, 1, 1, "", "slice"], [865, 1, 1, "", "sort"], [866, 1, 1, "", "std"], [867, 1, 1, "", "sum"], [868, 1, 1, "", "tail"], [869, 1, 1, "", "take_every"], [870, 1, 1, "", "top_k"], [871, 1, 1, "", "unique"], [872, 1, 1, "", "unnest"], [873, 1, 1, "", "update"], [874, 1, 1, "", "var"], [875, 2, 1, "", "width"], [876, 1, 1, "", "with_columns"], [877, 1, 1, "", "with_columns_seq"], [878, 1, 1, "", "with_context"], [879, 1, 1, "", "with_row_count"], [880, 1, 1, "", "with_row_index"]], "polars.List": [[62, 1, 1, "", "__init__"]], "polars.Null": [[63, 1, 1, "", "__init__"]], "polars.Object": [[64, 1, 1, "", "__init__"]], "polars.SQLContext": [[1300, 1, 1, "", "__enter__"], [1300, 1, 1, "", "__exit__"], [1300, 1, 1, "", "__init__"], [65, 1, 1, "", "execute"], [66, 1, 1, "", "register"], [67, 1, 1, "", "register_globals"], [68, 1, 1, "", "register_many"], [69, 1, 1, "", "tables"], [70, 1, 1, "", "unregister"]], "polars.Series": [[908, 1, 1, "", "abs"], [909, 1, 1, "", "alias"], [910, 1, 1, "", "all"], [911, 1, 1, "", "any"], [912, 1, 1, "", "append"], [913, 1, 1, "", "apply"], [914, 1, 1, "", "arccos"], [915, 1, 1, "", "arccosh"], [916, 1, 1, "", "arcsin"], [917, 1, 1, "", "arcsinh"], [918, 1, 1, "", "arctan"], [919, 1, 1, "", "arctanh"], [920, 1, 1, "", "arg_max"], [921, 1, 1, "", "arg_min"], [922, 1, 1, "", "arg_sort"], [923, 1, 1, "", "arg_true"], [924, 1, 1, "", "arg_unique"], [954, 1, 1, "", "bottom_k"], [955, 1, 1, "", "cast"], [961, 1, 1, "", "cbrt"], [962, 1, 1, "", "ceil"], [963, 1, 1, "", "chunk_lengths"], [964, 1, 1, "", "clear"], [965, 1, 1, "", "clip"], [966, 1, 1, "", "clip_max"], [967, 1, 1, "", "clip_min"], [968, 1, 1, "", "clone"], [969, 1, 1, "", "cos"], [970, 1, 1, "", "cosh"], [971, 1, 1, "", "cot"], [972, 1, 1, "", "cum_max"], [973, 1, 1, "", "cum_min"], [974, 1, 1, "", "cum_prod"], [975, 1, 1, "", "cum_sum"], [976, 1, 1, "", "cummax"], [977, 1, 1, "", "cummin"], [978, 1, 1, "", "cumprod"], [979, 1, 1, "", "cumsum"], [980, 1, 1, "", "cumulative_eval"], [981, 1, 1, "", "cut"], [982, 1, 1, "", "describe"], [983, 1, 1, "", "diff"], [984, 1, 1, "", "dot"], [985, 1, 1, "", "drop_nans"], [986, 1, 1, "", "drop_nulls"], [1041, 3, 1, "", "dtype"], [1042, 1, 1, "", "entropy"], [1043, 1, 1, "", "equals"], [1044, 1, 1, "", "estimated_size"], [1045, 1, 1, "", "ewm_mean"], [1046, 1, 1, "", "ewm_std"], [1047, 1, 1, "", "ewm_var"], [1048, 1, 1, "", "exp"], [1049, 1, 1, "", "explode"], [1050, 1, 1, "", "extend"], [1051, 1, 1, "", "extend_constant"], [1052, 1, 1, "", "fill_nan"], [1053, 1, 1, "", "fill_null"], [1054, 1, 1, "", "filter"], [1055, 3, 1, "", "flags"], [1056, 1, 1, "", "floor"], [1057, 1, 1, "", "gather"], [1058, 1, 1, "", "gather_every"], [1059, 1, 1, "", "get_chunks"], [1060, 1, 1, "", "has_validity"], [1061, 1, 1, "", "hash"], [1062, 1, 1, "", "head"], [1063, 1, 1, "", "hist"], [1064, 1, 1, "", "implode"], [1065, 3, 1, "", "inner_dtype"], [1066, 1, 1, "", "interpolate"], [1067, 1, 1, "", "is_between"], [1068, 1, 1, "", "is_boolean"], [1069, 1, 1, "", "is_duplicated"], [1070, 1, 1, "", "is_empty"], [1071, 1, 1, "", "is_finite"], [1072, 1, 1, "", "is_first"], [1073, 1, 1, "", "is_first_distinct"], [1074, 1, 1, "", "is_float"], [1075, 1, 1, "", "is_in"], [1076, 1, 1, "", "is_infinite"], [1077, 1, 1, "", "is_integer"], [1078, 1, 1, "", "is_last"], [1079, 1, 1, "", "is_last_distinct"], [1080, 1, 1, "", "is_nan"], [1081, 1, 1, "", "is_not_nan"], [1082, 1, 1, "", "is_not_null"], [1083, 1, 1, "", "is_null"], [1084, 1, 1, "", "is_numeric"], [1085, 1, 1, "", "is_sorted"], [1086, 1, 1, "", "is_temporal"], [1087, 1, 1, "", "is_unique"], [1088, 1, 1, "", "is_utf8"], [1089, 1, 1, "", "item"], [1090, 1, 1, "", "kurtosis"], [1091, 1, 1, "", "len"], [1092, 1, 1, "", "limit"], [1136, 1, 1, "", "log"], [1137, 1, 1, "", "log10"], [1138, 1, 1, "", "log1p"], [1139, 1, 1, "", "lower_bound"], [1140, 1, 1, "", "map_dict"], [1141, 1, 1, "", "map_elements"], [1142, 1, 1, "", "max"], [1143, 1, 1, "", "mean"], [1144, 1, 1, "", "median"], [1145, 1, 1, "", "min"], [1146, 1, 1, "", "mode"], [1147, 1, 1, "", "n_chunks"], [1148, 1, 1, "", "n_unique"], [1149, 3, 1, "", "name"], [1150, 1, 1, "", "nan_max"], [1151, 1, 1, "", "nan_min"], [1152, 1, 1, "", "new_from_index"], [1153, 1, 1, "", "not_"], [1154, 1, 1, "", "null_count"], [1155, 1, 1, "", "pct_change"], [1156, 1, 1, "", "peak_max"], [1157, 1, 1, "", "peak_min"], [1158, 1, 1, "", "product"], [1159, 1, 1, "", "qcut"], [1160, 1, 1, "", "quantile"], [1161, 1, 1, "", "rank"], [1162, 1, 1, "", "rechunk"], [1163, 1, 1, "", "reinterpret"], [1164, 1, 1, "", "rename"], [1165, 1, 1, "", "replace"], [1166, 1, 1, "", "reshape"], [1167, 1, 1, "", "reverse"], [1168, 1, 1, "", "rle"], [1169, 1, 1, "", "rle_id"], [1170, 1, 1, "", "rolling_apply"], [1171, 1, 1, "", "rolling_map"], [1172, 1, 1, "", "rolling_max"], [1173, 1, 1, "", "rolling_mean"], [1174, 1, 1, "", "rolling_median"], [1175, 1, 1, "", "rolling_min"], [1176, 1, 1, "", "rolling_quantile"], [1177, 1, 1, "", "rolling_skew"], [1178, 1, 1, "", "rolling_std"], [1179, 1, 1, "", "rolling_sum"], [1180, 1, 1, "", "rolling_var"], [1181, 1, 1, "", "round"], [1182, 1, 1, "", "round_sig_figs"], [1183, 1, 1, "", "sample"], [1184, 1, 1, "", "scatter"], [1185, 1, 1, "", "search_sorted"], [1186, 1, 1, "", "series_equal"], [1187, 1, 1, "", "set"], [1188, 1, 1, "", "set_at_idx"], [1189, 1, 1, "", "set_sorted"], [1190, 3, 1, "", "shape"], [1191, 1, 1, "", "shift"], [1192, 1, 1, "", "shift_and_fill"], [1193, 1, 1, "", "shrink_dtype"], [1194, 1, 1, "", "shrink_to_fit"], [1195, 1, 1, "", "shuffle"], [1196, 1, 1, "", "sign"], [1197, 1, 1, "", "sin"], [1198, 1, 1, "", "sinh"], [1199, 1, 1, "", "skew"], [1200, 1, 1, "", "slice"], [1201, 1, 1, "", "sort"], [1202, 1, 1, "", "sqrt"], [1203, 1, 1, "", "std"], [1262, 1, 1, "", "sum"], [1263, 1, 1, "", "tail"], [1264, 1, 1, "", "take"], [1265, 1, 1, "", "take_every"], [1266, 1, 1, "", "tan"], [1267, 1, 1, "", "tanh"], [1268, 1, 1, "", "to_arrow"], [1269, 1, 1, "", "to_dummies"], [1270, 1, 1, "", "to_frame"], [1271, 1, 1, "", "to_init_repr"], [1272, 1, 1, "", "to_list"], [1273, 1, 1, "", "to_numpy"], [1274, 1, 1, "", "to_pandas"], [1275, 1, 1, "", "to_physical"], [1276, 1, 1, "", "top_k"], [1277, 1, 1, "", "unique"], [1278, 1, 1, "", "unique_counts"], [1279, 1, 1, "", "upper_bound"], [1280, 1, 1, "", "value_counts"], [1281, 1, 1, "", "var"], [1282, 1, 1, "", "view"], [1283, 1, 1, "", "zip_with"]], "polars.Series.arr": [[925, 1, 1, "", "all"], [926, 1, 1, "", "any"], [927, 1, 1, "", "arg_max"], [928, 1, 1, "", "arg_min"], [929, 1, 1, "", "contains"], [930, 1, 1, "", "count_matches"], [931, 1, 1, "", "explode"], [932, 1, 1, "", "first"], [933, 1, 1, "", "get"], [934, 1, 1, "", "join"], [935, 1, 1, "", "last"], [936, 1, 1, "", "max"], [937, 1, 1, "", "median"], [938, 1, 1, "", "min"], [939, 1, 1, "", "n_unique"], [940, 1, 1, "", "reverse"], [941, 1, 1, "", "shift"], [942, 1, 1, "", "sort"], [943, 1, 1, "", "std"], [944, 1, 1, "", "sum"], [945, 1, 1, "", "to_list"], [946, 1, 1, "", "to_struct"], [947, 1, 1, "", "unique"], [948, 1, 1, "", "var"]], "polars.Series.bin": [[949, 1, 1, "", "contains"], [950, 1, 1, "", "decode"], [951, 1, 1, "", "encode"], [952, 1, 1, "", "ends_with"], [953, 1, 1, "", "starts_with"]], "polars.Series.cat": [[956, 1, 1, "", "get_categories"], [957, 1, 1, "", "is_local"], [958, 1, 1, "", "set_ordering"], [959, 1, 1, "", "to_local"], [960, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[987, 1, 1, "", "base_utc_offset"], [988, 1, 1, "", "cast_time_unit"], [989, 1, 1, "", "century"], [990, 1, 1, "", "combine"], [991, 1, 1, "", "convert_time_zone"], [992, 1, 1, "", "date"], [993, 1, 1, "", "datetime"], [994, 1, 1, "", "day"], [995, 1, 1, "", "days"], [996, 1, 1, "", "dst_offset"], [997, 1, 1, "", "epoch"], [998, 1, 1, "", "hour"], [999, 1, 1, "", "hours"], [1000, 1, 1, "", "is_leap_year"], [1001, 1, 1, "", "iso_year"], [1002, 1, 1, "", "max"], [1003, 1, 1, "", "mean"], [1004, 1, 1, "", "median"], [1005, 1, 1, "", "microsecond"], [1006, 1, 1, "", "microseconds"], [1007, 1, 1, "", "millennium"], [1008, 1, 1, "", "millisecond"], [1009, 1, 1, "", "milliseconds"], [1010, 1, 1, "", "min"], [1011, 1, 1, "", "minute"], [1012, 1, 1, "", "minutes"], [1013, 1, 1, "", "month"], [1014, 1, 1, "", "month_end"], [1015, 1, 1, "", "month_start"], [1016, 1, 1, "", "nanosecond"], [1017, 1, 1, "", "nanoseconds"], [1018, 1, 1, "", "offset_by"], [1019, 1, 1, "", "ordinal_day"], [1020, 1, 1, "", "quarter"], [1021, 1, 1, "", "replace_time_zone"], [1022, 1, 1, "", "round"], [1023, 1, 1, "", "second"], [1024, 1, 1, "", "seconds"], [1025, 1, 1, "", "strftime"], [1026, 1, 1, "", "time"], [1027, 1, 1, "", "timestamp"], [1028, 1, 1, "", "to_string"], [1029, 1, 1, "", "total_days"], [1030, 1, 1, "", "total_hours"], [1031, 1, 1, "", "total_microseconds"], [1032, 1, 1, "", "total_milliseconds"], [1033, 1, 1, "", "total_minutes"], [1034, 1, 1, "", "total_nanoseconds"], [1035, 1, 1, "", "total_seconds"], [1036, 1, 1, "", "truncate"], [1037, 1, 1, "", "week"], [1038, 1, 1, "", "weekday"], [1039, 1, 1, "", "with_time_unit"], [1040, 1, 1, "", "year"]], "polars.Series.list": [[1093, 1, 1, "", "all"], [1094, 1, 1, "", "any"], [1095, 1, 1, "", "arg_max"], [1096, 1, 1, "", "arg_min"], [1097, 1, 1, "", "concat"], [1098, 1, 1, "", "contains"], [1099, 1, 1, "", "count_match"], [1100, 1, 1, "", "count_matches"], [1101, 1, 1, "", "diff"], [1102, 1, 1, "", "drop_nulls"], [1103, 1, 1, "", "eval"], [1104, 1, 1, "", "explode"], [1105, 1, 1, "", "first"], [1106, 1, 1, "", "gather"], [1107, 1, 1, "", "gather_every"], [1108, 1, 1, "", "get"], [1109, 1, 1, "", "head"], [1110, 1, 1, "", "join"], [1111, 1, 1, "", "last"], [1112, 1, 1, "", "len"], [1113, 1, 1, "", "lengths"], [1114, 1, 1, "", "max"], [1115, 1, 1, "", "mean"], [1116, 1, 1, "", "median"], [1117, 1, 1, "", "min"], [1118, 1, 1, "", "n_unique"], [1119, 1, 1, "", "reverse"], [1120, 1, 1, "", "sample"], [1121, 1, 1, "", "set_difference"], [1122, 1, 1, "", "set_intersection"], [1123, 1, 1, "", "set_symmetric_difference"], [1124, 1, 1, "", "set_union"], [1125, 1, 1, "", "shift"], [1126, 1, 1, "", "slice"], [1127, 1, 1, "", "sort"], [1128, 1, 1, "", "std"], [1129, 1, 1, "", "sum"], [1130, 1, 1, "", "tail"], [1131, 1, 1, "", "take"], [1132, 1, 1, "", "to_array"], [1133, 1, 1, "", "to_struct"], [1134, 1, 1, "", "unique"], [1135, 1, 1, "", "var"]], "polars.Series.str": [[1204, 1, 1, "", "concat"], [1205, 1, 1, "", "contains"], [1206, 1, 1, "", "contains_any"], [1207, 1, 1, "", "count_match"], [1208, 1, 1, "", "count_matches"], [1209, 1, 1, "", "decode"], [1210, 1, 1, "", "encode"], [1211, 1, 1, "", "ends_with"], [1212, 1, 1, "", "explode"], [1213, 1, 1, "", "extract"], [1214, 1, 1, "", "extract_all"], [1215, 1, 1, "", "extract_groups"], [1216, 1, 1, "", "find"], [1217, 1, 1, "", "json_decode"], [1218, 1, 1, "", "json_extract"], [1219, 1, 1, "", "json_path_match"], [1220, 1, 1, "", "len_bytes"], [1221, 1, 1, "", "len_chars"], [1222, 1, 1, "", "lengths"], [1223, 1, 1, "", "ljust"], [1224, 1, 1, "", "lstrip"], [1225, 1, 1, "", "n_chars"], [1226, 1, 1, "", "pad_end"], [1227, 1, 1, "", "pad_start"], [1228, 1, 1, "", "parse_int"], [1229, 1, 1, "", "replace"], [1230, 1, 1, "", "replace_all"], [1231, 1, 1, "", "replace_many"], [1232, 1, 1, "", "reverse"], [1233, 1, 1, "", "rjust"], [1234, 1, 1, "", "rstrip"], [1235, 1, 1, "", "slice"], [1236, 1, 1, "", "split"], [1237, 1, 1, "", "split_exact"], [1238, 1, 1, "", "splitn"], [1239, 1, 1, "", "starts_with"], [1240, 1, 1, "", "strip"], [1241, 1, 1, "", "strip_chars"], [1242, 1, 1, "", "strip_chars_end"], [1243, 1, 1, "", "strip_chars_start"], [1244, 1, 1, "", "strip_prefix"], [1245, 1, 1, "", "strip_suffix"], [1246, 1, 1, "", "strptime"], [1247, 1, 1, "", "to_date"], [1248, 1, 1, "", "to_datetime"], [1249, 1, 1, "", "to_decimal"], [1250, 1, 1, "", "to_integer"], [1251, 1, 1, "", "to_lowercase"], [1252, 1, 1, "", "to_time"], [1253, 1, 1, "", "to_titlecase"], [1254, 1, 1, "", "to_uppercase"], [1255, 1, 1, "", "zfill"]], "polars.Series.struct": [[1256, 1, 1, "", "field"], [1257, 3, 1, "", "fields"], [1258, 1, 1, "", "json_encode"], [1259, 1, 1, "", "rename_fields"], [1260, 3, 1, "", "schema"], [1261, 1, 1, "", "unnest"]], "polars.String": [[71, 1, 1, "", "__init__"]], "polars.StringCache": [[72, 1, 1, "", "__init__"]], "polars.Struct": [[73, 1, 1, "", "__init__"]], "polars.Time": [[74, 1, 1, "", "__init__"]], "polars.UInt16": [[75, 1, 1, "", "__init__"]], "polars.UInt32": [[76, 1, 1, "", "__init__"]], "polars.UInt64": [[77, 1, 1, "", "__init__"]], "polars.UInt8": [[78, 1, 1, "", "__init__"]], "polars.Unknown": [[79, 1, 1, "", "__init__"]], "polars.api": [[82, 4, 1, "", "register_dataframe_namespace"], [83, 4, 1, "", "register_expr_namespace"], [84, 4, 1, "", "register_lazyframe_namespace"], [85, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[279, 1, 1, "", "__iter__"], [280, 1, 1, "", "agg"], [281, 1, 1, "", "all"], [282, 1, 1, "", "apply"], [283, 1, 1, "", "count"], [284, 1, 1, "", "first"], [285, 1, 1, "", "head"], [286, 1, 1, "", "last"], [287, 1, 1, "", "len"], [288, 1, 1, "", "map_groups"], [289, 1, 1, "", "max"], [290, 1, 1, "", "mean"], [291, 1, 1, "", "median"], [292, 1, 1, "", "min"], [293, 1, 1, "", "n_unique"], [294, 1, 1, "", "quantile"], [295, 1, 1, "", "sum"], [296, 1, 1, "", "tail"]], "polars.exceptions": [[92, 5, 1, "", "ArrowError"], [93, 5, 1, "", "ColumnNotFoundError"], [94, 5, 1, "", "ComputeError"], [95, 5, 1, "", "DuplicateError"], [96, 5, 1, "", "InvalidOperationError"], [97, 5, 1, "", "NoDataError"], [98, 5, 1, "", "NoRowsReturnedError"], [99, 5, 1, "", "PolarsError"], [100, 5, 1, "", "PolarsPanicError"], [101, 5, 1, "", "RowsError"], [102, 5, 1, "", "SchemaError"], [103, 5, 1, "", "SchemaFieldNotFoundError"], [104, 5, 1, "", "ShapeError"], [105, 5, 1, "", "StructFieldNotFoundError"], [106, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[116, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[881, 1, 1, "", "agg"], [882, 1, 1, "", "all"], [883, 1, 1, "", "apply"], [884, 1, 1, "", "count"], [885, 1, 1, "", "first"], [886, 1, 1, "", "head"], [887, 1, 1, "", "last"], [888, 1, 1, "", "len"], [889, 1, 1, "", "map_groups"], [890, 1, 1, "", "max"], [891, 1, 1, "", "mean"], [892, 1, 1, "", "median"], [893, 1, 1, "", "min"], [894, 1, 1, "", "n_unique"], [895, 1, 1, "", "quantile"], [896, 1, 1, "", "sum"], [897, 1, 1, "", "tail"]], "polars.plugins": [[905, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[906, 4, 1, "", "all"], [906, 4, 1, "", "by_dtype"], [906, 4, 1, "", "by_name"], [906, 4, 1, "", "categorical"], [906, 4, 1, "", "contains"], [906, 4, 1, "", "date"], [906, 4, 1, "", "datetime"], [906, 4, 1, "", "duration"], [906, 4, 1, "", "ends_with"], [906, 4, 1, "", "expand_selector"], [906, 4, 1, "", "first"], [906, 4, 1, "", "float"], [906, 4, 1, "", "integer"], [906, 4, 1, "", "is_selector"], [906, 4, 1, "", "last"], [906, 4, 1, "", "matches"], [906, 4, 1, "", "numeric"], [906, 4, 1, "", "starts_with"], [906, 4, 1, "", "string"], [906, 4, 1, "", "temporal"], [906, 4, 1, "", "time"]], "polars.testing": [[141, 4, 1, "", "assert_frame_equal"], [142, 4, 1, "", "assert_frame_not_equal"], [143, 4, 1, "", "assert_series_equal"], [144, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[145, 0, 1, "", "column"], [146, 4, 1, "", "columns"], [147, 4, 1, "", "create_list_strategy"], [148, 4, 1, "", "dataframes"], [149, 4, 1, "", "load_profile"], [150, 4, 1, "", "series"], [151, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[145, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 175, 1050], "api": [1, 82, 83, 84, 85, 801], "provid": 1, "new": 1, "function": [1, 788, 800, 906], "avail": 1, "registr": 1, "exampl": [1, 305, 906, 1296, 1301], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1301], "arrai": [2, 781, 1284], "binari": [3, 782, 795, 1286], "boolean": [4, 783, 1287], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 155], "activate_decim": 6, "load": [7, 155], "load_from_fil": 8, "restore_default": 9, "save": [10, 155], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 155], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 148, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 558], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 396, 730, 992], "datetim": [48, 397, 733, 993], "decim": 49, "durat": [50, 736], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 61, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901], "sink_csv": 58, "sink_ipc": 59, "sink_ndjson": 60, "sink_parquet": 61, "list": [62, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 790, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1293], "null": 63, "object": 64, "sqlcontext": [65, 66, 67, 68, 69, 70], "execut": 65, "regist": 66, "register_glob": 67, "register_mani": 68, "tabl": 69, "unregist": 70, "string": [71, 796, 1297], "stringcach": [72, 800], "struct": [73, 683, 684, 685, 771, 797, 1256, 1257, 1258, 1259, 1260, 1261, 1298], "time": [74, 426, 775, 1026], "uint16": 75, "uint32": 76, "uint64": 77, "uint8": 78, "unknown": 79, "utf8": 80, "align_fram": 81, "register_dataframe_namespac": 82, "register_expr_namespac": 83, "register_lazyframe_namespac": 84, "register_series_namespac": 85, "build_info": 86, "collect_al": 87, "collect_all_async": 88, "concat": [89, 496, 631, 1097, 1204], "disable_string_cach": 90, "enable_string_cach": 91, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 307], "arrowerror": 92, "columnnotfounderror": 93, "computeerror": 94, "duplicateerror": 95, "invalidoperationerror": 96, "nodataerror": 97, "norowsreturnederror": 98, "polarserror": 99, "polarspanicerror": 100, "rowserror": 101, "schemaerror": 102, "schemafieldnotfounderror": 103, "shapeerror": 104, "structfieldnotfounderror": 105, "toomanyrowsreturnederror": 106, "from_arrow": 107, "from_datafram": 108, "from_dict": [109, 110], "from_numpi": 111, "from_panda": 112, "from_record": 113, "from_repr": 114, "get_index_typ": 115, "io": 116, "csv": [116, 802], "batched_read": 116, "batchedcsvread": 116, "next_batch": 116, "read_avro": 117, "read_csv": 118, "read_csv_batch": 119, "read_databas": 120, "read_database_uri": 121, "read_delta": 122, "read_excel": 123, "read_ipc": 124, "read_ipc_schema": 125, "read_ipc_stream": 126, "read_json": 127, "read_ndjson": 128, "read_od": 129, "read_parquet": 130, "read_parquet_schema": 131, "scan_csv": 132, "scan_delta": 133, "scan_iceberg": 134, "scan_ipc": 135, "scan_ndjson": 136, "scan_parquet": 137, "scan_pyarrow_dataset": 138, "set_random_se": 139, "show_vers": 140, "test": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 1301], "assert_frame_equ": 141, "assert_frame_not_equ": 142, "assert_series_equ": 143, "assert_series_not_equ": 144, "parametr": [145, 146, 147, 148, 149, 150, 151, 1301], "column": [145, 146, 164, 786, 812], "create_list_strategi": 147, "load_profil": 149, "seri": [150, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1292], "set_profil": 151, "thread_pool_s": 152, "threadpool_s": 153, "using_string_cach": 154, "option": 155, "us": 155, "context": 155, "manag": 155, "decor": 155, "aggreg": [156, 308, 803, 907], "__dataframe__": 157, "appli": [158, 282, 317, 708, 883, 913], "approx_n_uniqu": [159, 318, 709, 804], "bottom_k": [160, 360, 805, 954], "cast": [161, 361, 807, 955], "clear": [162, 808, 964], "clone": [163, 809, 968], "corr": [165, 718], "count": [166, 283, 372, 719, 813, 884], "describ": [167, 814, 982], "drop": [168, 816], "drop_in_plac": 169, "drop_nul": [170, 390, 501, 817, 986, 1102], "dtype": [171, 818, 1041], "equal": [172, 1043], "estimated_s": [173, 1044], "explod": [174, 336, 449, 503, 639, 820, 931, 1049, 1104, 1212], "fill_nan": [176, 451, 822, 1052], "fill_nul": [177, 452, 823, 1053], "filter": [178, 453, 824, 1054], "find_idx_by_nam": 179, "flag": [180, 1055], "fold": [181, 740], "frame_equ": 182, "gather_everi": [183, 461, 506, 826, 1058, 1107], "get_column": [184, 186], "get_column_index": 185, "glimps": 187, "group_bi": [188, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 827, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897], "group_by_dynam": [189, 828], "group_by_rol": [190, 829], "groupbi": [191, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 301, 830, 900], "groupby_dynam": [192, 831], "groupby_rol": [193, 832], "hash_row": 194, "head": [195, 285, 466, 508, 744, 833, 886, 1062, 1109], "height": 196, "hstack": 197, "insert_at_idx": 198, "insert_column": 199, "interpol": [200, 470, 835, 1066], "is_dupl": [201, 472, 1069], "is_empti": [202, 1070], "is_uniqu": [203, 485, 1087], "item": [204, 1089], "iter_column": 205, "iter_row": 206, "iter_slic": 207, "join": [208, 339, 509, 836, 934, 1110], "join_asof": [209, 837], "lazi": [210, 839], "limit": [211, 491, 840, 1092], "map_row": 212, "max": [213, 289, 341, 513, 545, 754, 843, 890, 936, 1002, 1114, 1142], "max_horizont": [214, 755], "mean": [215, 290, 514, 546, 756, 844, 891, 1003, 1115, 1143], "mean_horizont": [216, 757], "median": [217, 291, 342, 515, 547, 758, 845, 892, 937, 1004, 1116, 1144], "melt": [218, 846], "merge_sort": [219, 847], "min": [220, 292, 343, 516, 559, 759, 848, 893, 938, 1010, 1117, 1145], "min_horizont": [221, 760], "n_chunk": [222, 1147], "n_uniqu": [223, 293, 344, 517, 563, 761, 894, 939, 1118, 1148], "null_count": [224, 579, 849, 1154], "partition_bi": 225, "pipe": [226, 585, 850], "pivot": 227, "product": [228, 588, 1158], "quantil": [229, 294, 590, 763, 852, 895, 1160], "rechunk": [230, 593, 1162], "renam": [231, 853, 1164], "replac": [232, 596, 656, 1165, 1229], "replace_at_idx": 233, "replace_column": 234, "revers": [235, 345, 518, 598, 659, 854, 940, 1119, 1167, 1232], "roll": [236, 601, 855], "row": [237, 238], "rows_by_kei": 239, "sampl": [240, 519, 615, 1120, 1183], "schema": [241, 856, 1260], "select": [242, 304, 768, 793, 857, 903, 1295], "select_seq": [243, 858], "set_sort": [244, 617, 860, 1189], "shape": [245, 1190], "shift": [246, 346, 524, 618, 861, 941, 1125, 1191], "shift_and_fil": [247, 619, 862, 1192], "shrink_to_fit": [248, 1194], "slice": [249, 525, 626, 662, 864, 1126, 1200, 1235], "sort": [250, 347, 526, 627, 865, 942, 1127, 1201], "std": [251, 348, 527, 630, 770, 866, 943, 1128, 1203], "sum": [252, 295, 349, 528, 688, 772, 867, 896, 944, 1129, 1262], "sum_horizont": [253, 773], "tail": [254, 296, 529, 689, 774, 868, 897, 1130, 1263], "take_everi": [255, 691, 869, 1265], "to_arrow": [256, 1268], "to_dict": [257, 258], "to_dummi": [259, 1269], "to_init_repr": [260, 1271], "to_numpi": [261, 1273], "to_panda": [262, 1274], "to_seri": 263, "to_struct": [264, 351, 532, 946, 1133], "top_k": [265, 695, 870, 1276], "transpos": 266, "uniqu": [267, 352, 533, 697, 871, 947, 1134, 1277], "unnest": [268, 872, 1261], "unstack": 269, "updat": [270, 873], "upsampl": 271, "var": [272, 353, 534, 701, 778, 874, 948, 1135, 1281], "vstack": 273, "width": [274, 875], "with_column": [275, 876], "with_columns_seq": [276, 877], "with_row_count": [277, 879], "with_row_index": [278, 880], "__iter__": 279, "agg": [280, 881], "all": [281, 313, 330, 492, 704, 882, 910, 925, 1093], "first": [284, 337, 454, 504, 739, 825, 885, 932, 1105], "last": [286, 340, 488, 510, 748, 838, 887, 935, 1111], "len": [287, 490, 511, 749, 888, 1091, 1112], "map_group": [288, 753, 889], "attribut": [297, 898, 1285], "comput": [298, 787, 1289], "descript": [299, 899, 1290], "export": [300, 1291], "miscellan": [303, 792, 800, 902, 1294], "manipul": [304, 793, 903, 1295], "plot": [305, 1296], "data": 306, "type": 306, "numer": [306, 795], "tempor": [306, 798, 1299], "nest": 306, "other": 306, "expr": [309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703], "ab": [309, 908], "add": 310, "agg_group": 311, "alia": [312, 909], "and_": 314, "ani": [315, 331, 493, 706, 911, 926, 1094], "append": [316, 912], "arcco": [319, 914], "arccosh": [320, 915], "arcsin": [321, 916], "arcsinh": [322, 917], "arctan": [323, 918], "arctanh": [324, 919], "arg_max": [325, 332, 494, 920, 927, 1095], "arg_min": [326, 333, 495, 921, 928, 1096], "arg_sort": [327, 922], "arg_tru": [328, 923], "arg_uniqu": [329, 924], "arr": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948], "contain": [334, 355, 497, 632, 929, 949, 1098, 1205], "count_match": [335, 498, 499, 634, 635, 930, 1099, 1100, 1207, 1208], "get": [338, 463, 507, 933, 1108], "to_list": [350, 945, 1272], "backward_fil": 354, "bin": [355, 356, 357, 358, 359, 949, 950, 951, 952, 953], "decod": [356, 636, 950, 1209], "encod": [357, 637, 951, 1210], "ends_with": [358, 638, 952, 1211], "starts_with": [359, 666, 953, 1239], "cat": [362, 363, 956, 957, 958, 959, 960], "get_categori": [362, 956], "set_ord": [363, 958], "cbrt": [364, 961], "ceil": [365, 962], "clip": [366, 965], "clip_max": [367, 966], "clip_min": [368, 967], "co": [369, 969], "cosh": [370, 970], "cot": [371, 971], "cum_count": [373, 721], "cum_max": [374, 972], "cum_min": [375, 973], "cum_prod": [376, 974], "cum_sum": [377, 724, 975], "cumcount": 378, "cummax": [379, 976], "cummin": [380, 977], "cumprod": [381, 978], "cumsum": [382, 728, 979], "cumulative_ev": [383, 980], "cut": [384, 981], "degre": 385, "deseri": [386, 815], "diff": [387, 500, 983, 1101], "dot": [388, 984], "drop_nan": [389, 985], "dt": [391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "base_utc_offset": [391, 987], "cast_time_unit": [392, 988], "centuri": [393, 989], "combin": [394, 990], "convert_time_zon": [395, 991], "dai": [398, 399, 994, 995], "dst_offset": [400, 996], "epoch": [401, 997], "hour": [402, 403, 998, 999], "is_leap_year": [404, 1000], "iso_year": [405, 1001], "microsecond": [406, 407, 1005, 1006], "millennium": [408, 1007], "millisecond": [409, 410, 1008, 1009], "minut": [411, 412, 1011, 1012], "month": [413, 1013], "month_end": [414, 1014], "month_start": [415, 1015], "nanosecond": [416, 417, 1016, 1017], "offset_bi": [418, 1018], "ordinal_dai": [419, 1019], "quarter": [420, 1020], "replace_time_zon": [421, 1021], "round": [422, 613, 1022, 1181], "second": [423, 424, 1023, 1024], "strftime": [425, 1025], "timestamp": [427, 1027], "to_str": [428, 1028], "total_dai": [429, 1029], "total_hour": [430, 1030], "total_microsecond": [431, 1031], "total_millisecond": [432, 1032], "total_minut": [433, 1033], "total_nanosecond": [434, 1034], "total_second": [435, 1035], "truncat": [436, 1036], "week": [437, 1037], "weekdai": [438, 1038], "with_time_unit": [439, 1039], "year": [440, 1040], "entropi": [441, 1042], "eq": [442, 548], "eq_miss": 443, "ewm_mean": [444, 1045], "ewm_std": [445, 1046], "ewm_var": [446, 1047], "exclud": [447, 738], "exp": [448, 1048], "extend_const": [450, 1051], "flatten": 455, "floor": [456, 1056], "floordiv": 457, "forward_fil": 458, "from_json": 459, "gather": [460, 505, 1057, 1106], "ge": 462, "gt": 464, "hash": [465, 1061], "hist": [467, 1063], "implod": [468, 745, 1064], "inspect": [469, 834], "is_between": [471, 1067], "is_finit": [473, 1071], "is_first": [474, 1072], "is_first_distinct": [475, 1073], "is_in": [476, 1075], "is_infinit": [477, 1076], "is_last": [478, 1078], "is_last_distinct": [479, 1079], "is_nan": [480, 1080], "is_not": 481, "is_not_nan": [482, 1081], "is_not_nul": [483, 1082], "is_nul": [484, 1083], "keep_nam": 486, "kurtosi": [487, 1090], "le": 489, "eval": [502, 1103], "length": [512, 649, 1113, 1222], "set_differ": [520, 1121], "set_intersect": [521, 1122], "set_symmetric_differ": [522, 1123], "set_union": [523, 1124], "take": [530, 690, 1131, 1264], "to_arrai": [531, 1132], "log": [535, 1136], "log10": [536, 1137], "log1p": [537, 1138], "lower_bound": [538, 1139], "lt": 539, "map": [540, 565, 751, 841], "map_alia": 541, "map_batch": [542, 752, 842], "map_dict": [543, 1140], "map_el": [544, 1141], "meta": [548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 791], "has_multiple_output": 549, "is_regex_project": 550, "ne": [551, 575], "output_nam": 552, "pop": 553, "root_nam": 554, "serial": [555, 859], "tree_format": 556, "undo_alias": 557, "mod": 560, "mode": [561, 1146], "mul": 562, "name": [564, 565, 566, 567, 568, 569, 570, 571, 572, 786, 794, 1149], "keep": 564, "map_field": 566, "prefix": [567, 587], "prefix_field": 568, "suffix": [569, 687], "suffix_field": 570, "to_lowercas": [571, 678, 1251], "to_uppercas": [572, 681, 1254], "nan_max": [573, 1150], "nan_min": [574, 1151], "ne_miss": 576, "neg": 577, "not_": [578, 1153], "or_": 580, "over": 581, "pct_chang": [582, 1155], "peak_max": [583, 1156], "peak_min": [584, 1157], "pow": 586, "qcut": [589, 1159], "radian": 591, "rank": [592, 1161], "reinterpret": [594, 1163], "repeat_bi": 595, "reshap": [597, 1166], "rle": [599, 1168], "rle_id": [600, 1169], "rolling_appli": [602, 1170], "rolling_map": [603, 1171], "rolling_max": [604, 1172], "rolling_mean": [605, 1173], "rolling_median": [606, 1174], "rolling_min": [607, 1175], "rolling_quantil": [608, 1176], "rolling_skew": [609, 1177], "rolling_std": [610, 1178], "rolling_sum": [611, 1179], "rolling_var": [612, 1180], "round_sig_fig": [614, 1182], "search_sort": [616, 1185], "shrink_dtyp": [620, 1193], "shuffl": [621, 1195], "sign": [622, 1196], "sin": [623, 1197], "sinh": [624, 1198], "skew": [625, 1199], "sort_bi": 628, "sqrt": [629, 1202], "str": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "contains_ani": [633, 1206], "extract": [640, 1213], "extract_al": [641, 1214], "extract_group": [642, 1215], "find": [643, 1216], "json_decod": [644, 1217], "json_extract": [645, 1218], "json_path_match": [646, 1219], "len_byt": [647, 1220], "len_char": [648, 1221], "ljust": [650, 1223], "lstrip": [651, 1224], "n_char": [652, 1225], "pad_end": [653, 1226], "pad_start": [654, 1227], "parse_int": [655, 1228], "replace_al": [657, 1230], "replace_mani": [658, 1231], "rjust": [660, 1233], "rstrip": [661, 1234], "split": [663, 1236], "split_exact": [664, 1237], "splitn": [665, 1238], "strip": [667, 1240], "strip_char": [668, 1241], "strip_chars_end": [669, 1242], "strip_chars_start": [670, 1243], "strip_prefix": [671, 1244], "strip_suffix": [672, 1245], "strptime": [673, 1246], "to_dat": [674, 1247], "to_datetim": [675, 1248], "to_decim": [676, 1249], "to_integ": [677, 1250], "to_tim": [679, 1252], "to_titlecas": [680, 1253], "zfill": [682, 1255], "field": [683, 1256, 1257], "json_encod": [684, 1258], "rename_field": [685, 1259], "sub": 686, "tan": [692, 1266], "tanh": [693, 1267], "to_phys": [694, 1275], "truediv": 696, "unique_count": [698, 1278], "upper_bound": [699, 1279], "value_count": [700, 1280], "where": 702, "xor": 703, "all_horizont": 705, "any_horizont": 707, "arang": 710, "arctan2": 711, "arctan2d": 712, "arg_sort_bi": 713, "arg_wher": 714, "coalesc": 715, "concat_list": 716, "concat_str": 717, "cov": 720, "cum_fold": 722, "cum_reduc": 723, "cum_sum_horizont": 725, "cumfold": 726, "cumreduc": 727, "cumsum_horizont": 729, "date_rang": [731, 732], "datetime_rang": [734, 735], "element": 737, "format": 741, "from_epoch": 742, "group": 743, "int_rang": [746, 747], "lit": 750, "ones": 762, "reduc": 764, "repeat": 765, "rolling_corr": 766, "rolling_cov": 767, "sql_expr": 769, "time_rang": [776, 777], "when": 779, "zero": 780, "categori": [784, 1288], "col": 785, "express": 789, "oper": [795, 906], "conjunct": 795, "comparison": 795, "window": 799, "convers": 800, "parallel": 800, "random": 800, "python": 801, "refer": 801, "input": 802, "output": 802, "avro": 802, "databas": 802, "delta": 802, "lake": 802, "excel": 802, "od": 802, "feather": 802, "ipc": 802, "iceberg": 802, "json": 802, "parquet": 802, "pyarrow": 802, "dataset": 802, "cach": 806, "collect": 810, "collect_async": 811, "explain": 819, "fetch": 821, "profil": [851, 1301], "show_graph": 863, "with_context": 878, "lazygroupbi": [881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897], "read": 902, "write": 902, "logic": 902, "plan": 902, "metadata": 904, "plugin": 905, "selector": 906, "import": 906, "set": [906, 1187], "is_loc": 957, "to_loc": 959, "uses_lexical_ord": 960, "chunk_length": 963, "get_chunk": 1059, "has_valid": 1060, "inner_dtyp": 1065, "is_boolean": 1068, "is_float": 1074, "is_integ": 1077, "is_numer": 1084, "is_sort": 1085, "is_tempor": 1086, "is_utf8": 1088, "new_from_index": 1152, "scatter": 1184, "series_equ": 1186, "set_at_idx": 1188, "to_fram": 1270, "view": 1282, "zip_with": 1283, "sql": 1300, "interfac": 1300, "method": 1300, "assert": 1301, "primit": 1301, "strategi": 1301, "helper": 1301}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.n_chunks": [[222, "polars-dataframe-n-chunks"]], "polars.DataFrame.flags": [[180, "polars-dataframe-flags"]], "polars.DataFrame.map_rows": [[212, "polars-dataframe-map-rows"]], "polars.DataFrame.get_columns": [[186, "polars-dataframe-get-columns"]], "polars.DataFrame.iter_rows": [[206, "polars-dataframe-iter-rows"]], "polars.DataFrame.is_unique": [[203, "polars-dataframe-is-unique"]], "polars.DataFrame.null_count": [[224, "polars-dataframe-null-count"]], "polars.DataFrame.estimated_size": [[173, "polars-dataframe-estimated-size"]], "polars.DataFrame.groupby": [[191, "polars-dataframe-groupby"]], "polars.DataFrame.extend": [[175, "polars-dataframe-extend"]], "polars.DataFrame.insert_at_idx": [[198, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.limit": [[211, "polars-dataframe-limit"]], "polars.DataFrame.mean": [[215, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[216, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.pivot": [[227, "polars-dataframe-pivot"]], "polars.DataFrame.melt": [[218, "polars-dataframe-melt"]], "polars.DataFrame.equals": [[172, "polars-dataframe-equals"]], "polars.DataFrame.fill_null": [[177, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[178, "polars-dataframe-filter"]], "polars.DataFrame.fold": [[181, "polars-dataframe-fold"]], "polars.DataFrame.group_by": [[188, "polars-dataframe-group-by"]], "polars.DataFrame.fill_nan": [[176, "polars-dataframe-fill-nan"]], "polars.DataFrame.interpolate": [[200, "polars-dataframe-interpolate"]], "polars.DataFrame.get_column_index": [[185, "polars-dataframe-get-column-index"]], "polars.DataFrame.lazy": [[210, "polars-dataframe-lazy"]], "polars.DataFrame.min": [[220, "polars-dataframe-min"]], "polars.DataFrame.frame_equal": [[182, "polars-dataframe-frame-equal"]], "polars.DataFrame.max_horizontal": [[214, "polars-dataframe-max-horizontal"]], "polars.DataFrame.pipe": [[226, "polars-dataframe-pipe"]], "polars.DataFrame.groupby_rolling": [[193, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.groupby_dynamic": [[192, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.item": [[204, "polars-dataframe-item"]], "polars.DataFrame.join_asof": [[209, "polars-dataframe-join-asof"]], "polars.DataFrame.hstack": [[197, "polars-dataframe-hstack"]], "polars.DataFrame.get_column": [[184, "polars-dataframe-get-column"]], "polars.DataFrame.find_idx_by_name": [[179, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.group_by_rolling": [[190, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.iter_columns": [[205, "polars-dataframe-iter-columns"]], "polars.DataFrame.group_by_dynamic": [[189, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.iter_slices": [[207, "polars-dataframe-iter-slices"]], "polars.DataFrame.is_empty": [[202, "polars-dataframe-is-empty"]], "polars.DataFrame.n_unique": [[223, "polars-dataframe-n-unique"]], "polars.DataFrame.merge_sorted": [[219, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min_horizontal": [[221, "polars-dataframe-min-horizontal"]], "polars.DataFrame.height": [[196, "polars-dataframe-height"]], "polars.DataFrame.insert_column": [[199, "polars-dataframe-insert-column"]], "polars.DataFrame.hash_rows": [[194, "polars-dataframe-hash-rows"]], "polars.DataFrame.partition_by": [[225, "polars-dataframe-partition-by"]], "polars.DataFrame.is_duplicated": [[201, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join": [[208, "polars-dataframe-join"]], "polars.DataFrame.gather_every": [[183, "polars-dataframe-gather-every"]], "polars.DataFrame.max": [[213, "polars-dataframe-max"]], "polars.DataFrame.median": [[217, "polars-dataframe-median"]], "polars.DataFrame.explode": [[174, "polars-dataframe-explode"]], "polars.DataFrame.glimpse": [[187, "polars-dataframe-glimpse"]], "polars.DataFrame.dtypes": [[171, "polars-dataframe-dtypes"]], "polars.DataFrame.head": [[195, "polars-dataframe-head"]], "polars.testing.parametric.create_list_strategy": [[147, "polars-testing-parametric-create-list-strategy"]], "polars.read_ipc": [[124, "polars-read-ipc"]], "polars.read_parquet": [[130, "polars-read-parquet"]], "polars.testing.assert_series_not_equal": [[144, "polars-testing-assert-series-not-equal"]], "polars.read_avro": [[117, "polars-read-avro"]], "polars.read_delta": [[122, "polars-read-delta"]], "polars.thread_pool_size": [[152, "polars-thread-pool-size"]], "polars.show_versions": [[140, "polars-show-versions"]], "polars.scan_pyarrow_dataset": [[138, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.series": [[150, "polars-testing-parametric-series"]], "polars.scan_iceberg": [[134, "polars-scan-iceberg"]], "polars.read_json": [[127, "polars-read-json"]], "polars.scan_parquet": [[137, "polars-scan-parquet"]], "polars.testing.assert_frame_equal": [[141, "polars-testing-assert-frame-equal"]], "polars.read_database_uri": [[121, "polars-read-database-uri"]], "polars.DataFrame.approx_n_unique": [[159, "polars-dataframe-approx-n-unique"]], "Config": [[155, "config"]], "Config options": [[155, "config-options"]], "Config load, save, state": [[155, "config-load-save-state"]], "Use as a context manager": [[155, "use-as-a-context-manager"]], "Use as a decorator": [[155, "use-as-a-decorator"]], "polars.get_index_type": [[115, "polars-get-index-type"]], "polars.set_random_seed": [[139, "polars-set-random-seed"]], "Aggregation": [[156, "aggregation"], [803, "aggregation"], [907, "aggregation"], [308, "aggregation"]], "polars.DataFrame.bottom_k": [[160, "polars-dataframe-bottom-k"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[116, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_database": [[120, "polars-read-database"]], "polars.DataFrame.__dataframe__": [[157, "polars-dataframe-dataframe"]], "polars.DataFrame.clear": [[162, "polars-dataframe-clear"]], "polars.read_parquet_schema": [[131, "polars-read-parquet-schema"]], "polars.DataFrame.corr": [[165, "polars-dataframe-corr"]], "polars.DataFrame.clone": [[163, "polars-dataframe-clone"]], "polars.scan_ipc": [[135, "polars-scan-ipc"]], "polars.using_string_cache": [[154, "polars-using-string-cache"]], "polars.DataFrame.apply": [[158, "polars-dataframe-apply"]], "polars.testing.parametric.dataframes": [[148, "polars-testing-parametric-dataframes"]], "polars.read_excel": [[123, "polars-read-excel"]], "polars.read_ipc_stream": [[126, "polars-read-ipc-stream"]], "polars.scan_ndjson": [[136, "polars-scan-ndjson"]], "polars.testing.parametric.load_profile": [[149, "polars-testing-parametric-load-profile"]], "polars.from_repr": [[114, "polars-from-repr"]], "polars.scan_csv": [[132, "polars-scan-csv"]], "polars.DataFrame.drop_nulls": [[170, "polars-dataframe-drop-nulls"]], "polars.scan_delta": [[133, "polars-scan-delta"]], "polars.testing.parametric.column": [[145, "polars-testing-parametric-column"]], "polars.testing.assert_series_equal": [[143, "polars-testing-assert-series-equal"]], "polars.read_csv_batched": [[119, "polars-read-csv-batched"]], "polars.testing.assert_frame_not_equal": [[142, "polars-testing-assert-frame-not-equal"]], "polars.threadpool_size": [[153, "polars-threadpool-size"]], "polars.DataFrame.describe": [[167, "polars-dataframe-describe"]], "polars.read_csv": [[118, "polars-read-csv"]], "polars.DataFrame.drop": [[168, "polars-dataframe-drop"]], "polars.DataFrame.count": [[166, "polars-dataframe-count"]], "polars.DataFrame.columns": [[164, "polars-dataframe-columns"]], "polars.DataFrame.cast": [[161, "polars-dataframe-cast"]], "polars.read_ods": [[129, "polars-read-ods"]], "polars.read_ipc_schema": [[125, "polars-read-ipc-schema"]], "polars.testing.parametric.set_profile": [[151, "polars-testing-parametric-set-profile"]], "polars.testing.parametric.columns": [[146, "polars-testing-parametric-columns"]], "polars.DataFrame.drop_in_place": [[169, "polars-dataframe-drop-in-place"]], "polars.read_ndjson": [[128, "polars-read-ndjson"]], "polars.LazyFrame.sink_parquet": [[61, "polars-lazyframe-sink-parquet"]], "polars.build_info": [[86, "polars-build-info"]], "polars.exceptions.ComputeError": [[94, "polars-exceptions-computeerror"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.Object": [[64, "polars-object"]], "polars.Time": [[74, "polars-time"]], "polars.align_frames": [[81, "polars-align-frames"]], "polars.disable_string_cache": [[90, "polars-disable-string-cache"]], "polars.exceptions.SchemaFieldNotFoundError": [[103, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.StructFieldNotFoundError": [[105, "polars-exceptions-structfieldnotfounderror"]], "polars.from_arrow": [[107, "polars-from-arrow"]], "polars.from_pandas": [[112, "polars-from-pandas"]], "polars.exceptions.PolarsPanicError": [[100, "polars-exceptions-polarspanicerror"]], "polars.Int8": [[57, "polars-int8"]], "polars.from_numpy": [[111, "polars-from-numpy"]], "polars.Struct": [[73, "polars-struct"]], "polars.UInt32": [[76, "polars-uint32"]], "polars.exceptions.PolarsError": [[99, "polars-exceptions-polarserror"]], "polars.exceptions.ShapeError": [[104, "polars-exceptions-shapeerror"]], "polars.List": [[62, "polars-list"]], "polars.Null": [[63, "polars-null"]], "polars.exceptions.NoDataError": [[97, "polars-exceptions-nodataerror"]], "polars.from_records": [[113, "polars-from-records"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.api.register_dataframe_namespace": [[82, "polars-api-register-dataframe-namespace"]], "polars.UInt16": [[75, "polars-uint16"]], "polars.api.register_expr_namespace": [[83, "polars-api-register-expr-namespace"]], "polars.exceptions.InvalidOperationError": [[96, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.TooManyRowsReturnedError": [[106, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dataframe": [[108, "polars-from-dataframe"]], "polars.SQLContext.unregister": [[70, "polars-sqlcontext-unregister"]], "polars.SQLContext.register": [[66, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[67, "polars-sqlcontext-register-globals"]], "polars.exceptions.NoRowsReturnedError": [[98, "polars-exceptions-norowsreturnederror"]], "polars.collect_all": [[87, "polars-collect-all"]], "polars.from_dicts": [[110, "polars-from-dicts"]], "polars.concat": [[89, "polars-concat"]], "polars.enable_string_cache": [[91, "polars-enable-string-cache"]], "polars.exceptions.ColumnNotFoundError": [[93, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.DuplicateError": [[95, "polars-exceptions-duplicateerror"]], "polars.collect_all_async": [[88, "polars-collect-all-async"]], "polars.UInt64": [[77, "polars-uint64"]], "polars.UInt8": [[78, "polars-uint8"]], "polars.LazyFrame.sink_ndjson": [[60, "polars-lazyframe-sink-ndjson"]], "polars.api.register_series_namespace": [[85, "polars-api-register-series-namespace"]], "polars.from_dict": [[109, "polars-from-dict"]], "polars.Utf8": [[80, "polars-utf8"]], "polars.StringCache": [[72, "polars-stringcache"]], "polars.SQLContext.execute": [[65, "polars-sqlcontext-execute"]], "polars.Unknown": [[79, "polars-unknown"]], "polars.SQLContext.tables": [[69, "polars-sqlcontext-tables"]], "polars.exceptions.RowsError": [[101, "polars-exceptions-rowserror"]], "polars.String": [[71, "polars-string"]], "polars.SQLContext.register_many": [[68, "polars-sqlcontext-register-many"]], "polars.api.register_lazyframe_namespace": [[84, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.SchemaError": [[102, "polars-exceptions-schemaerror"]], "polars.exceptions.ArrowError": [[92, "polars-exceptions-arrowerror"]], "polars.Series.str.extract_all": [[1214, "polars-series-str-extract-all"]], "polars.Series.str.decode": [[1209, "polars-series-str-decode"]], "polars.Series.str.rjust": [[1233, "polars-series-str-rjust"]], "polars.Series.str.rstrip": [[1234, "polars-series-str-rstrip"]], "polars.Series.str.to_date": [[1247, "polars-series-str-to-date"]], "polars.Series.str.strip_chars": [[1241, "polars-series-str-strip-chars"]], "polars.Series.str.to_lowercase": [[1251, "polars-series-str-to-lowercase"]], "polars.Series.str.lstrip": [[1224, "polars-series-str-lstrip"]], "polars.Series.sinh": [[1198, "polars-series-sinh"]], "polars.Series.str.count_match": [[1207, "polars-series-str-count-match"]], "polars.Series.str.replace": [[1229, "polars-series-str-replace"]], "polars.Series.str.splitn": [[1238, "polars-series-str-splitn"]], "polars.Series.str.json_decode": [[1217, "polars-series-str-json-decode"]], "polars.Series.slice": [[1200, "polars-series-slice"]], "polars.Series.sort": [[1201, "polars-series-sort"]], "polars.Series.str.pad_start": [[1227, "polars-series-str-pad-start"]], "polars.Series.str.lengths": [[1222, "polars-series-str-lengths"]], "polars.Series.str.parse_int": [[1228, "polars-series-str-parse-int"]], "polars.Series.std": [[1203, "polars-series-std"]], "polars.Series.str.pad_end": [[1226, "polars-series-str-pad-end"]], "polars.Series.str.to_titlecase": [[1253, "polars-series-str-to-titlecase"]], "polars.Series.str.to_decimal": [[1249, "polars-series-str-to-decimal"]], "polars.Series.str.strip_suffix": [[1245, "polars-series-str-strip-suffix"]], "polars.Series.str.to_integer": [[1250, "polars-series-str-to-integer"]], "polars.Series.str.len_bytes": [[1220, "polars-series-str-len-bytes"]], "polars.Series.str.replace_all": [[1230, "polars-series-str-replace-all"]], "polars.Series.str.concat": [[1204, "polars-series-str-concat"]], "polars.Series.str.n_chars": [[1225, "polars-series-str-n-chars"]], "polars.Series.str.strip_chars_start": [[1243, "polars-series-str-strip-chars-start"]], "polars.Series.str.replace_many": [[1231, "polars-series-str-replace-many"]], "polars.Series.str.json_extract": [[1218, "polars-series-str-json-extract"]], "polars.Series.str.extract": [[1213, "polars-series-str-extract"]], "polars.Series.str.explode": [[1212, "polars-series-str-explode"]], "polars.Series.str.len_chars": [[1221, "polars-series-str-len-chars"]], "polars.Series.str.encode": [[1210, "polars-series-str-encode"]], "polars.Series.str.split": [[1236, "polars-series-str-split"]], "polars.Series.str.strptime": [[1246, "polars-series-str-strptime"]], "polars.Series.sin": [[1197, "polars-series-sin"]], "polars.Series.str.starts_with": [[1239, "polars-series-str-starts-with"]], "polars.Series.str.json_path_match": [[1219, "polars-series-str-json-path-match"]], "polars.Series.str.split_exact": [[1237, "polars-series-str-split-exact"]], "polars.Series.str.strip_chars_end": [[1242, "polars-series-str-strip-chars-end"]], "polars.Series.str.to_time": [[1252, "polars-series-str-to-time"]], "polars.Series.str.to_datetime": [[1248, "polars-series-str-to-datetime"]], "polars.Series.skew": [[1199, "polars-series-skew"]], "polars.Series.str.ends_with": [[1211, "polars-series-str-ends-with"]], "polars.Series.str.extract_groups": [[1215, "polars-series-str-extract-groups"]], "polars.Series.str.count_matches": [[1208, "polars-series-str-count-matches"]], "polars.Series.str.find": [[1216, "polars-series-str-find"]], "polars.Series.str.slice": [[1235, "polars-series-str-slice"]], "polars.Series.str.contains_any": [[1206, "polars-series-str-contains-any"]], "polars.Series.str.ljust": [[1223, "polars-series-str-ljust"]], "polars.Series.sqrt": [[1202, "polars-series-sqrt"]], "polars.Series.str.reverse": [[1232, "polars-series-str-reverse"]], "polars.Series.str.strip": [[1240, "polars-series-str-strip"]], "polars.Series.str.contains": [[1205, "polars-series-str-contains"]], "polars.Series.str.strip_prefix": [[1244, "polars-series-str-strip-prefix"]], "Index": [[0, "index"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Int64": [[56, "polars-int64"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Date": [[47, "polars-date"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Int32": [[55, "polars-int32"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [906, "examples"], [1301, "examples"], [1296, "examples"], [305, "examples"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Float32": [[52, "polars-float32"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Enum": [[51, "polars-enum"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Array": [[2, "polars-array"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Float64": [[53, "polars-float64"]], "polars.Series.list.eval": [[1103, "polars-series-list-eval"]], "polars.Series.list.median": [[1116, "polars-series-list-median"]], "polars.Series.list.to_array": [[1132, "polars-series-list-to-array"]], "polars.Series.list.lengths": [[1113, "polars-series-list-lengths"]], "polars.Series.is_numeric": [[1084, "polars-series-is-numeric"]], "polars.Series.list.concat": [[1097, "polars-series-list-concat"]], "polars.Series.list.sample": [[1120, "polars-series-list-sample"]], "polars.Series.list.set_intersection": [[1122, "polars-series-list-set-intersection"]], "polars.Series.is_null": [[1083, "polars-series-is-null"]], "polars.Series.log": [[1136, "polars-series-log"]], "polars.Series.len": [[1091, "polars-series-len"]], "polars.Series.list.explode": [[1104, "polars-series-list-explode"]], "polars.Series.list.gather": [[1106, "polars-series-list-gather"]], "polars.Series.is_utf8": [[1088, "polars-series-is-utf8"]], "polars.Series.is_unique": [[1087, "polars-series-is-unique"]], "polars.Series.list.all": [[1093, "polars-series-list-all"]], "polars.Series.list.len": [[1112, "polars-series-list-len"]], "polars.Series.list.set_difference": [[1121, "polars-series-list-set-difference"]], "polars.Series.log10": [[1137, "polars-series-log10"]], "polars.Series.list.var": [[1135, "polars-series-list-var"]], "polars.Series.list.arg_min": [[1096, "polars-series-list-arg-min"]], "polars.Series.list.set_union": [[1124, "polars-series-list-set-union"]], "polars.Series.limit": [[1092, "polars-series-limit"]], "polars.Series.list.min": [[1117, "polars-series-list-min"]], "polars.Series.kurtosis": [[1090, "polars-series-kurtosis"]], "polars.Series.list.gather_every": [[1107, "polars-series-list-gather-every"]], "polars.Series.is_temporal": [[1086, "polars-series-is-temporal"]], "polars.Series.list.count_match": [[1099, "polars-series-list-count-match"]], "polars.Series.list.std": [[1128, "polars-series-list-std"]], "polars.Series.list.mean": [[1115, "polars-series-list-mean"]], "polars.Series.lower_bound": [[1139, "polars-series-lower-bound"]], "polars.Series.list.arg_max": [[1095, "polars-series-list-arg-max"]], "polars.Series.list.sum": [[1129, "polars-series-list-sum"]], "polars.Series.list.count_matches": [[1100, "polars-series-list-count-matches"]], "polars.Series.list.shift": [[1125, "polars-series-list-shift"]], "polars.Series.list.tail": [[1130, "polars-series-list-tail"]], "polars.Series.list.max": [[1114, "polars-series-list-max"]], "polars.Series.list.contains": [[1098, "polars-series-list-contains"]], "polars.Series.list.to_struct": [[1133, "polars-series-list-to-struct"]], "polars.Series.list.join": [[1110, "polars-series-list-join"]], "polars.Series.list.diff": [[1101, "polars-series-list-diff"]], "polars.Series.list.get": [[1108, "polars-series-list-get"]], "polars.Series.list.drop_nulls": [[1102, "polars-series-list-drop-nulls"]], "polars.Series.list.take": [[1131, "polars-series-list-take"]], "polars.Series.list.unique": [[1134, "polars-series-list-unique"]], "polars.Series.log1p": [[1138, "polars-series-log1p"]], "polars.Series.list.slice": [[1126, "polars-series-list-slice"]], "polars.Series.is_sorted": [[1085, "polars-series-is-sorted"]], "polars.Series.item": [[1089, "polars-series-item"]], "polars.Series.list.any": [[1094, "polars-series-list-any"]], "polars.Series.list.reverse": [[1119, "polars-series-list-reverse"]], "polars.Series.list.last": [[1111, "polars-series-list-last"]], "polars.Series.list.sort": [[1127, "polars-series-list-sort"]], "polars.Series.list.first": [[1105, "polars-series-list-first"]], "polars.Series.list.set_symmetric_difference": [[1123, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.head": [[1109, "polars-series-list-head"]], "polars.Series.list.n_unique": [[1118, "polars-series-list-n-unique"]], "polars.Series.sample": [[1183, "polars-series-sample"]], "polars.Series.rolling_map": [[1171, "polars-series-rolling-map"]], "polars.Series.rolling_sum": [[1179, "polars-series-rolling-sum"]], "polars.Series.rechunk": [[1162, "polars-series-rechunk"]], "polars.Series.round": [[1181, "polars-series-round"]], "polars.Series.replace": [[1165, "polars-series-replace"]], "polars.Series.round_sig_figs": [[1182, "polars-series-round-sig-figs"]], "polars.Series.qcut": [[1159, "polars-series-qcut"]], "polars.Series.series_equal": [[1186, "polars-series-series-equal"]], "polars.Series.reshape": [[1166, "polars-series-reshape"]], "polars.Series.rle": [[1168, "polars-series-rle"]], "polars.Series.search_sorted": [[1185, "polars-series-search-sorted"]], "polars.Series.max": [[1142, "polars-series-max"]], "polars.Series.nan_max": [[1150, "polars-series-nan-max"]], "polars.Series.n_chunks": [[1147, "polars-series-n-chunks"]], "polars.Series.shuffle": [[1195, "polars-series-shuffle"]], "polars.Series.rle_id": [[1169, "polars-series-rle-id"]], "polars.Series.rolling_min": [[1175, "polars-series-rolling-min"]], "polars.Series.set_sorted": [[1189, "polars-series-set-sorted"]], "polars.Series.reinterpret": [[1163, "polars-series-reinterpret"]], "polars.Series.quantile": [[1160, "polars-series-quantile"]], "polars.Series.shift_and_fill": [[1192, "polars-series-shift-and-fill"]], "polars.Series.rolling_apply": [[1170, "polars-series-rolling-apply"]], "polars.Series.shift": [[1191, "polars-series-shift"]], "polars.Series.n_unique": [[1148, "polars-series-n-unique"]], "polars.Series.rolling_median": [[1174, "polars-series-rolling-median"]], "polars.Series.set": [[1187, "polars-series-set"]], "polars.Series.scatter": [[1184, "polars-series-scatter"]], "polars.Series.shrink_to_fit": [[1194, "polars-series-shrink-to-fit"]], "polars.Series.product": [[1158, "polars-series-product"]], "polars.Series.map_dict": [[1140, "polars-series-map-dict"]], "polars.Series.shape": [[1190, "polars-series-shape"]], "polars.Series.shrink_dtype": [[1193, "polars-series-shrink-dtype"]], "polars.Series.mode": [[1146, "polars-series-mode"]], "polars.Series.rolling_mean": [[1173, "polars-series-rolling-mean"]], "polars.Series.min": [[1145, "polars-series-min"]], "polars.Series.mean": [[1143, "polars-series-mean"]], "polars.Series.rolling_skew": [[1177, "polars-series-rolling-skew"]], "polars.Series.not_": [[1153, "polars-series-not"]], "polars.Series.rolling_quantile": [[1176, "polars-series-rolling-quantile"]], "polars.Series.nan_min": [[1151, "polars-series-nan-min"]], "polars.Series.rename": [[1164, "polars-series-rename"]], "polars.Series.rolling_max": [[1172, "polars-series-rolling-max"]], "polars.Series.rank": [[1161, "polars-series-rank"]], "polars.Series.median": [[1144, "polars-series-median"]], "polars.Series.map_elements": [[1141, "polars-series-map-elements"]], "polars.Series.pct_change": [[1155, "polars-series-pct-change"]], "polars.Series.new_from_index": [[1152, "polars-series-new-from-index"]], "polars.Series.rolling_var": [[1180, "polars-series-rolling-var"]], "polars.Series.null_count": [[1154, "polars-series-null-count"]], "polars.Series.set_at_idx": [[1188, "polars-series-set-at-idx"]], "polars.Series.rolling_std": [[1178, "polars-series-rolling-std"]], "polars.Series.sign": [[1196, "polars-series-sign"]], "polars.Series.peak_max": [[1156, "polars-series-peak-max"]], "polars.Series.reverse": [[1167, "polars-series-reverse"]], "polars.Series.name": [[1149, "polars-series-name"]], "polars.Series.peak_min": [[1157, "polars-series-peak-min"]], "polars.Series.ewm_var": [[1047, "polars-series-ewm-var"]], "polars.Series.dt.total_microseconds": [[1031, "polars-series-dt-total-microseconds"]], "polars.Series.entropy": [[1042, "polars-series-entropy"]], "polars.Series.is_last": [[1078, "polars-series-is-last"]], "polars.Series.is_nan": [[1080, "polars-series-is-nan"]], "polars.Series.is_last_distinct": [[1079, "polars-series-is-last-distinct"]], "polars.Series.is_infinite": [[1076, "polars-series-is-infinite"]], "polars.Series.dt.total_minutes": [[1033, "polars-series-dt-total-minutes"]], "polars.Series.interpolate": [[1066, "polars-series-interpolate"]], "polars.Series.is_boolean": [[1068, "polars-series-is-boolean"]], "polars.Series.is_not_nan": [[1081, "polars-series-is-not-nan"]], "polars.Series.dt.time": [[1026, "polars-series-dt-time"]], "polars.Series.dt.total_seconds": [[1035, "polars-series-dt-total-seconds"]], "polars.Series.implode": [[1064, "polars-series-implode"]], "polars.Series.dt.total_milliseconds": [[1032, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_hours": [[1030, "polars-series-dt-total-hours"]], "polars.Series.has_validity": [[1060, "polars-series-has-validity"]], "polars.Series.dt.weekday": [[1038, "polars-series-dt-weekday"]], "polars.Series.is_duplicated": [[1069, "polars-series-is-duplicated"]], "polars.Series.dt.week": [[1037, "polars-series-dt-week"]], "polars.Series.dt.to_string": [[1028, "polars-series-dt-to-string"]], "polars.Series.ewm_mean": [[1045, "polars-series-ewm-mean"]], "polars.Series.extend": [[1050, "polars-series-extend"]], "polars.Series.head": [[1062, "polars-series-head"]], "polars.Series.filter": [[1054, "polars-series-filter"]], "polars.Series.hist": [[1063, "polars-series-hist"]], "polars.Series.dt.total_days": [[1029, "polars-series-dt-total-days"]], "polars.Series.estimated_size": [[1044, "polars-series-estimated-size"]], "polars.Series.ewm_std": [[1046, "polars-series-ewm-std"]], "polars.Series.is_first": [[1072, "polars-series-is-first"]], "polars.Series.fill_nan": [[1052, "polars-series-fill-nan"]], "polars.Series.gather_every": [[1058, "polars-series-gather-every"]], "polars.Series.is_first_distinct": [[1073, "polars-series-is-first-distinct"]], "polars.Series.is_empty": [[1070, "polars-series-is-empty"]], "polars.Series.dt.year": [[1040, "polars-series-dt-year"]], "polars.Series.dtype": [[1041, "polars-series-dtype"]], "polars.Series.dt.total_nanoseconds": [[1034, "polars-series-dt-total-nanoseconds"]], "polars.Series.is_in": [[1075, "polars-series-is-in"]], "polars.Series.fill_null": [[1053, "polars-series-fill-null"]], "polars.Series.flags": [[1055, "polars-series-flags"]], "polars.Series.dt.timestamp": [[1027, "polars-series-dt-timestamp"]], "polars.Series.hash": [[1061, "polars-series-hash"]], "polars.Series.is_not_null": [[1082, "polars-series-is-not-null"]], "polars.Series.dt.truncate": [[1036, "polars-series-dt-truncate"]], "polars.Series.get_chunks": [[1059, "polars-series-get-chunks"]], "polars.Series.gather": [[1057, "polars-series-gather"]], "polars.Series.dt.with_time_unit": [[1039, "polars-series-dt-with-time-unit"]], "polars.Series.floor": [[1056, "polars-series-floor"]], "polars.Series.is_between": [[1067, "polars-series-is-between"]], "polars.Series.is_finite": [[1071, "polars-series-is-finite"]], "polars.Series.inner_dtype": [[1065, "polars-series-inner-dtype"]], "polars.Series.is_float": [[1074, "polars-series-is-float"]], "polars.Series.is_integer": [[1077, "polars-series-is-integer"]], "polars.Series.explode": [[1049, "polars-series-explode"]], "polars.Series.extend_constant": [[1051, "polars-series-extend-constant"]], "polars.Series.exp": [[1048, "polars-series-exp"]], "polars.Series.equals": [[1043, "polars-series-equals"]], "polars.Series.arr.first": [[932, "polars-series-arr-first"]], "polars.Series.cbrt": [[961, "polars-series-cbrt"]], "polars.Series.bin.contains": [[949, "polars-series-bin-contains"]], "polars.Series.arr.max": [[936, "polars-series-arr-max"]], "polars.Series.arg_true": [[923, "polars-series-arg-true"]], "polars.Series.bin.starts_with": [[953, "polars-series-bin-starts-with"]], "polars.Series.arr.arg_min": [[928, "polars-series-arr-arg-min"]], "polars.Series.bin.ends_with": [[952, "polars-series-bin-ends-with"]], "polars.Series.clip_max": [[966, "polars-series-clip-max"]], "polars.Series.arcsin": [[916, "polars-series-arcsin"]], "polars.Series.arr.std": [[943, "polars-series-arr-std"]], "polars.Series.apply": [[913, "polars-series-apply"]], "polars.Series.append": [[912, "polars-series-append"]], "polars.Series.arg_min": [[921, "polars-series-arg-min"]], "polars.Series.clear": [[964, "polars-series-clear"]], "polars.Series.cat.uses_lexical_ordering": [[960, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arr.var": [[948, "polars-series-arr-var"]], "polars.Series.arr.to_list": [[945, "polars-series-arr-to-list"]], "polars.Series.bottom_k": [[954, "polars-series-bottom-k"]], "polars.Series.arcsinh": [[917, "polars-series-arcsinh"]], "polars.Series.cat.to_local": [[959, "polars-series-cat-to-local"]], "polars.Series.arr.unique": [[947, "polars-series-arr-unique"]], "polars.Series.arr.join": [[934, "polars-series-arr-join"]], "polars.Series.arr.last": [[935, "polars-series-arr-last"]], "polars.Series.arr.shift": [[941, "polars-series-arr-shift"]], "polars.Series.arr.arg_max": [[927, "polars-series-arr-arg-max"]], "polars.Series.cast": [[955, "polars-series-cast"]], "polars.Series.cat.is_local": [[957, "polars-series-cat-is-local"]], "polars.Series.chunk_lengths": [[963, "polars-series-chunk-lengths"]], "polars.Series.arr.min": [[938, "polars-series-arr-min"]], "polars.Series.cat.get_categories": [[956, "polars-series-cat-get-categories"]], "polars.Series.arg_sort": [[922, "polars-series-arg-sort"]], "polars.Series.arctanh": [[919, "polars-series-arctanh"]], "polars.Series.arr.sort": [[942, "polars-series-arr-sort"]], "polars.Series.arg_max": [[920, "polars-series-arg-max"]], "polars.Series.bin.encode": [[951, "polars-series-bin-encode"]], "polars.Series.arr.contains": [[929, "polars-series-arr-contains"]], "polars.Series.cat.set_ordering": [[958, "polars-series-cat-set-ordering"]], "polars.Series.arr.to_struct": [[946, "polars-series-arr-to-struct"]], "polars.Series.clip": [[965, "polars-series-clip"]], "polars.Series.arr.count_matches": [[930, "polars-series-arr-count-matches"]], "polars.Series.arr.any": [[926, "polars-series-arr-any"]], "polars.Series.arr.median": [[937, "polars-series-arr-median"]], "polars.Series.arctan": [[918, "polars-series-arctan"]], "polars.Series.arg_unique": [[924, "polars-series-arg-unique"]], "polars.Series.arr.all": [[925, "polars-series-arr-all"]], "polars.Series.arr.reverse": [[940, "polars-series-arr-reverse"]], "polars.Series.ceil": [[962, "polars-series-ceil"]], "polars.Series.clone": [[968, "polars-series-clone"]], "polars.Series.arr.sum": [[944, "polars-series-arr-sum"]], "polars.Series.bin.decode": [[950, "polars-series-bin-decode"]], "polars.Series.clip_min": [[967, "polars-series-clip-min"]], "polars.Series.arr.get": [[933, "polars-series-arr-get"]], "polars.Series.arccosh": [[915, "polars-series-arccosh"]], "polars.Series.arccos": [[914, "polars-series-arccos"]], "polars.Series.arr.explode": [[931, "polars-series-arr-explode"]], "polars.Series.arr.n_unique": [[939, "polars-series-arr-n-unique"]], "polars.Series.cum_max": [[972, "polars-series-cum-max"]], "polars.Series.dt.convert_time_zone": [[991, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.round": [[1022, "polars-series-dt-round"]], "polars.Series.dt.is_leap_year": [[1000, "polars-series-dt-is-leap-year"]], "polars.Series.cum_min": [[973, "polars-series-cum-min"]], "polars.Series.cum_prod": [[974, "polars-series-cum-prod"]], "polars.Series.dt.iso_year": [[1001, "polars-series-dt-iso-year"]], "polars.Series.dt.ordinal_day": [[1019, "polars-series-dt-ordinal-day"]], "polars.Series.cum_sum": [[975, "polars-series-cum-sum"]], "polars.Series.cosh": [[970, "polars-series-cosh"]], "polars.Series.dt.min": [[1010, "polars-series-dt-min"]], "polars.Series.dt.second": [[1023, "polars-series-dt-second"]], "polars.Series.dt.base_utc_offset": [[987, "polars-series-dt-base-utc-offset"]], "polars.Series.diff": [[983, "polars-series-diff"]], "polars.Series.cut": [[981, "polars-series-cut"]], "polars.Series.dt.strftime": [[1025, "polars-series-dt-strftime"]], "polars.Series.cos": [[969, "polars-series-cos"]], "polars.Series.dt.hour": [[998, "polars-series-dt-hour"]], "polars.Series.cot": [[971, "polars-series-cot"]], "polars.Series.dt.dst_offset": [[996, "polars-series-dt-dst-offset"]], "polars.Series.dt.offset_by": [[1018, "polars-series-dt-offset-by"]], "polars.Series.dt.cast_time_unit": [[988, "polars-series-dt-cast-time-unit"]], "polars.Series.drop_nans": [[985, "polars-series-drop-nans"]], "polars.Series.dt.quarter": [[1020, "polars-series-dt-quarter"]], "polars.Series.describe": [[982, "polars-series-describe"]], "polars.Series.dt.combine": [[990, "polars-series-dt-combine"]], "polars.Series.dt.median": [[1004, "polars-series-dt-median"]], "polars.Series.dt.minutes": [[1012, "polars-series-dt-minutes"]], "polars.Series.cumulative_eval": [[980, "polars-series-cumulative-eval"]], "polars.Series.dt.millisecond": [[1008, "polars-series-dt-millisecond"]], "polars.Series.dt.month_end": [[1014, "polars-series-dt-month-end"]], "polars.Series.dt.nanoseconds": [[1017, "polars-series-dt-nanoseconds"]], "polars.Series.dt.days": [[995, "polars-series-dt-days"]], "polars.Series.drop_nulls": [[986, "polars-series-drop-nulls"]], "polars.Series.dt.max": [[1002, "polars-series-dt-max"]], "polars.Series.dot": [[984, "polars-series-dot"]], "polars.Series.dt.day": [[994, "polars-series-dt-day"]], "polars.Series.dt.hours": [[999, "polars-series-dt-hours"]], "polars.Series.cummax": [[976, "polars-series-cummax"]], "polars.Series.dt.mean": [[1003, "polars-series-dt-mean"]], "polars.Series.dt.month": [[1013, "polars-series-dt-month"]], "polars.Series.dt.epoch": [[997, "polars-series-dt-epoch"]], "polars.Series.dt.date": [[992, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[993, "polars-series-dt-datetime"]], "polars.Series.dt.milliseconds": [[1009, "polars-series-dt-milliseconds"]], "polars.Series.dt.microsecond": [[1005, "polars-series-dt-microsecond"]], "polars.Series.cumsum": [[979, "polars-series-cumsum"]], "polars.Series.dt.century": [[989, "polars-series-dt-century"]], "polars.Series.dt.replace_time_zone": [[1021, "polars-series-dt-replace-time-zone"]], "polars.Series.cummin": [[977, "polars-series-cummin"]], "polars.Series.dt.millennium": [[1007, "polars-series-dt-millennium"]], "polars.Series.dt.seconds": [[1024, "polars-series-dt-seconds"]], "polars.Series.dt.microseconds": [[1006, "polars-series-dt-microseconds"]], "polars.Series.dt.nanosecond": [[1016, "polars-series-dt-nanosecond"]], "polars.Series.cumprod": [[978, "polars-series-cumprod"]], "polars.Series.dt.minute": [[1011, "polars-series-dt-minute"]], "polars.Series.dt.month_start": [[1015, "polars-series-dt-month-start"]], "polars.LazyFrame.deserialize": [[815, "polars-lazyframe-deserialize"]], "polars.LazyFrame.pipe": [[850, "polars-lazyframe-pipe"]], "polars.LazyFrame.filter": [[824, "polars-lazyframe-filter"]], "polars.LazyFrame.group_by_dynamic": [[828, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.min": [[848, "polars-lazyframe-min"]], "polars.LazyFrame.group_by": [[827, "polars-lazyframe-group-by"]], "polars.LazyFrame.median": [[845, "polars-lazyframe-median"]], "polars.LazyFrame.null_count": [[849, "polars-lazyframe-null-count"]], "Window": [[799, "window"]], "polars.LazyFrame.drop_nulls": [[817, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.bottom_k": [[805, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.explode": [[820, "polars-lazyframe-explode"]], "polars.LazyFrame.head": [[833, "polars-lazyframe-head"]], "polars.LazyFrame.join": [[836, "polars-lazyframe-join"]], "polars.LazyFrame.melt": [[846, "polars-lazyframe-melt"]], "polars.LazyFrame.rename": [[853, "polars-lazyframe-rename"]], "polars.LazyFrame.groupby_dynamic": [[831, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.lazy": [[839, "polars-lazyframe-lazy"]], "polars.LazyFrame.profile": [[851, "polars-lazyframe-profile"]], "polars.LazyFrame.inspect": [[834, "polars-lazyframe-inspect"]], "polars.LazyFrame.group_by_rolling": [[829, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.groupby": [[830, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_rolling": [[832, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.fetch": [[821, "polars-lazyframe-fetch"]], "Input/output": [[802, "input-output"]], "Avro": [[802, "avro"]], "CSV": [[802, "csv"]], "Database": [[802, "database"]], "Delta Lake": [[802, "delta-lake"]], "Excel / ODS": [[802, "excel-ods"]], "Feather / IPC": [[802, "feather-ipc"]], "Iceberg": [[802, "iceberg"]], "JSON": [[802, "json"]], "Parquet": [[802, "parquet"]], "PyArrow Datasets": [[802, "pyarrow-datasets"]], "polars.LazyFrame.first": [[825, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[826, "polars-lazyframe-gather-every"]], "polars.LazyFrame.map_batches": [[842, "polars-lazyframe-map-batches"]], "polars.LazyFrame.last": [[838, "polars-lazyframe-last"]], "polars.LazyFrame.mean": [[844, "polars-lazyframe-mean"]], "polars.LazyFrame.columns": [[812, "polars-lazyframe-columns"]], "Python API reference": [[801, "python-api-reference"]], "polars.LazyFrame.fill_nan": [[822, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.quantile": [[852, "polars-lazyframe-quantile"]], "polars.LazyFrame.reverse": [[854, "polars-lazyframe-reverse"]], "polars.LazyFrame.cast": [[807, "polars-lazyframe-cast"]], "polars.LazyFrame.cache": [[806, "polars-lazyframe-cache"]], "polars.LazyFrame.limit": [[840, "polars-lazyframe-limit"]], "polars.LazyFrame.clear": [[808, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[809, "polars-lazyframe-clone"]], "polars.LazyFrame.explain": [[819, "polars-lazyframe-explain"]], "polars.LazyFrame.approx_n_unique": [[804, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.collect_async": [[811, "polars-lazyframe-collect-async"]], "polars.LazyFrame.max": [[843, "polars-lazyframe-max"]], "polars.LazyFrame.merge_sorted": [[847, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.fill_null": [[823, "polars-lazyframe-fill-null"]], "polars.LazyFrame.count": [[813, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[814, "polars-lazyframe-describe"]], "polars.LazyFrame.map": [[841, "polars-lazyframe-map"]], "polars.LazyFrame.join_asof": [[837, "polars-lazyframe-join-asof"]], "Functions": [[800, "functions"], [906, "functions"], [788, "functions"]], "Conversion": [[800, "conversion"]], "Miscellaneous": [[800, "miscellaneous"], [902, "miscellaneous"], [1294, "miscellaneous"], [792, "miscellaneous"], [303, "miscellaneous"]], "Parallelization": [[800, "parallelization"]], "Random": [[800, "random"]], "StringCache": [[800, "stringcache"]], "Temporal": [[798, "temporal"], [1299, "temporal"], [306, "temporal"]], "polars.LazyFrame.interpolate": [[835, "polars-lazyframe-interpolate"]], "polars.LazyFrame.dtypes": [[818, "polars-lazyframe-dtypes"]], "polars.LazyFrame.drop": [[816, "polars-lazyframe-drop"]], "polars.LazyFrame.collect": [[810, "polars-lazyframe-collect"]], "polars.LazyFrame.slice": [[864, "polars-lazyframe-slice"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[889, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "Manipulation/selection": [[903, "manipulation-selection"], [1295, "manipulation-selection"], [793, "manipulation-selection"], [304, "manipulation-selection"]], "polars.Series.any": [[911, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[890, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.select": [[857, "polars-lazyframe-select"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[882, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.alias": [[909, "polars-series-alias"]], "polars.LazyFrame.var": [[874, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[887, "polars-lazyframe-group-by-lazygroupby-last"]], "Plugins": [[905, "plugins"]], "polars.LazyFrame.set_sorted": [[860, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[895, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.unique": [[871, "polars-lazyframe-unique"]], "polars.LazyFrame.width": [[875, "polars-lazyframe-width"]], "polars.LazyFrame.schema": [[856, "polars-lazyframe-schema"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[884, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.with_row_count": [[879, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_columns": [[876, "polars-lazyframe-with-columns"]], "Read/write logical plan": [[902, "read-write-logical-plan"]], "polars.LazyFrame.unnest": [[872, "polars-lazyframe-unnest"]], "GroupBy": [[900, "groupby"], [301, "groupby"]], "polars.LazyFrame.tail": [[868, "polars-lazyframe-tail"]], "polars.LazyFrame.select_seq": [[858, "polars-lazyframe-select-seq"]], "Metadata": [[904, "metadata"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[883, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[885, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.take_every": [[869, "polars-lazyframe-take-every"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[886, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.update": [[873, "polars-lazyframe-update"]], "polars.LazyFrame.with_columns_seq": [[877, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.show_graph": [[863, "polars-lazyframe-show-graph"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[893, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.top_k": [[870, "polars-lazyframe-top-k"]], "polars.LazyFrame.shift_and_fill": [[862, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[896, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.shift": [[861, "polars-lazyframe-shift"]], "polars.LazyFrame.sort": [[865, "polars-lazyframe-sort"]], "polars.Series.abs": [[908, "polars-series-abs"]], "LazyFrame": [[901, "lazyframe"]], "polars.LazyFrame.rolling": [[855, "polars-lazyframe-rolling"]], "polars.LazyFrame.serialize": [[859, "polars-lazyframe-serialize"]], "Attributes": [[898, "attributes"], [1285, "attributes"], [297, "attributes"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[894, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[892, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.LazyFrame.with_context": [[878, "polars-lazyframe-with-context"]], "polars.Series.all": [[910, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[891, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.sum": [[867, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[888, "polars-lazyframe-group-by-lazygroupby-len"]], "Descriptive": [[899, "descriptive"], [1290, "descriptive"], [299, "descriptive"]], "Selectors": [[906, "selectors"]], "Importing": [[906, "importing"]], "Set operations": [[906, "set-operations"]], "polars.LazyFrame.with_row_index": [[880, "polars-lazyframe-with-row-index"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[881, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[897, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.std": [[866, "polars-lazyframe-std"]], "polars.Series.struct.json_encode": [[1258, "polars-series-struct-json-encode"]], "Struct": [[1298, "struct"], [797, "struct"]], "List": [[1293, "list"], [790, "list"]], "polars.Series.to_arrow": [[1268, "polars-series-to-arrow"]], "polars.Series.var": [[1281, "polars-series-var"]], "polars.Series.str.zfill": [[1255, "polars-series-str-zfill"]], "polars.Series.view": [[1282, "polars-series-view"]], "polars.Series.tan": [[1266, "polars-series-tan"]], "polars.Series.to_physical": [[1275, "polars-series-to-physical"]], "SQL Interface": [[1300, "sql-interface"]], "Methods": [[1300, "methods"]], "Computation": [[1289, "computation"], [787, "computation"], [298, "computation"]], "polars.Series.to_init_repr": [[1271, "polars-series-to-init-repr"]], "polars.Series.tanh": [[1267, "polars-series-tanh"]], "polars.Series.struct.field": [[1256, "polars-series-struct-field"]], "polars.Series.unique": [[1277, "polars-series-unique"]], "polars.Series.to_list": [[1272, "polars-series-to-list"]], "polars.Series.to_pandas": [[1274, "polars-series-to-pandas"]], "Testing": [[1301, "testing"]], "Asserts": [[1301, "asserts"]], "Parametric testing": [[1301, "parametric-testing"]], "Polars primitives": [[1301, "polars-primitives"]], "Strategy helpers": [[1301, "strategy-helpers"]], "Profiles": [[1301, "profiles"]], "polars.Series.upper_bound": [[1279, "polars-series-upper-bound"]], "polars.Series.sum": [[1262, "polars-series-sum"]], "Plot": [[1296, "plot"], [305, "plot"]], "polars.Series.to_frame": [[1270, "polars-series-to-frame"]], "Export": [[1291, "export"], [300, "export"]], "polars.Series.struct.fields": [[1257, "polars-series-struct-fields"]], "polars.Series.struct.schema": [[1260, "polars-series-struct-schema"]], "polars.Series.str.to_uppercase": [[1254, "polars-series-str-to-uppercase"]], "Boolean": [[1287, "boolean"], [783, "boolean"]], "polars.Series.top_k": [[1276, "polars-series-top-k"]], "Series": [[1292, "series"]], "polars.Series.unique_counts": [[1278, "polars-series-unique-counts"]], "polars.Series.tail": [[1263, "polars-series-tail"]], "polars.Series.zip_with": [[1283, "polars-series-zip-with"]], "polars.Series.take": [[1264, "polars-series-take"]], "Binary": [[1286, "binary"], [782, "binary"], [795, "binary"]], "Array": [[1284, "array"], [781, "array"]], "polars.Series.struct.rename_fields": [[1259, "polars-series-struct-rename-fields"]], "polars.Series.value_counts": [[1280, "polars-series-value-counts"]], "String": [[1297, "string"], [796, "string"]], "polars.Series.to_numpy": [[1273, "polars-series-to-numpy"]], "polars.Series.to_dummies": [[1269, "polars-series-to-dummies"]], "Categories": [[1288, "categories"], [784, "categories"]], "polars.Series.struct.unnest": [[1261, "polars-series-struct-unnest"]], "polars.Series.take_every": [[1265, "polars-series-take-every"]], "polars.any_horizontal": [[707, "polars-any-horizontal"]], "polars.arctan2d": [[712, "polars-arctan2d"]], "polars.cumsum_horizontal": [[729, "polars-cumsum-horizontal"]], "polars.Expr.tail": [[689, "polars-expr-tail"]], "polars.date": [[730, "polars-date"]], "polars.duration": [[736, "polars-duration"]], "polars.arctan2": [[711, "polars-arctan2"]], "polars.Expr.top_k": [[695, "polars-expr-top-k"]], "polars.all": [[704, "polars-all"]], "polars.cumreduce": [[727, "polars-cumreduce"]], "polars.Expr.take": [[690, "polars-expr-take"]], "polars.cumfold": [[726, "polars-cumfold"]], "polars.datetime_range": [[734, "polars-datetime-range"]], "polars.Expr.var": [[701, "polars-expr-var"]], "polars.date_ranges": [[732, "polars-date-ranges"]], "polars.corr": [[718, "polars-corr"]], "polars.cum_count": [[721, "polars-cum-count"]], "polars.count": [[719, "polars-count"]], "polars.Expr.take_every": [[691, "polars-expr-take-every"]], "polars.all_horizontal": [[705, "polars-all-horizontal"]], "polars.concat_str": [[717, "polars-concat-str"]], "polars.Expr.sum": [[688, "polars-expr-sum"]], "polars.Expr.truediv": [[696, "polars-expr-truediv"]], "polars.exclude": [[738, "polars-exclude"]], "polars.any": [[706, "polars-any"]], "polars.cum_reduce": [[723, "polars-cum-reduce"]], "polars.datetime": [[733, "polars-datetime"]], "polars.Expr.tanh": [[693, "polars-expr-tanh"]], "polars.cumsum": [[728, "polars-cumsum"]], "polars.Expr.struct.json_encode": [[684, "polars-expr-struct-json-encode"]], "polars.first": [[739, "polars-first"]], "polars.Expr.where": [[702, "polars-expr-where"]], "polars.Expr.value_counts": [[700, "polars-expr-value-counts"]], "polars.Expr.xor": [[703, "polars-expr-xor"]], "polars.Expr.tan": [[692, "polars-expr-tan"]], "polars.Expr.suffix": [[687, "polars-expr-suffix"]], "polars.arg_where": [[714, "polars-arg-where"]], "polars.Expr.struct.rename_fields": [[685, "polars-expr-struct-rename-fields"]], "polars.concat_list": [[716, "polars-concat-list"]], "polars.approx_n_unique": [[709, "polars-approx-n-unique"]], "polars.arange": [[710, "polars-arange"]], "polars.apply": [[708, "polars-apply"]], "polars.arg_sort_by": [[713, "polars-arg-sort-by"]], "polars.cum_sum_horizontal": [[725, "polars-cum-sum-horizontal"]], "polars.fold": [[740, "polars-fold"]], "polars.datetime_ranges": [[735, "polars-datetime-ranges"]], "polars.element": [[737, "polars-element"]], "polars.Expr.sub": [[686, "polars-expr-sub"]], "polars.Expr.unique_counts": [[698, "polars-expr-unique-counts"]], "polars.cov": [[720, "polars-cov"]], "polars.Expr.unique": [[697, "polars-expr-unique"]], "polars.Expr.to_physical": [[694, "polars-expr-to-physical"]], "polars.coalesce": [[715, "polars-coalesce"]], "polars.cum_sum": [[724, "polars-cum-sum"]], "polars.date_range": [[731, "polars-date-range"]], "polars.cum_fold": [[722, "polars-cum-fold"]], "polars.Expr.upper_bound": [[699, "polars-expr-upper-bound"]], "polars.Expr.str.replace": [[656, "polars-expr-str-replace"]], "polars.Expr.str.strip_suffix": [[672, "polars-expr-str-strip-suffix"]], "polars.Expr.str.split": [[663, "polars-expr-str-split"]], "polars.Expr.str.to_decimal": [[676, "polars-expr-str-to-decimal"]], "polars.Expr.std": [[630, "polars-expr-std"]], "polars.Expr.str.contains_any": [[633, "polars-expr-str-contains-any"]], "polars.Expr.str.strptime": [[673, "polars-expr-str-strptime"]], "polars.Expr.str.to_uppercase": [[681, "polars-expr-str-to-uppercase"]], "polars.Expr.str.encode": [[637, "polars-expr-str-encode"]], "polars.Expr.str.decode": [[636, "polars-expr-str-decode"]], "polars.Expr.str.explode": [[639, "polars-expr-str-explode"]], "polars.Expr.str.reverse": [[659, "polars-expr-str-reverse"]], "polars.Expr.sort_by": [[628, "polars-expr-sort-by"]], "polars.Expr.str.contains": [[632, "polars-expr-str-contains"]], "polars.Expr.str.extract": [[640, "polars-expr-str-extract"]], "polars.Expr.str.n_chars": [[652, "polars-expr-str-n-chars"]], "polars.Expr.str.parse_int": [[655, "polars-expr-str-parse-int"]], "polars.Expr.str.rstrip": [[661, "polars-expr-str-rstrip"]], "polars.Expr.str.strip": [[667, "polars-expr-str-strip"]], "polars.Expr.str.strip_chars_end": [[669, "polars-expr-str-strip-chars-end"]], "polars.Expr.sort": [[627, "polars-expr-sort"]], "polars.Expr.str.strip_prefix": [[671, "polars-expr-str-strip-prefix"]], "polars.Expr.str.pad_end": [[653, "polars-expr-str-pad-end"]], "polars.Expr.str.to_integer": [[677, "polars-expr-str-to-integer"]], "polars.Expr.str.len_bytes": [[647, "polars-expr-str-len-bytes"]], "polars.Expr.str.to_lowercase": [[678, "polars-expr-str-to-lowercase"]], "polars.Expr.str.find": [[643, "polars-expr-str-find"]], "polars.Expr.str.json_decode": [[644, "polars-expr-str-json-decode"]], "polars.Expr.str.slice": [[662, "polars-expr-str-slice"]], "polars.Expr.str.starts_with": [[666, "polars-expr-str-starts-with"]], "polars.Expr.str.to_time": [[679, "polars-expr-str-to-time"]], "polars.Expr.str.count_matches": [[635, "polars-expr-str-count-matches"]], "polars.Expr.str.extract_all": [[641, "polars-expr-str-extract-all"]], "polars.Expr.str.ends_with": [[638, "polars-expr-str-ends-with"]], "polars.Expr.str.pad_start": [[654, "polars-expr-str-pad-start"]], "polars.Expr.str.lstrip": [[651, "polars-expr-str-lstrip"]], "polars.Expr.str.rjust": [[660, "polars-expr-str-rjust"]], "polars.Expr.str.splitn": [[665, "polars-expr-str-splitn"]], "polars.Expr.str.count_match": [[634, "polars-expr-str-count-match"]], "polars.Expr.str.concat": [[631, "polars-expr-str-concat"]], "polars.Expr.str.ljust": [[650, "polars-expr-str-ljust"]], "polars.Expr.str.json_extract": [[645, "polars-expr-str-json-extract"]], "polars.Expr.str.lengths": [[649, "polars-expr-str-lengths"]], "polars.Expr.str.to_datetime": [[675, "polars-expr-str-to-datetime"]], "polars.Expr.str.extract_groups": [[642, "polars-expr-str-extract-groups"]], "polars.Expr.str.replace_all": [[657, "polars-expr-str-replace-all"]], "polars.Expr.str.to_titlecase": [[680, "polars-expr-str-to-titlecase"]], "polars.Expr.str.zfill": [[682, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[683, "polars-expr-struct-field"]], "polars.Expr.str.split_exact": [[664, "polars-expr-str-split-exact"]], "polars.Expr.str.strip_chars": [[668, "polars-expr-str-strip-chars"]], "polars.Expr.str.json_path_match": [[646, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_date": [[674, "polars-expr-str-to-date"]], "polars.Expr.sqrt": [[629, "polars-expr-sqrt"]], "polars.Expr.str.replace_many": [[658, "polars-expr-str-replace-many"]], "polars.Expr.str.len_chars": [[648, "polars-expr-str-len-chars"]], "polars.Expr.str.strip_chars_start": [[670, "polars-expr-str-strip-chars-start"]], "polars.Expr.mode": [[561, "polars-expr-mode"]], "polars.Expr.map_batches": [[542, "polars-expr-map-batches"]], "polars.Expr.name.keep": [[564, "polars-expr-name-keep"]], "polars.Expr.list.reverse": [[518, "polars-expr-list-reverse"]], "polars.Expr.list.sum": [[528, "polars-expr-list-sum"]], "polars.Expr.list.set_intersection": [[521, "polars-expr-list-set-intersection"]], "polars.Expr.median": [[547, "polars-expr-median"]], "polars.Expr.name.suffix": [[569, "polars-expr-name-suffix"]], "polars.Expr.meta.eq": [[548, "polars-expr-meta-eq"]], "polars.Expr.mean": [[546, "polars-expr-mean"]], "polars.Expr.map": [[540, "polars-expr-map"]], "polars.Expr.list.n_unique": [[517, "polars-expr-list-n-unique"]], "polars.Expr.mod": [[560, "polars-expr-mod"]], "polars.Expr.map_alias": [[541, "polars-expr-map-alias"]], "polars.Expr.list.var": [[534, "polars-expr-list-var"]], "polars.Expr.lower_bound": [[538, "polars-expr-lower-bound"]], "polars.Expr.meta.pop": [[553, "polars-expr-meta-pop"]], "polars.Expr.min": [[559, "polars-expr-min"]], "polars.Expr.name.prefix_fields": [[568, "polars-expr-name-prefix-fields"]], "polars.Expr.list.shift": [[524, "polars-expr-list-shift"]], "polars.Expr.list.median": [[515, "polars-expr-list-median"]], "polars.Expr.log10": [[536, "polars-expr-log10"]], "polars.Expr.list.std": [[527, "polars-expr-list-std"]], "polars.Expr.name.map_fields": [[566, "polars-expr-name-map-fields"]], "polars.Expr.max": [[545, "polars-expr-max"]], "polars.Expr.list.set_symmetric_difference": [[522, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.meta.undo_aliases": [[557, "polars-expr-meta-undo-aliases"]], "polars.Expr.lt": [[539, "polars-expr-lt"]], "polars.Expr.list.sample": [[519, "polars-expr-list-sample"]], "polars.Expr.meta.has_multiple_outputs": [[549, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.n_unique": [[563, "polars-expr-n-unique"]], "polars.Expr.name.prefix": [[567, "polars-expr-name-prefix"]], "polars.Expr.meta.write_json": [[558, "polars-expr-meta-write-json"]], "polars.Expr.meta.root_names": [[554, "polars-expr-meta-root-names"]], "polars.Expr.meta.output_name": [[552, "polars-expr-meta-output-name"]], "polars.Expr.list.to_array": [[531, "polars-expr-list-to-array"]], "polars.Expr.list.set_difference": [[520, "polars-expr-list-set-difference"]], "polars.Expr.list.unique": [[533, "polars-expr-list-unique"]], "polars.Expr.list.set_union": [[523, "polars-expr-list-set-union"]], "polars.Expr.mul": [[562, "polars-expr-mul"]], "polars.Expr.list.sort": [[526, "polars-expr-list-sort"]], "polars.Expr.list.max": [[513, "polars-expr-list-max"]], "polars.Expr.map_dict": [[543, "polars-expr-map-dict"]], "polars.Expr.meta.serialize": [[555, "polars-expr-meta-serialize"]], "polars.Expr.list.slice": [[525, "polars-expr-list-slice"]], "polars.Expr.list.tail": [[529, "polars-expr-list-tail"]], "polars.Expr.list.to_struct": [[532, "polars-expr-list-to-struct"]], "polars.Expr.list.take": [[530, "polars-expr-list-take"]], "polars.Expr.log1p": [[537, "polars-expr-log1p"]], "polars.Expr.meta.tree_format": [[556, "polars-expr-meta-tree-format"]], "polars.Expr.meta.ne": [[551, "polars-expr-meta-ne"]], "polars.Expr.list.min": [[516, "polars-expr-list-min"]], "polars.Expr.name.map": [[565, "polars-expr-name-map"]], "polars.Expr.log": [[535, "polars-expr-log"]], "polars.Expr.map_elements": [[544, "polars-expr-map-elements"]], "polars.Expr.meta.is_regex_projection": [[550, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.mean": [[514, "polars-expr-list-mean"]], "polars.Expr.product": [[588, "polars-expr-product"]], "polars.Expr.rank": [[592, "polars-expr-rank"]], "polars.Expr.prefix": [[587, "polars-expr-prefix"]], "polars.Expr.rechunk": [[593, "polars-expr-rechunk"]], "polars.Expr.round": [[613, "polars-expr-round"]], "polars.Expr.rolling_apply": [[602, "polars-expr-rolling-apply"]], "polars.Expr.rolling_max": [[604, "polars-expr-rolling-max"]], "polars.Expr.pipe": [[585, "polars-expr-pipe"]], "polars.Expr.pow": [[586, "polars-expr-pow"]], "polars.Expr.radians": [[591, "polars-expr-radians"]], "polars.Expr.reshape": [[597, "polars-expr-reshape"]], "polars.Expr.pct_change": [[582, "polars-expr-pct-change"]], "polars.Expr.repeat_by": [[595, "polars-expr-repeat-by"]], "polars.Expr.nan_max": [[573, "polars-expr-nan-max"]], "polars.Expr.replace": [[596, "polars-expr-replace"]], "polars.Expr.rolling_std": [[610, "polars-expr-rolling-std"]], "polars.Expr.qcut": [[589, "polars-expr-qcut"]], "polars.Expr.name.to_uppercase": [[572, "polars-expr-name-to-uppercase"]], "polars.Expr.peak_min": [[584, "polars-expr-peak-min"]], "polars.Expr.not_": [[578, "polars-expr-not"]], "polars.Expr.set_sorted": [[617, "polars-expr-set-sorted"]], "polars.Expr.sign": [[622, "polars-expr-sign"]], "polars.Expr.shift": [[618, "polars-expr-shift"]], "polars.Expr.rolling_map": [[603, "polars-expr-rolling-map"]], "polars.Expr.rolling_mean": [[605, "polars-expr-rolling-mean"]], "polars.Expr.peak_max": [[583, "polars-expr-peak-max"]], "polars.Expr.skew": [[625, "polars-expr-skew"]], "polars.Expr.sample": [[615, "polars-expr-sample"]], "polars.Expr.round_sig_figs": [[614, "polars-expr-round-sig-figs"]], "polars.Expr.rolling_median": [[606, "polars-expr-rolling-median"]], "polars.Expr.rolling_quantile": [[608, "polars-expr-rolling-quantile"]], "polars.Expr.name.suffix_fields": [[570, "polars-expr-name-suffix-fields"]], "polars.Expr.neg": [[577, "polars-expr-neg"]], "polars.Expr.ne_missing": [[576, "polars-expr-ne-missing"]], "polars.Expr.sin": [[623, "polars-expr-sin"]], "polars.Expr.sinh": [[624, "polars-expr-sinh"]], "polars.Expr.or_": [[580, "polars-expr-or"]], "polars.Expr.rolling": [[601, "polars-expr-rolling"]], "polars.Expr.shift_and_fill": [[619, "polars-expr-shift-and-fill"]], "polars.Expr.ne": [[575, "polars-expr-ne"]], "polars.Expr.rolling_skew": [[609, "polars-expr-rolling-skew"]], "polars.Expr.rolling_sum": [[611, "polars-expr-rolling-sum"]], "polars.Expr.rle": [[599, "polars-expr-rle"]], "polars.Expr.name.to_lowercase": [[571, "polars-expr-name-to-lowercase"]], "polars.Expr.reverse": [[598, "polars-expr-reverse"]], "polars.Expr.shrink_dtype": [[620, "polars-expr-shrink-dtype"]], "polars.Expr.over": [[581, "polars-expr-over"]], "polars.Expr.reinterpret": [[594, "polars-expr-reinterpret"]], "polars.Expr.slice": [[626, "polars-expr-slice"]], "polars.Expr.rolling_var": [[612, "polars-expr-rolling-var"]], "polars.Expr.rolling_min": [[607, "polars-expr-rolling-min"]], "polars.Expr.quantile": [[590, "polars-expr-quantile"]], "polars.Expr.shuffle": [[621, "polars-expr-shuffle"]], "polars.Expr.nan_min": [[574, "polars-expr-nan-min"]], "polars.Expr.search_sorted": [[616, "polars-expr-search-sorted"]], "polars.Expr.null_count": [[579, "polars-expr-null-count"]], "polars.Expr.rle_id": [[600, "polars-expr-rle-id"]], "polars.Expr.last": [[488, "polars-expr-last"]], "polars.Expr.list.head": [[508, "polars-expr-list-head"]], "polars.Expr.list.any": [[493, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[494, "polars-expr-list-arg-max"]], "polars.Expr.list.get": [[507, "polars-expr-list-get"]], "polars.Expr.keep_name": [[486, "polars-expr-keep-name"]], "polars.Expr.list.explode": [[503, "polars-expr-list-explode"]], "polars.Expr.ge": [[462, "polars-expr-ge"]], "polars.Expr.is_null": [[484, "polars-expr-is-null"]], "polars.Expr.list.concat": [[496, "polars-expr-list-concat"]], "polars.Expr.len": [[490, "polars-expr-len"]], "polars.Expr.is_last": [[478, "polars-expr-is-last"]], "polars.Expr.list.gather": [[505, "polars-expr-list-gather"]], "polars.Expr.list.all": [[492, "polars-expr-list-all"]], "polars.Expr.gt": [[464, "polars-expr-gt"]], "polars.Expr.is_unique": [[485, "polars-expr-is-unique"]], "polars.Expr.hist": [[467, "polars-expr-hist"]], "polars.Expr.list.count_match": [[498, "polars-expr-list-count-match"]], "polars.Expr.gather": [[460, "polars-expr-gather"]], "polars.Expr.gather_every": [[461, "polars-expr-gather-every"]], "polars.Expr.get": [[463, "polars-expr-get"]], "polars.Expr.implode": [[468, "polars-expr-implode"]], "polars.Expr.floordiv": [[457, "polars-expr-floordiv"]], "polars.Expr.limit": [[491, "polars-expr-limit"]], "polars.Expr.list.len": [[511, "polars-expr-list-len"]], "polars.Expr.is_between": [[471, "polars-expr-is-between"]], "polars.Expr.kurtosis": [[487, "polars-expr-kurtosis"]], "polars.Expr.is_nan": [[480, "polars-expr-is-nan"]], "polars.Expr.head": [[466, "polars-expr-head"]], "polars.Expr.list.count_matches": [[499, "polars-expr-list-count-matches"]], "polars.Expr.is_infinite": [[477, "polars-expr-is-infinite"]], "polars.Expr.list.eval": [[502, "polars-expr-list-eval"]], "polars.Expr.is_duplicated": [[472, "polars-expr-is-duplicated"]], "polars.Expr.list.last": [[510, "polars-expr-list-last"]], "polars.Expr.is_not_nan": [[482, "polars-expr-is-not-nan"]], "polars.Expr.inspect": [[469, "polars-expr-inspect"]], "polars.Expr.forward_fill": [[458, "polars-expr-forward-fill"]], "polars.Expr.list.arg_min": [[495, "polars-expr-list-arg-min"]], "polars.Expr.is_not": [[481, "polars-expr-is-not"]], "polars.Expr.is_not_null": [[483, "polars-expr-is-not-null"]], "polars.Expr.is_finite": [[473, "polars-expr-is-finite"]], "polars.Expr.hash": [[465, "polars-expr-hash"]], "polars.Expr.list.contains": [[497, "polars-expr-list-contains"]], "polars.Expr.is_in": [[476, "polars-expr-is-in"]], "polars.Expr.is_first_distinct": [[475, "polars-expr-is-first-distinct"]], "polars.Expr.is_first": [[474, "polars-expr-is-first"]], "polars.Expr.list.join": [[509, "polars-expr-list-join"]], "polars.Expr.interpolate": [[470, "polars-expr-interpolate"]], "polars.Expr.list.drop_nulls": [[501, "polars-expr-list-drop-nulls"]], "polars.Expr.from_json": [[459, "polars-expr-from-json"]], "polars.Expr.is_last_distinct": [[479, "polars-expr-is-last-distinct"]], "polars.Expr.list.first": [[504, "polars-expr-list-first"]], "polars.Expr.list.gather_every": [[506, "polars-expr-list-gather-every"]], "polars.Expr.list.lengths": [[512, "polars-expr-list-lengths"]], "polars.Expr.le": [[489, "polars-expr-le"]], "polars.Expr.floor": [[456, "polars-expr-floor"]], "polars.Expr.list.diff": [[500, "polars-expr-list-diff"]], "polars.Expr.dt.milliseconds": [[410, "polars-expr-dt-milliseconds"]], "polars.Expr.first": [[454, "polars-expr-first"]], "polars.Expr.filter": [[453, "polars-expr-filter"]], "polars.Expr.dt.minutes": [[412, "polars-expr-dt-minutes"]], "polars.Expr.dt.month": [[413, "polars-expr-dt-month"]], "polars.Expr.flatten": [[455, "polars-expr-flatten"]], "polars.Expr.dt.total_days": [[429, "polars-expr-dt-total-days"]], "polars.Expr.dt.offset_by": [[418, "polars-expr-dt-offset-by"]], "polars.Expr.dt.truncate": [[436, "polars-expr-dt-truncate"]], "polars.Expr.dt.quarter": [[420, "polars-expr-dt-quarter"]], "polars.Expr.dt.total_hours": [[430, "polars-expr-dt-total-hours"]], "polars.Expr.dt.microsecond": [[406, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millisecond": [[409, "polars-expr-dt-millisecond"]], "polars.Expr.ewm_var": [[446, "polars-expr-ewm-var"]], "polars.Expr.explode": [[449, "polars-expr-explode"]], "polars.Expr.dt.epoch": [[401, "polars-expr-dt-epoch"]], "polars.Expr.dt.time": [[426, "polars-expr-dt-time"]], "polars.Expr.extend_constant": [[450, "polars-expr-extend-constant"]], "polars.Expr.fill_null": [[452, "polars-expr-fill-null"]], "polars.Expr.dt.iso_year": [[405, "polars-expr-dt-iso-year"]], "polars.Expr.dt.round": [[422, "polars-expr-dt-round"]], "polars.Expr.exclude": [[447, "polars-expr-exclude"]], "polars.Expr.dt.hour": [[402, "polars-expr-dt-hour"]], "polars.Expr.dt.microseconds": [[407, "polars-expr-dt-microseconds"]], "polars.Expr.dt.strftime": [[425, "polars-expr-dt-strftime"]], "polars.Expr.entropy": [[441, "polars-expr-entropy"]], "polars.Expr.dt.total_nanoseconds": [[434, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.to_string": [[428, "polars-expr-dt-to-string"]], "polars.Expr.eq": [[442, "polars-expr-eq"]], "polars.Expr.exp": [[448, "polars-expr-exp"]], "polars.Expr.dt.timestamp": [[427, "polars-expr-dt-timestamp"]], "polars.Expr.dt.dst_offset": [[400, "polars-expr-dt-dst-offset"]], "polars.Expr.fill_nan": [[451, "polars-expr-fill-nan"]], "polars.Expr.dt.hours": [[403, "polars-expr-dt-hours"]], "polars.Expr.dt.week": [[437, "polars-expr-dt-week"]], "polars.Expr.dt.total_minutes": [[433, "polars-expr-dt-total-minutes"]], "polars.Expr.ewm_mean": [[444, "polars-expr-ewm-mean"]], "polars.Expr.eq_missing": [[443, "polars-expr-eq-missing"]], "polars.Expr.dt.millennium": [[408, "polars-expr-dt-millennium"]], "polars.Expr.dt.is_leap_year": [[404, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.second": [[423, "polars-expr-dt-second"]], "polars.Expr.dt.seconds": [[424, "polars-expr-dt-seconds"]], "polars.Expr.dt.minute": [[411, "polars-expr-dt-minute"]], "polars.Expr.dt.with_time_unit": [[439, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.nanoseconds": [[417, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.nanosecond": [[416, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.days": [[399, "polars-expr-dt-days"]], "polars.Expr.dt.ordinal_day": [[419, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.weekday": [[438, "polars-expr-dt-weekday"]], "polars.Expr.dt.total_microseconds": [[431, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.replace_time_zone": [[421, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.total_seconds": [[435, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.month_start": [[415, "polars-expr-dt-month-start"]], "polars.Expr.dt.year": [[440, "polars-expr-dt-year"]], "polars.Expr.ewm_std": [[445, "polars-expr-ewm-std"]], "polars.Expr.dt.total_milliseconds": [[432, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.month_end": [[414, "polars-expr-dt-month-end"]], "polars.Expr.cumcount": [[378, "polars-expr-cumcount"]], "polars.Expr.dt.day": [[398, "polars-expr-dt-day"]], "polars.Expr.bin.encode": [[357, "polars-expr-bin-encode"]], "polars.Expr.dt.date": [[396, "polars-expr-dt-date"]], "polars.Expr.cumulative_eval": [[383, "polars-expr-cumulative-eval"]], "polars.Expr.cat.get_categories": [[362, "polars-expr-cat-get-categories"]], "polars.Expr.bin.decode": [[356, "polars-expr-bin-decode"]], "polars.Expr.bin.contains": [[355, "polars-expr-bin-contains"]], "polars.Expr.cum_sum": [[377, "polars-expr-cum-sum"]], "polars.Expr.arr.unique": [[352, "polars-expr-arr-unique"]], "polars.Expr.diff": [[387, "polars-expr-diff"]], "polars.Expr.arr.to_struct": [[351, "polars-expr-arr-to-struct"]], "polars.Expr.dot": [[388, "polars-expr-dot"]], "polars.Expr.arr.reverse": [[345, "polars-expr-arr-reverse"]], "polars.Expr.arr.min": [[343, "polars-expr-arr-min"]], "polars.Expr.cum_prod": [[376, "polars-expr-cum-prod"]], "polars.Expr.bin.ends_with": [[358, "polars-expr-bin-ends-with"]], "polars.Expr.cummin": [[380, "polars-expr-cummin"]], "polars.Expr.cos": [[369, "polars-expr-cos"]], "polars.Expr.cumsum": [[382, "polars-expr-cumsum"]], "polars.Expr.arr.sum": [[349, "polars-expr-arr-sum"]], "polars.Expr.deserialize": [[386, "polars-expr-deserialize"]], "polars.Expr.cbrt": [[364, "polars-expr-cbrt"]], "polars.Expr.dt.datetime": [[397, "polars-expr-dt-datetime"]], "polars.Expr.clip_min": [[368, "polars-expr-clip-min"]], "polars.Expr.bottom_k": [[360, "polars-expr-bottom-k"]], "polars.Expr.arr.var": [[353, "polars-expr-arr-var"]], "polars.Expr.cummax": [[379, "polars-expr-cummax"]], "polars.Expr.dt.combine": [[394, "polars-expr-dt-combine"]], "polars.Expr.count": [[372, "polars-expr-count"]], "polars.Expr.backward_fill": [[354, "polars-expr-backward-fill"]], "polars.Expr.drop_nulls": [[390, "polars-expr-drop-nulls"]], "polars.Expr.degrees": [[385, "polars-expr-degrees"]], "polars.Expr.arr.sort": [[347, "polars-expr-arr-sort"]], "polars.Expr.dt.convert_time_zone": [[395, "polars-expr-dt-convert-time-zone"]], "polars.Expr.clip": [[366, "polars-expr-clip"]], "polars.Expr.bin.starts_with": [[359, "polars-expr-bin-starts-with"]], "polars.Expr.arr.median": [[342, "polars-expr-arr-median"]], "polars.Expr.cum_count": [[373, "polars-expr-cum-count"]], "polars.Expr.cat.set_ordering": [[363, "polars-expr-cat-set-ordering"]], "polars.Expr.cast": [[361, "polars-expr-cast"]], "polars.Expr.arr.shift": [[346, "polars-expr-arr-shift"]], "polars.Expr.cum_max": [[374, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[375, "polars-expr-cum-min"]], "polars.Expr.cosh": [[370, "polars-expr-cosh"]], "polars.Expr.arr.n_unique": [[344, "polars-expr-arr-n-unique"]], "polars.Expr.cut": [[384, "polars-expr-cut"]], "polars.Expr.ceil": [[365, "polars-expr-ceil"]], "polars.Expr.cumprod": [[381, "polars-expr-cumprod"]], "polars.Expr.dt.base_utc_offset": [[391, "polars-expr-dt-base-utc-offset"]], "polars.Expr.arr.to_list": [[350, "polars-expr-arr-to-list"]], "polars.Expr.arr.std": [[348, "polars-expr-arr-std"]], "polars.Expr.clip_max": [[367, "polars-expr-clip-max"]], "polars.Expr.dt.cast_time_unit": [[392, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cot": [[371, "polars-expr-cot"]], "polars.Expr.drop_nans": [[389, "polars-expr-drop-nans"]], "polars.Expr.dt.century": [[393, "polars-expr-dt-century"]], "polars.DataFrame.unstack": [[269, "polars-dataframe-unstack"]], "polars.DataFrame.quantile": [[229, "polars-dataframe-quantile"]], "polars.DataFrame.tail": [[254, "polars-dataframe-tail"]], "polars.DataFrame.shrink_to_fit": [[248, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_pandas": [[262, "polars-dataframe-to-pandas"]], "polars.DataFrame.transpose": [[266, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[267, "polars-dataframe-unique"]], "polars.DataFrame.to_dummies": [[259, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[260, "polars-dataframe-to-init-repr"]], "polars.DataFrame.top_k": [[265, "polars-dataframe-top-k"]], "polars.DataFrame.select_seq": [[243, "polars-dataframe-select-seq"]], "polars.DataFrame.sort": [[250, "polars-dataframe-sort"]], "polars.DataFrame.to_dict": [[257, "polars-dataframe-to-dict"]], "polars.DataFrame.with_row_count": [[277, "polars-dataframe-with-row-count"]], "polars.DataFrame.replace_at_idx": [[233, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.product": [[228, "polars-dataframe-product"]], "polars.DataFrame.replace": [[232, "polars-dataframe-replace"]], "polars.DataFrame.std": [[251, "polars-dataframe-std"]], "polars.DataFrame.rows": [[238, "polars-dataframe-rows"]], "polars.DataFrame.sum_horizontal": [[253, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_numpy": [[261, "polars-dataframe-to-numpy"]], "polars.DataFrame.upsample": [[271, "polars-dataframe-upsample"]], "polars.DataFrame.update": [[270, "polars-dataframe-update"]], "polars.dataframe.group_by.GroupBy.agg": [[280, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.apply": [[282, "polars-dataframe-group-by-groupby-apply"]], "polars.DataFrame.to_struct": [[264, "polars-dataframe-to-struct"]], "polars.DataFrame.schema": [[241, "polars-dataframe-schema"]], "polars.DataFrame.sum": [[252, "polars-dataframe-sum"]], "polars.DataFrame.replace_column": [[234, "polars-dataframe-replace-column"]], "polars.DataFrame.unnest": [[268, "polars-dataframe-unnest"]], "polars.DataFrame.rows_by_key": [[239, "polars-dataframe-rows-by-key"]], "polars.DataFrame.reverse": [[235, "polars-dataframe-reverse"]], "polars.DataFrame.sample": [[240, "polars-dataframe-sample"]], "polars.DataFrame.rolling": [[236, "polars-dataframe-rolling"]], "polars.DataFrame.shape": [[245, "polars-dataframe-shape"]], "polars.DataFrame.take_every": [[255, "polars-dataframe-take-every"]], "polars.DataFrame.to_arrow": [[256, "polars-dataframe-to-arrow"]], "polars.DataFrame.var": [[272, "polars-dataframe-var"]], "polars.DataFrame.set_sorted": [[244, "polars-dataframe-set-sorted"]], "polars.dataframe.group_by.GroupBy.all": [[281, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.rechunk": [[230, "polars-dataframe-rechunk"]], "polars.DataFrame.select": [[242, "polars-dataframe-select"]], "polars.DataFrame.with_columns": [[275, "polars-dataframe-with-columns"]], "polars.DataFrame.slice": [[249, "polars-dataframe-slice"]], "polars.dataframe.group_by.GroupBy.first": [[284, "polars-dataframe-group-by-groupby-first"]], "polars.DataFrame.shift": [[246, "polars-dataframe-shift"]], "polars.DataFrame.to_series": [[263, "polars-dataframe-to-series"]], "polars.DataFrame.to_dicts": [[258, "polars-dataframe-to-dicts"]], "polars.DataFrame.with_columns_seq": [[276, "polars-dataframe-with-columns-seq"]], "polars.dataframe.group_by.GroupBy.count": [[283, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.vstack": [[273, "polars-dataframe-vstack"]], "polars.DataFrame.row": [[237, "polars-dataframe-row"]], "polars.dataframe.group_by.GroupBy.__iter__": [[279, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.with_row_index": [[278, "polars-dataframe-with-row-index"]], "polars.DataFrame.rename": [[231, "polars-dataframe-rename"]], "polars.DataFrame.shift_and_fill": [[247, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.width": [[274, "polars-dataframe-width"]], "polars.time": [[775, "polars-time"]], "polars.std": [[770, "polars-std"]], "polars.median": [[758, "polars-median"]], "polars.lit": [[750, "polars-lit"]], "polars.zeros": [[780, "polars-zeros"]], "polars.len": [[749, "polars-len"]], "polars.var": [[778, "polars-var"]], "Name": [[794, "name"]], "polars.select": [[768, "polars-select"]], "polars.ones": [[762, "polars-ones"]], "polars.n_unique": [[761, "polars-n-unique"]], "polars.rolling_corr": [[766, "polars-rolling-corr"]], "polars.mean": [[756, "polars-mean"]], "polars.groups": [[743, "polars-groups"]], "polars.min": [[759, "polars-min"]], "Meta": [[791, "meta"]], "polars.repeat": [[765, "polars-repeat"]], "polars.quantile": [[763, "polars-quantile"]], "polars.map": [[751, "polars-map"]], "polars.map_batches": [[752, "polars-map-batches"]], "polars.min_horizontal": [[760, "polars-min-horizontal"]], "Operators": [[795, "operators"]], "Conjunction": [[795, "conjunction"]], "Comparison": [[795, "comparison"]], "Numeric": [[795, "numeric"], [306, "numeric"]], "polars.max": [[754, "polars-max"]], "polars.head": [[744, "polars-head"]], "Columns / names": [[786, "columns-names"]], "polars.map_groups": [[753, "polars-map-groups"]], "polars.implode": [[745, "polars-implode"]], "polars.mean_horizontal": [[757, "polars-mean-horizontal"]], "polars.struct": [[771, "polars-struct"]], "polars.sum": [[772, "polars-sum"]], "polars.max_horizontal": [[755, "polars-max-horizontal"]], "polars.tail": [[774, "polars-tail"]], "polars.int_ranges": [[747, "polars-int-ranges"]], "polars.reduce": [[764, "polars-reduce"]], "polars.rolling_cov": [[767, "polars-rolling-cov"]], "polars.format": [[741, "polars-format"]], "polars.col": [[785, "polars-col"]], "polars.sum_horizontal": [[773, "polars-sum-horizontal"]], "polars.from_epoch": [[742, "polars-from-epoch"]], "polars.time_ranges": [[777, "polars-time-ranges"]], "polars.sql_expr": [[769, "polars-sql-expr"]], "polars.time_range": [[776, "polars-time-range"]], "polars.when": [[779, "polars-when"]], "polars.int_range": [[746, "polars-int-range"]], "polars.last": [[748, "polars-last"]], "Expressions": [[789, "expressions"]], "polars.dataframe.group_by.GroupBy.mean": [[290, "polars-dataframe-group-by-groupby-mean"]], "Data types": [[306, "data-types"]], "Nested": [[306, "nested"]], "Other": [[306, "other"]], "polars.Expr.arctanh": [[324, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.median": [[291, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arg_min": [[326, "polars-expr-arg-min"]], "polars.Expr.all": [[313, "polars-expr-all"]], "polars.Expr.arg_unique": [[329, "polars-expr-arg-unique"]], "polars.Expr.arcsin": [[321, "polars-expr-arcsin"]], "polars.Expr.arr.get": [[338, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[339, "polars-expr-arr-join"]], "polars.Expr.any": [[315, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.max": [[289, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arg_true": [[328, "polars-expr-arg-true"]], "polars.Expr.arr.explode": [[336, "polars-expr-arr-explode"]], "polars.Expr.arctan": [[323, "polars-expr-arctan"]], "polars.Expr.arg_sort": [[327, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.len": [[287, "polars-dataframe-group-by-groupby-len"]], "DataFrame": [[302, "dataframe"]], "polars.Expr.and_": [[314, "polars-expr-and"]], "polars.Expr.arccos": [[319, "polars-expr-arccos"]], "polars.Expr.arr.arg_max": [[332, "polars-expr-arr-arg-max"]], "polars.Expr.arr.contains": [[334, "polars-expr-arr-contains"]], "polars.Expr.arr.all": [[330, "polars-expr-arr-all"]], "polars.dataframe.group_by.GroupBy.n_unique": [[293, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.add": [[310, "polars-expr-add"]], "polars.Expr.alias": [[312, "polars-expr-alias"]], "polars.Expr.arcsinh": [[322, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.last": [[286, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.append": [[316, "polars-expr-append"]], "polars.Expr.agg_groups": [[311, "polars-expr-agg-groups"]], "polars.Expr.approx_n_unique": [[318, "polars-expr-approx-n-unique"]], "polars.Expr.arg_max": [[325, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.head": [[285, "polars-dataframe-group-by-groupby-head"]], "Exceptions": [[307, "exceptions"]], "polars.Expr.arr.max": [[341, "polars-expr-arr-max"]], "polars.Expr.arr.first": [[337, "polars-expr-arr-first"]], "polars.dataframe.group_by.GroupBy.tail": [[296, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arr.last": [[340, "polars-expr-arr-last"]], "polars.Expr.arr.arg_min": [[333, "polars-expr-arr-arg-min"]], "polars.Expr.apply": [[317, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.sum": [[295, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arr.count_matches": [[335, "polars-expr-arr-count-matches"]], "polars.dataframe.group_by.GroupBy.map_groups": [[288, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.abs": [[309, "polars-expr-abs"]], "polars.Expr.arr.any": [[331, "polars-expr-arr-any"]], "polars.Expr.arccosh": [[320, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.quantile": [[294, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.min": [[292, "polars-dataframe-group-by-groupby-min"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[61, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[62, "polars.List"]], "__init__() (polars.list method)": [[62, "polars.List.__init__"]], "null (class in polars)": [[63, "polars.Null"]], "__init__() (polars.null method)": [[63, "polars.Null.__init__"]], "object (class in polars)": [[64, "polars.Object"]], "__init__() (polars.object method)": [[64, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[65, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[66, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[68, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[69, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[70, "polars.SQLContext.unregister"]], "string (class in polars)": [[71, "polars.String"]], "__init__() (polars.string method)": [[71, "polars.String.__init__"]], "stringcache (class in polars)": [[72, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[72, "polars.StringCache.__init__"]], "struct (class in polars)": [[73, "polars.Struct"]], "__init__() (polars.struct method)": [[73, "polars.Struct.__init__"]], "time (class in polars)": [[74, "polars.Time"]], "__init__() (polars.time method)": [[74, "polars.Time.__init__"]], "uint16 (class in polars)": [[75, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[75, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[76, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[76, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[77, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[77, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[78, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[78, "polars.UInt8.__init__"]], "unknown (class in polars)": [[79, "polars.Unknown"]], "__init__() (polars.unknown method)": [[79, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[80, "polars.Utf8"]], "align_frames() (in module polars)": [[81, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[82, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[83, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[84, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[85, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[86, "polars.build_info"]], "collect_all() (in module polars)": [[87, "polars.collect_all"]], "collect_all_async() (in module polars)": [[88, "polars.collect_all_async"]], "concat() (in module polars)": [[89, "polars.concat"]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache"]], "arrowerror": [[92, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[93, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[94, "polars.exceptions.ComputeError"]], "duplicateerror": [[95, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[96, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[97, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[98, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[99, "polars.exceptions.PolarsError"]], "polarspanicerror": [[100, "polars.exceptions.PolarsPanicError"]], "rowserror": [[101, "polars.exceptions.RowsError"]], "schemaerror": [[102, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[103, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[104, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[105, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[106, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[107, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[108, "polars.from_dataframe"]], "from_dict() (in module polars)": [[109, "polars.from_dict"]], "from_dicts() (in module polars)": [[110, "polars.from_dicts"]], "from_numpy() (in module polars)": [[111, "polars.from_numpy"]], "from_pandas() (in module polars)": [[112, "polars.from_pandas"]], "from_records() (in module polars)": [[113, "polars.from_records"]], "from_repr() (in module polars)": [[114, "polars.from_repr"]], "get_index_type() (in module polars)": [[115, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[116, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[117, "polars.read_avro"]], "read_csv() (in module polars)": [[118, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[119, "polars.read_csv_batched"]], "read_database() (in module polars)": [[120, "polars.read_database"]], "read_database_uri() (in module polars)": [[121, "polars.read_database_uri"]], "read_delta() (in module polars)": [[122, "polars.read_delta"]], "read_excel() (in module polars)": [[123, "polars.read_excel"]], "read_ipc() (in module polars)": [[124, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[125, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[126, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[127, "polars.read_json"]], "read_ndjson() (in module polars)": [[128, "polars.read_ndjson"]], "read_ods() (in module polars)": [[129, "polars.read_ods"]], "read_parquet() (in module polars)": [[130, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[131, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[132, "polars.scan_csv"]], "scan_delta() (in module polars)": [[133, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[134, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[135, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[136, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[137, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[138, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[139, "polars.set_random_seed"]], "show_versions() (in module polars)": [[140, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[141, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[143, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[145, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[145, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[152, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[153, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[154, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[157, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[158, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[159, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[160, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[161, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[162, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[163, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[164, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[165, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[166, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[167, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[168, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[169, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[170, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[171, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[172, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[173, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[174, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[175, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[176, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[177, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[178, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[179, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[180, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[181, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[182, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[183, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[184, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[185, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[186, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[187, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[188, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[189, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[190, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[191, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[192, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[193, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[194, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[195, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[196, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[197, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[198, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[199, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[200, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[201, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[202, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[203, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[204, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[205, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[206, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[207, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[208, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[209, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[210, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[211, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[212, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[213, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[214, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[215, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[216, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[217, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[218, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[219, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[220, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[221, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[222, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[223, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[224, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[225, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[226, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[227, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[228, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[229, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[230, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[231, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[232, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[233, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[234, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[235, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[236, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[237, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[238, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[239, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[240, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[241, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[242, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[243, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[244, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[245, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[246, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[247, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[248, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[249, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[250, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[251, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[252, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[253, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[254, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[255, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[256, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[257, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[258, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[259, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[260, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[261, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[262, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[263, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[264, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[265, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[266, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[267, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[268, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[269, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[270, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[271, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[272, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[273, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[274, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[275, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[276, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[277, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[278, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[309, "polars.Expr.abs"]], "add() (polars.expr method)": [[310, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[311, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[312, "polars.Expr.alias"]], "all() (polars.expr method)": [[313, "polars.Expr.all"]], "and_() (polars.expr method)": [[314, "polars.Expr.and_"]], "any() (polars.expr method)": [[315, "polars.Expr.any"]], "append() (polars.expr method)": [[316, "polars.Expr.append"]], "apply() (polars.expr method)": [[317, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[318, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[319, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[320, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[321, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[322, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[323, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[324, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[325, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[326, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[327, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[328, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[329, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[330, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[331, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[332, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[333, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[334, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[335, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[336, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[337, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[338, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[339, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[340, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[341, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[342, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[343, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[344, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[345, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[346, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[347, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[348, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[349, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[350, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[351, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[352, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[353, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[354, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[355, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[356, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[357, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[358, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[359, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[360, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[361, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[362, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[363, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[364, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[365, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[366, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[367, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[368, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[369, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[370, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[371, "polars.Expr.cot"]], "count() (polars.expr method)": [[372, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[373, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[374, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[375, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[376, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[377, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[378, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[379, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[380, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[381, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[382, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[383, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[384, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[385, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[386, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[387, "polars.Expr.diff"]], "dot() (polars.expr method)": [[388, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[389, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[390, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[391, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[392, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[393, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[394, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[395, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[396, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[397, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[398, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[399, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[400, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[401, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[402, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[403, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[404, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[405, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[406, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[407, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[408, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[409, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[410, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[411, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[412, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[413, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[414, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[415, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[416, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[417, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[418, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[419, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[420, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[421, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[422, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[423, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[424, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[425, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[426, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[427, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[428, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[431, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[432, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[433, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[434, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[435, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[436, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[437, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[438, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[439, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[440, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[441, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[442, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[443, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[444, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[445, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[446, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[447, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[448, "polars.Expr.exp"]], "explode() (polars.expr method)": [[449, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[450, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[451, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[452, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[453, "polars.Expr.filter"]], "first() (polars.expr method)": [[454, "polars.Expr.first"]], "flatten() (polars.expr method)": [[455, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[456, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[457, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[458, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[459, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[460, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[461, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[462, "polars.Expr.ge"]], "get() (polars.expr method)": [[463, "polars.Expr.get"]], "gt() (polars.expr method)": [[464, "polars.Expr.gt"]], "hash() (polars.expr method)": [[465, "polars.Expr.hash"]], "head() (polars.expr method)": [[466, "polars.Expr.head"]], "hist() (polars.expr method)": [[467, "polars.Expr.hist"]], "implode() (polars.expr method)": [[468, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[469, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[470, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[471, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[472, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[473, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[474, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[475, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[476, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[477, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[478, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[479, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[480, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[481, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[482, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[483, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[484, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[485, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[486, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[487, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[488, "polars.Expr.last"]], "le() (polars.expr method)": [[489, "polars.Expr.le"]], "len() (polars.expr method)": [[490, "polars.Expr.len"]], "limit() (polars.expr method)": [[491, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[492, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[493, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[494, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[495, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[496, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[497, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[498, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[499, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[500, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[501, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[502, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[503, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[504, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[505, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[506, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[507, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[508, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[509, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[510, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[511, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[512, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[513, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[514, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[515, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[516, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[517, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[518, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[519, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[520, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[521, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[522, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[523, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[524, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[525, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[526, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[527, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[528, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[529, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[530, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[531, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[532, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[533, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[534, "polars.Expr.list.var"]], "log() (polars.expr method)": [[535, "polars.Expr.log"]], "log10() (polars.expr method)": [[536, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[537, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[538, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[539, "polars.Expr.lt"]], "map() (polars.expr method)": [[540, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[541, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[542, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[543, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[544, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[545, "polars.Expr.max"]], "mean() (polars.expr method)": [[546, "polars.Expr.mean"]], "median() (polars.expr method)": [[547, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[548, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[549, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[550, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[551, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[552, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[553, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[554, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[555, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[556, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[557, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[558, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[559, "polars.Expr.min"]], "mod() (polars.expr method)": [[560, "polars.Expr.mod"]], "mode() (polars.expr method)": [[561, "polars.Expr.mode"]], "mul() (polars.expr method)": [[562, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[563, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[564, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[565, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[566, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[567, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[568, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[569, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[570, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[571, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[572, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[573, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[574, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[575, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[576, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[577, "polars.Expr.neg"]], "not_() (polars.expr method)": [[578, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[579, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[580, "polars.Expr.or_"]], "over() (polars.expr method)": [[581, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[582, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[583, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[584, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[585, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[586, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[587, "polars.Expr.prefix"]], "product() (polars.expr method)": [[588, "polars.Expr.product"]], "qcut() (polars.expr method)": [[589, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[590, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[591, "polars.Expr.radians"]], "rank() (polars.expr method)": [[592, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[593, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[594, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[595, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[596, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[597, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[598, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[599, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[600, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[601, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[602, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[603, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[604, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[605, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[606, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[607, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[608, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[609, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[610, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[611, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[612, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[613, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[614, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[615, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[616, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[617, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[618, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[619, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[620, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[621, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[622, "polars.Expr.sign"]], "sin() (polars.expr method)": [[623, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[624, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[625, "polars.Expr.skew"]], "slice() (polars.expr method)": [[626, "polars.Expr.slice"]], "sort() (polars.expr method)": [[627, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[628, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[629, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[630, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[631, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[632, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[633, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[634, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[635, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[636, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[637, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[638, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[639, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[640, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[641, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[642, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[643, "polars.Expr.str.find"]], "json_decode() (polars.expr.str method)": [[644, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[645, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[646, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[647, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[648, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[649, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[650, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[651, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[652, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[653, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[654, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[655, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[656, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[657, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[658, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[659, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[660, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[661, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[662, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[663, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[664, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[665, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[666, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[667, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[668, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[669, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[670, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[671, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[672, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[673, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[674, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[675, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[676, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[677, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[678, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[679, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[680, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[681, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[682, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[683, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[684, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[685, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[686, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[687, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[688, "polars.Expr.sum"]], "tail() (polars.expr method)": [[689, "polars.Expr.tail"]], "take() (polars.expr method)": [[690, "polars.Expr.take"]], "take_every() (polars.expr method)": [[691, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[692, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[693, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[694, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[695, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[696, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[697, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[698, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[699, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[700, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[701, "polars.Expr.var"]], "where() (polars.expr method)": [[702, "polars.Expr.where"]], "xor() (polars.expr method)": [[703, "polars.Expr.xor"]], "all() (in module polars)": [[704, "polars.all"]], "all_horizontal() (in module polars)": [[705, "polars.all_horizontal"]], "any() (in module polars)": [[706, "polars.any"]], "any_horizontal() (in module polars)": [[707, "polars.any_horizontal"]], "apply() (in module polars)": [[708, "polars.apply"]], "approx_n_unique() (in module polars)": [[709, "polars.approx_n_unique"]], "arange() (in module polars)": [[710, "polars.arange"]], "arctan2() (in module polars)": [[711, "polars.arctan2"]], "arctan2d() (in module polars)": [[712, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[713, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[714, "polars.arg_where"]], "coalesce() (in module polars)": [[715, "polars.coalesce"]], "concat_list() (in module polars)": [[716, "polars.concat_list"]], "concat_str() (in module polars)": [[717, "polars.concat_str"]], "corr() (in module polars)": [[718, "polars.corr"]], "count() (in module polars)": [[719, "polars.count"]], "cov() (in module polars)": [[720, "polars.cov"]], "cum_count() (in module polars)": [[721, "polars.cum_count"]], "cum_fold() (in module polars)": [[722, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[723, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[724, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[725, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[726, "polars.cumfold"]], "cumreduce() (in module polars)": [[727, "polars.cumreduce"]], "cumsum() (in module polars)": [[728, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[729, "polars.cumsum_horizontal"]], "date() (in module polars)": [[730, "polars.date"]], "date_range() (in module polars)": [[731, "polars.date_range"]], "date_ranges() (in module polars)": [[732, "polars.date_ranges"]], "datetime() (in module polars)": [[733, "polars.datetime"]], "datetime_range() (in module polars)": [[734, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[735, "polars.datetime_ranges"]], "duration() (in module polars)": [[736, "polars.duration"]], "element() (in module polars)": [[737, "polars.element"]], "exclude() (in module polars)": [[738, "polars.exclude"]], "first() (in module polars)": [[739, "polars.first"]], "fold() (in module polars)": [[740, "polars.fold"]], "format() (in module polars)": [[741, "polars.format"]], "from_epoch() (in module polars)": [[742, "polars.from_epoch"]], "groups() (in module polars)": [[743, "polars.groups"]], "head() (in module polars)": [[744, "polars.head"]], "implode() (in module polars)": [[745, "polars.implode"]], "int_range() (in module polars)": [[746, "polars.int_range"]], "int_ranges() (in module polars)": [[747, "polars.int_ranges"]], "last() (in module polars)": [[748, "polars.last"]], "len() (in module polars)": [[749, "polars.len"]], "lit() (in module polars)": [[750, "polars.lit"]], "map() (in module polars)": [[751, "polars.map"]], "map_batches() (in module polars)": [[752, "polars.map_batches"]], "map_groups() (in module polars)": [[753, "polars.map_groups"]], "max() (in module polars)": [[754, "polars.max"]], "max_horizontal() (in module polars)": [[755, "polars.max_horizontal"]], "mean() (in module polars)": [[756, "polars.mean"]], "mean_horizontal() (in module polars)": [[757, "polars.mean_horizontal"]], "median() (in module polars)": [[758, "polars.median"]], "min() (in module polars)": [[759, "polars.min"]], "min_horizontal() (in module polars)": [[760, "polars.min_horizontal"]], "n_unique() (in module polars)": [[761, "polars.n_unique"]], "ones() (in module polars)": [[762, "polars.ones"]], "quantile() (in module polars)": [[763, "polars.quantile"]], "reduce() (in module polars)": [[764, "polars.reduce"]], "repeat() (in module polars)": [[765, "polars.repeat"]], "rolling_corr() (in module polars)": [[766, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[767, "polars.rolling_cov"]], "select() (in module polars)": [[768, "polars.select"]], "sql_expr() (in module polars)": [[769, "polars.sql_expr"]], "std() (in module polars)": [[770, "polars.std"]], "struct() (in module polars)": [[771, "polars.struct"]], "sum() (in module polars)": [[772, "polars.sum"]], "sum_horizontal() (in module polars)": [[773, "polars.sum_horizontal"]], "tail() (in module polars)": [[774, "polars.tail"]], "time() (in module polars)": [[775, "polars.time"]], "time_range() (in module polars)": [[776, "polars.time_range"]], "time_ranges() (in module polars)": [[777, "polars.time_ranges"]], "var() (in module polars)": [[778, "polars.var"]], "when() (in module polars)": [[779, "polars.when"]], "zeros() (in module polars)": [[780, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[804, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[805, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[806, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[807, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[808, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[809, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[810, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[811, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[812, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[813, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[814, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[815, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[816, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[817, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[818, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[819, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[820, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[821, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[822, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[823, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[824, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[825, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[826, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[827, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[828, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[829, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[830, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[831, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[832, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[833, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[834, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[835, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[836, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[837, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[838, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[839, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[840, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[841, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[842, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[843, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[844, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[845, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[846, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[847, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[848, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[849, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[850, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[851, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[852, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[853, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[854, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[855, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[856, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[857, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[858, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[859, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[860, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[861, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[862, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[863, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[864, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[865, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[866, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[867, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[868, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[869, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[870, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[871, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[872, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[873, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[874, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[875, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[876, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[877, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[878, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[879, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[880, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[881, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[882, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[883, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[884, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[885, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[886, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[887, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[888, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[889, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[890, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[891, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[892, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[893, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[894, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[905, "module-polars.plugins"], [906, "module-polars.selectors"]], "polars.plugins": [[905, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[905, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[906, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[906, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[906, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[906, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[906, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[906, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[906, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[906, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[906, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[906, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[906, "polars.selectors.first"]], "float() (in module polars.selectors)": [[906, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[906, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[906, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[906, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[906, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[906, "polars.selectors.numeric"]], "polars.selectors": [[906, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[906, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[906, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[906, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[906, "polars.selectors.time"]], "abs() (polars.series method)": [[908, "polars.Series.abs"]], "alias() (polars.series method)": [[909, "polars.Series.alias"]], "all() (polars.series method)": [[910, "polars.Series.all"]], "any() (polars.series method)": [[911, "polars.Series.any"]], "append() (polars.series method)": [[912, "polars.Series.append"]], "apply() (polars.series method)": [[913, "polars.Series.apply"]], "arccos() (polars.series method)": [[914, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[915, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[916, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[917, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[918, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[919, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[920, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[921, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[922, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[923, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[924, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[925, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[926, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[927, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[928, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[929, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[930, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[931, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[932, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[933, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[934, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[935, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[936, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[937, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[938, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[939, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[940, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[941, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[942, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[943, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[944, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[945, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[946, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[947, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[948, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[949, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[950, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[951, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[952, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[953, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[954, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[955, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[956, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[957, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[958, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[959, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[960, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[961, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[962, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[963, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[964, "polars.Series.clear"]], "clip() (polars.series method)": [[965, "polars.Series.clip"]], "clip_max() (polars.series method)": [[966, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[967, "polars.Series.clip_min"]], "clone() (polars.series method)": [[968, "polars.Series.clone"]], "cos() (polars.series method)": [[969, "polars.Series.cos"]], "cosh() (polars.series method)": [[970, "polars.Series.cosh"]], "cot() (polars.series method)": [[971, "polars.Series.cot"]], "cum_max() (polars.series method)": [[972, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[973, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[974, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[975, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[976, "polars.Series.cummax"]], "cummin() (polars.series method)": [[977, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[978, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[979, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[980, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[981, "polars.Series.cut"]], "describe() (polars.series method)": [[982, "polars.Series.describe"]], "diff() (polars.series method)": [[983, "polars.Series.diff"]], "dot() (polars.series method)": [[984, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[985, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[986, "polars.Series.drop_nulls"]], "base_utc_offset() (polars.series.dt method)": [[987, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[988, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[989, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[990, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[991, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[992, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[993, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[994, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[995, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[996, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[997, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[998, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[999, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1000, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1001, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1002, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1003, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1004, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1005, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1006, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1007, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1008, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1009, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1010, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1011, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1012, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1013, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1014, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1015, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1016, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1017, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1018, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1019, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1020, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1021, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1022, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1023, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1024, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1025, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1026, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1027, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1028, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1029, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1030, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1031, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1032, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1033, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1034, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1035, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1036, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1037, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1038, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1039, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1040, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1041, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1042, "polars.Series.entropy"]], "equals() (polars.series method)": [[1043, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1044, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1045, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[1046, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1047, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1048, "polars.Series.exp"]], "explode() (polars.series method)": [[1049, "polars.Series.explode"]], "extend() (polars.series method)": [[1050, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1051, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1052, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1053, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1054, "polars.Series.filter"]], "flags (polars.series attribute)": [[1055, "polars.Series.flags"]], "floor() (polars.series method)": [[1056, "polars.Series.floor"]], "gather() (polars.series method)": [[1057, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1058, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1059, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1060, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1061, "polars.Series.hash"]], "head() (polars.series method)": [[1062, "polars.Series.head"]], "hist() (polars.series method)": [[1063, "polars.Series.hist"]], "implode() (polars.series method)": [[1064, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1065, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1066, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1067, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1068, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1069, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1070, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1071, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1072, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1073, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1074, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1075, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1076, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1077, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1078, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1079, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1080, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1081, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1082, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1083, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1084, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1085, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1086, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1087, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1088, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1089, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1090, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1091, "polars.Series.len"]], "limit() (polars.series method)": [[1092, "polars.Series.limit"]], "all() (polars.series.list method)": [[1093, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1094, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1095, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1096, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1097, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1098, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1099, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1100, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1101, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1102, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1103, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1104, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1105, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1106, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1107, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1108, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1109, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1110, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1111, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1112, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1113, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1114, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1115, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1116, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1117, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1118, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1119, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1120, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1121, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1122, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1123, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1124, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1125, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1126, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1127, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1128, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1129, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1130, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1131, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1132, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1133, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1134, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1135, "polars.Series.list.var"]], "log() (polars.series method)": [[1136, "polars.Series.log"]], "log10() (polars.series method)": [[1137, "polars.Series.log10"]], "log1p() (polars.series method)": [[1138, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1139, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1140, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1141, "polars.Series.map_elements"]], "max() (polars.series method)": [[1142, "polars.Series.max"]], "mean() (polars.series method)": [[1143, "polars.Series.mean"]], "median() (polars.series method)": [[1144, "polars.Series.median"]], "min() (polars.series method)": [[1145, "polars.Series.min"]], "mode() (polars.series method)": [[1146, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1147, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1148, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1149, "polars.Series.name"]], "nan_max() (polars.series method)": [[1150, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1151, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1152, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1153, "polars.Series.not_"]], "null_count() (polars.series method)": [[1154, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1155, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1156, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1157, "polars.Series.peak_min"]], "product() (polars.series method)": [[1158, "polars.Series.product"]], "qcut() (polars.series method)": [[1159, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1160, "polars.Series.quantile"]], "rank() (polars.series method)": [[1161, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1162, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1163, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1164, "polars.Series.rename"]], "replace() (polars.series method)": [[1165, "polars.Series.replace"]], "reshape() (polars.series method)": [[1166, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1167, "polars.Series.reverse"]], "rle() (polars.series method)": [[1168, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1169, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1170, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1171, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1172, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1173, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1174, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1175, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1176, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1177, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1178, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1179, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1180, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1181, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1182, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1183, "polars.Series.sample"]], "scatter() (polars.series method)": [[1184, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1185, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1186, "polars.Series.series_equal"]], "set() (polars.series method)": [[1187, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1188, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1189, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1190, "polars.Series.shape"]], "shift() (polars.series method)": [[1191, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1192, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1193, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1194, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1195, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1196, "polars.Series.sign"]], "sin() (polars.series method)": [[1197, "polars.Series.sin"]], "sinh() (polars.series method)": [[1198, "polars.Series.sinh"]], "skew() (polars.series method)": [[1199, "polars.Series.skew"]], "slice() (polars.series method)": [[1200, "polars.Series.slice"]], "sort() (polars.series method)": [[1201, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1202, "polars.Series.sqrt"]], "std() (polars.series method)": [[1203, "polars.Series.std"]], "concat() (polars.series.str method)": [[1204, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1205, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1206, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1207, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1208, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1209, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1210, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1211, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1212, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1213, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1214, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1215, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1216, "polars.Series.str.find"]], "json_decode() (polars.series.str method)": [[1217, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1218, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1219, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1220, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1221, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1222, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1223, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1224, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1225, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1226, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1227, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1228, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1229, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1230, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1231, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1232, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1233, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1234, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1235, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1236, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1237, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1238, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1239, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1240, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1241, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1242, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1243, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1244, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1245, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1246, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1247, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1248, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1249, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1250, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1251, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1252, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1253, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1254, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1255, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1256, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1257, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1258, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1259, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1260, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1261, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1262, "polars.Series.sum"]], "tail() (polars.series method)": [[1263, "polars.Series.tail"]], "take() (polars.series method)": [[1264, "polars.Series.take"]], "take_every() (polars.series method)": [[1265, "polars.Series.take_every"]], "tan() (polars.series method)": [[1266, "polars.Series.tan"]], "tanh() (polars.series method)": [[1267, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1268, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1269, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1270, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1271, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1272, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1273, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1274, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1275, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1276, "polars.Series.top_k"]], "unique() (polars.series method)": [[1277, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1278, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1279, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1280, "polars.Series.value_counts"]], "var() (polars.series method)": [[1281, "polars.Series.var"]], "view() (polars.series method)": [[1282, "polars.Series.view"]], "zip_with() (polars.series method)": [[1283, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1300, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1300, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1300, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1300, "polars.SQLContext.__init__"]]}})